
STM32WB55.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b78  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004cb4  08004cb4  00014cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000004  08004dec  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000408  20000014  08004dfc  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000041c  08004dfc  0002041c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e10b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003d4f  00000000  00000000  0003e14f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b38  00000000  00000000  00041ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001970  00000000  00000000  000439d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000251d1  00000000  00000000  00045348  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013e4e  00000000  00000000  0006a519  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e4b6c  00000000  00000000  0007e367  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  00162ed3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007030  00000000  00000000  00162f50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08004c9c 	.word	0x08004c9c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08004c9c 	.word	0x08004c9c

0800017c <acc_init>:
static uint8_t get_temperature_LSB(void);
static uint8_t get_z_axis_MSB(void);
static uint8_t get_z_axis_LSB(void);
static int16_t convertTwosCompToInt(uint16_t u16twoscomp);
void acc_init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  configure();
 8000182:	f000 f82f 	bl	80001e4 <configure>
  lis2dw12_configure_ctrl_1();
 8000186:	f000 f815 	bl	80001b4 <lis2dw12_configure_ctrl_1>

  uint8_t u8cmd3[2] = {0};
 800018a:	2300      	movs	r3, #0
 800018c:	80bb      	strh	r3, [r7, #4]
  u8cmd3[0] = CTRL3_RW;
 800018e:	2322      	movs	r3, #34	; 0x22
 8000190:	713b      	strb	r3, [r7, #4]
  u8cmd3[1] = 0x03;
 8000192:	2303      	movs	r3, #3
 8000194:	717b      	strb	r3, [r7, #5]

  drv_SPI_assertCS(0);
 8000196:	2000      	movs	r0, #0
 8000198:	f004 fa7e 	bl	8004698 <drv_SPI_assertCS>

  drv_SPI_transmit_nBytes(u8cmd3,2);
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2102      	movs	r1, #2
 80001a0:	4618      	mov	r0, r3
 80001a2:	f004 fa37 	bl	8004614 <drv_SPI_transmit_nBytes>
  drv_SPI_assertCS(1);
 80001a6:	2001      	movs	r0, #1
 80001a8:	f004 fa76 	bl	8004698 <drv_SPI_assertCS>
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}

080001b4 <lis2dw12_configure_ctrl_1>:



static void lis2dw12_configure_ctrl_1(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
  uint8_t u8registerValue = (CTRL1_ODR_1600_200_HZ | CTRL1_MODE_SINGLE_CONVERSION | CTRL1_LP_MODE_1);
 80001ba:	2398      	movs	r3, #152	; 0x98
 80001bc:	71fb      	strb	r3, [r7, #7]
  uint8_t u8cmd[2] = {CTRL1_RW, u8registerValue};
 80001be:	2320      	movs	r3, #32
 80001c0:	713b      	strb	r3, [r7, #4]
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	717b      	strb	r3, [r7, #5]
  drv_SPI_assertCS(FALSE);
 80001c6:	2000      	movs	r0, #0
 80001c8:	f004 fa66 	bl	8004698 <drv_SPI_assertCS>
  drv_SPI_transmit_nBytes(u8cmd, sizeof(u8cmd));
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	2102      	movs	r1, #2
 80001d0:	4618      	mov	r0, r3
 80001d2:	f004 fa1f 	bl	8004614 <drv_SPI_transmit_nBytes>
  drv_SPI_assertCS(TRUE);
 80001d6:	2001      	movs	r0, #1
 80001d8:	f004 fa5e 	bl	8004698 <drv_SPI_assertCS>
}
 80001dc:	bf00      	nop
 80001de:	3708      	adds	r7, #8
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <configure>:




static void configure(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
  uint8_t u8cmd[2] = {CTRL1_RW, 0x9A};
 80001ea:	4b1f      	ldr	r3, [pc, #124]	; (8000268 <configure+0x84>)
 80001ec:	881b      	ldrh	r3, [r3, #0]
 80001ee:	80bb      	strh	r3, [r7, #4]

  drv_SPI_assertCS(0);
 80001f0:	2000      	movs	r0, #0
 80001f2:	f004 fa51 	bl	8004698 <drv_SPI_assertCS>
  drv_SPI_transmit_nBytes(u8cmd, sizeof(u8cmd));
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f004 fa0a 	bl	8004614 <drv_SPI_transmit_nBytes>
  drv_SPI_assertCS(1);
 8000200:	2001      	movs	r0, #1
 8000202:	f004 fa49 	bl	8004698 <drv_SPI_assertCS>

   u8cmd[0] = CTRL2_RW;
 8000206:	2321      	movs	r3, #33	; 0x21
 8000208:	713b      	strb	r3, [r7, #4]
   u8cmd[1] = 0x16;
 800020a:	2316      	movs	r3, #22
 800020c:	717b      	strb	r3, [r7, #5]

   drv_SPI_assertCS(0);
 800020e:	2000      	movs	r0, #0
 8000210:	f004 fa42 	bl	8004698 <drv_SPI_assertCS>
   drv_SPI_transmit_nBytes(u8cmd, sizeof(u8cmd));
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2102      	movs	r1, #2
 8000218:	4618      	mov	r0, r3
 800021a:	f004 f9fb 	bl	8004614 <drv_SPI_transmit_nBytes>
   drv_SPI_assertCS(1);
 800021e:	2001      	movs	r0, #1
 8000220:	f004 fa3a 	bl	8004698 <drv_SPI_assertCS>

   u8cmd[0] = 0x2E;
 8000224:	232e      	movs	r3, #46	; 0x2e
 8000226:	713b      	strb	r3, [r7, #4]
   u8cmd[1] = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	717b      	strb	r3, [r7, #5]

   drv_SPI_assertCS(0);
 800022c:	2000      	movs	r0, #0
 800022e:	f004 fa33 	bl	8004698 <drv_SPI_assertCS>
   drv_SPI_transmit_nBytes(u8cmd, sizeof(u8cmd));
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2102      	movs	r1, #2
 8000236:	4618      	mov	r0, r3
 8000238:	f004 f9ec 	bl	8004614 <drv_SPI_transmit_nBytes>
   drv_SPI_assertCS(1);
 800023c:	2001      	movs	r0, #1
 800023e:	f004 fa2b 	bl	8004698 <drv_SPI_assertCS>

   u8cmd[0] = CTRL3_RW;
 8000242:	2322      	movs	r3, #34	; 0x22
 8000244:	713b      	strb	r3, [r7, #4]
    u8cmd[1] = 0x03;
 8000246:	2303      	movs	r3, #3
 8000248:	717b      	strb	r3, [r7, #5]

    drv_SPI_assertCS(0);
 800024a:	2000      	movs	r0, #0
 800024c:	f004 fa24 	bl	8004698 <drv_SPI_assertCS>
    drv_SPI_transmit_nBytes(u8cmd, sizeof(u8cmd));
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2102      	movs	r1, #2
 8000254:	4618      	mov	r0, r3
 8000256:	f004 f9dd 	bl	8004614 <drv_SPI_transmit_nBytes>
    drv_SPI_assertCS(1);
 800025a:	2001      	movs	r0, #1
 800025c:	f004 fa1c 	bl	8004698 <drv_SPI_assertCS>

}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	08004cb4 	.word	0x08004cb4

0800026c <lis2dw12_get_z_sample_mg>:
#define LIS2DW12_TEMPERATURE_OFFSET_DEG_C  	25



float lis2dw12_get_z_sample_mg(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
  float f32converted_Mg = 0.0f;
 8000272:	f04f 0300 	mov.w	r3, #0
 8000276:	607b      	str	r3, [r7, #4]

  int16_t i16RawFromTwosComplement = convertTwosCompToInt(lis2dw12_get_z_sample_raw());
 8000278:	f000 f820 	bl	80002bc <lis2dw12_get_z_sample_raw>
 800027c:	4603      	mov	r3, r0
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f8fc 	bl	800047c <convertTwosCompToInt>
 8000284:	4603      	mov	r3, r0
 8000286:	807b      	strh	r3, [r7, #2]

  i16RawFromTwosComplement >>= 2;
 8000288:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800028c:	109b      	asrs	r3, r3, #2
 800028e:	807b      	strh	r3, [r7, #2]

  f32converted_Mg = (float)i16RawFromTwosComplement * 0.244f;
 8000290:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000294:	ee07 3a90 	vmov	s15, r3
 8000298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800029c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80002b8 <lis2dw12_get_z_sample_mg+0x4c>
 80002a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002a4:	edc7 7a01 	vstr	s15, [r7, #4]

  return f32converted_Mg;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	ee07 3a90 	vmov	s15, r3
}
 80002ae:	eeb0 0a67 	vmov.f32	s0, s15
 80002b2:	3708      	adds	r7, #8
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	3e79db23 	.word	0x3e79db23

080002bc <lis2dw12_get_z_sample_raw>:


uint16_t lis2dw12_get_z_sample_raw(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
  uint16_t u16ZAxisCombined = (get_z_axis_MSB() << 8) | get_z_axis_LSB();
 80002c2:	f000 f827 	bl	8000314 <get_z_axis_MSB>
 80002c6:	4603      	mov	r3, r0
 80002c8:	021b      	lsls	r3, r3, #8
 80002ca:	b21c      	sxth	r4, r3
 80002cc:	f000 f80a 	bl	80002e4 <get_z_axis_LSB>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b21b      	sxth	r3, r3
 80002d4:	4323      	orrs	r3, r4
 80002d6:	b21b      	sxth	r3, r3
 80002d8:	80fb      	strh	r3, [r7, #6]

  return u16ZAxisCombined;
 80002da:	88fb      	ldrh	r3, [r7, #6]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd90      	pop	{r4, r7, pc}

080002e4 <get_z_axis_LSB>:


static uint8_t get_z_axis_LSB(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
   uint8_t u8ZAxisLSBRaw = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	71fb      	strb	r3, [r7, #7]
   uint8_t au8cmd[1];
   au8cmd[0] = (READ_CMD_BIT_MASK | OUT_Z_L_RO);
 80002ee:	23ac      	movs	r3, #172	; 0xac
 80002f0:	713b      	strb	r3, [r7, #4]

   drv_SPI_assertCS(FALSE);
 80002f2:	2000      	movs	r0, #0
 80002f4:	f004 f9d0 	bl	8004698 <drv_SPI_assertCS>
   drv_SPI_transmitReceive(au8cmd, &u8ZAxisLSBRaw, sizeof(au8cmd), sizeof(u8ZAxisLSBRaw));
 80002f8:	1df9      	adds	r1, r7, #7
 80002fa:	1d38      	adds	r0, r7, #4
 80002fc:	2301      	movs	r3, #1
 80002fe:	2201      	movs	r2, #1
 8000300:	f004 f910 	bl	8004524 <drv_SPI_transmitReceive>
   drv_SPI_assertCS(TRUE);
 8000304:	2001      	movs	r0, #1
 8000306:	f004 f9c7 	bl	8004698 <drv_SPI_assertCS>

   return u8ZAxisLSBRaw;
 800030a:	79fb      	ldrb	r3, [r7, #7]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <get_z_axis_MSB>:

static uint8_t get_z_axis_MSB(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
   uint8_t u8ZAxisMSBRaw = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	71fb      	strb	r3, [r7, #7]
   uint8_t au8cmd[1];
   au8cmd[0] = (READ_CMD_BIT_MASK | OUT_Z_H_RO);
 800031e:	23ad      	movs	r3, #173	; 0xad
 8000320:	713b      	strb	r3, [r7, #4]

   drv_SPI_assertCS(FALSE);
 8000322:	2000      	movs	r0, #0
 8000324:	f004 f9b8 	bl	8004698 <drv_SPI_assertCS>
   drv_SPI_transmitReceive(au8cmd, &u8ZAxisMSBRaw, sizeof(au8cmd), sizeof(u8ZAxisMSBRaw));
 8000328:	1df9      	adds	r1, r7, #7
 800032a:	1d38      	adds	r0, r7, #4
 800032c:	2301      	movs	r3, #1
 800032e:	2201      	movs	r2, #1
 8000330:	f004 f8f8 	bl	8004524 <drv_SPI_transmitReceive>
   drv_SPI_assertCS(TRUE);
 8000334:	2001      	movs	r0, #1
 8000336:	f004 f9af 	bl	8004698 <drv_SPI_assertCS>

   return u8ZAxisMSBRaw;
 800033a:	79fb      	ldrb	r3, [r7, #7]
}
 800033c:	4618      	mov	r0, r3
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <lis2dw12_generate_single_dataConversion>:



void lis2dw12_generate_single_dataConversion(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
  uint8_t au8cmd[2];
  au8cmd[0] = CTRL3_RW;
 800034a:	2322      	movs	r3, #34	; 0x22
 800034c:	713b      	strb	r3, [r7, #4]
  au8cmd[1] = 0x01;
 800034e:	2301      	movs	r3, #1
 8000350:	717b      	strb	r3, [r7, #5]

  drv_SPI_assertCS(FALSE);
 8000352:	2000      	movs	r0, #0
 8000354:	f004 f9a0 	bl	8004698 <drv_SPI_assertCS>
  drv_SPI_transmit_nBytes(au8cmd, sizeof(au8cmd));
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2102      	movs	r1, #2
 800035c:	4618      	mov	r0, r3
 800035e:	f004 f959 	bl	8004614 <drv_SPI_transmit_nBytes>
  drv_SPI_assertCS(TRUE);
 8000362:	2001      	movs	r0, #1
 8000364:	f004 f998 	bl	8004698 <drv_SPI_assertCS>
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}

08000370 <lis2dw12_get_whoAmI>:


uint8_t lis2dw12_get_whoAmI(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
   uint8_t u8WhoAmI = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	71fb      	strb	r3, [r7, #7]
   uint8_t au8cmd[1];
   au8cmd[0] = (READ_CMD_BIT_MASK | WHO_AM_I_RO);
 800037a:	238f      	movs	r3, #143	; 0x8f
 800037c:	713b      	strb	r3, [r7, #4]

   drv_SPI_assertCS(FALSE);
 800037e:	2000      	movs	r0, #0
 8000380:	f004 f98a 	bl	8004698 <drv_SPI_assertCS>
   drv_SPI_transmitReceive(au8cmd, &u8WhoAmI, sizeof(au8cmd), sizeof(u8WhoAmI));
 8000384:	1df9      	adds	r1, r7, #7
 8000386:	1d38      	adds	r0, r7, #4
 8000388:	2301      	movs	r3, #1
 800038a:	2201      	movs	r2, #1
 800038c:	f004 f8ca 	bl	8004524 <drv_SPI_transmitReceive>
   drv_SPI_assertCS(TRUE);
 8000390:	2001      	movs	r0, #1
 8000392:	f004 f981 	bl	8004698 <drv_SPI_assertCS>

   return u8WhoAmI;
 8000396:	79fb      	ldrb	r3, [r7, #7]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <lis2dw12_get_temperature_sample_degC>:
 * |TEMP11|TEMP10|TEMP09|TEMP08|TEMP07|TEMP06|TEMP05|TEMP04|		|TEMP3|TEMP2|TEMP1|TEMP0|0|0|0|0
 *
 * So with out the shift 1 LSB is 1 DEG because TEMP 0 is at bit pos 4, so we need to shift it down so 16LSB because 1 deg.
 */
float lis2dw12_get_temperature_sample_degC(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
  float f32convertedTemperatureDegC = 0.0f;
 80003a6:	f04f 0300 	mov.w	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]

  int16_t i16temperatureFromTwosComplement = convertTwosCompToInt(lis2dw12_get_temperature_sample_raw());
 80003ac:	f000 f822 	bl	80003f4 <lis2dw12_get_temperature_sample_raw>
 80003b0:	4603      	mov	r3, r0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f862 	bl	800047c <convertTwosCompToInt>
 80003b8:	4603      	mov	r3, r0
 80003ba:	807b      	strh	r3, [r7, #2]

  i16temperatureFromTwosComplement >>= 4;
 80003bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80003c0:	111b      	asrs	r3, r3, #4
 80003c2:	807b      	strh	r3, [r7, #2]

  f32convertedTemperatureDegC = (((float)i16temperatureFromTwosComplement / LSB_PER_DEG_C ) + LIS2DW12_TEMPERATURE_OFFSET_DEG_C);
 80003c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80003c8:	ee07 3a90 	vmov	s15, r3
 80003cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80003d0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80003d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80003d8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80003dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003e0:	edc7 7a01 	vstr	s15, [r7, #4]

  return f32convertedTemperatureDegC;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	ee07 3a90 	vmov	s15, r3
}
 80003ea:	eeb0 0a67 	vmov.f32	s0, s15
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <lis2dw12_get_temperature_sample_raw>:


uint16_t lis2dw12_get_temperature_sample_raw(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  uint16_t u16tempCombined = (get_temperature_MSB() << 8) | get_temperature_LSB();
 80003fa:	f000 f80f 	bl	800041c <get_temperature_MSB>
 80003fe:	4603      	mov	r3, r0
 8000400:	021b      	lsls	r3, r3, #8
 8000402:	b21c      	sxth	r4, r3
 8000404:	f000 f822 	bl	800044c <get_temperature_LSB>
 8000408:	4603      	mov	r3, r0
 800040a:	b21b      	sxth	r3, r3
 800040c:	4323      	orrs	r3, r4
 800040e:	b21b      	sxth	r3, r3
 8000410:	80fb      	strh	r3, [r7, #6]

  return u16tempCombined;
 8000412:	88fb      	ldrh	r3, [r7, #6]
}
 8000414:	4618      	mov	r0, r3
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	bd90      	pop	{r4, r7, pc}

0800041c <get_temperature_MSB>:


static uint8_t get_temperature_MSB(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
  uint8_t u8MSBTemp = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	71fb      	strb	r3, [r7, #7]
  uint8_t au8cmd[1];
  au8cmd[0] = (READ_CMD_BIT_MASK | OUT_TEMPERATURE_H_RO);
 8000426:	238e      	movs	r3, #142	; 0x8e
 8000428:	713b      	strb	r3, [r7, #4]

  drv_SPI_assertCS(FALSE);
 800042a:	2000      	movs	r0, #0
 800042c:	f004 f934 	bl	8004698 <drv_SPI_assertCS>
  drv_SPI_transmitReceive(au8cmd, &u8MSBTemp, sizeof(au8cmd), sizeof(u8MSBTemp));
 8000430:	1df9      	adds	r1, r7, #7
 8000432:	1d38      	adds	r0, r7, #4
 8000434:	2301      	movs	r3, #1
 8000436:	2201      	movs	r2, #1
 8000438:	f004 f874 	bl	8004524 <drv_SPI_transmitReceive>
  drv_SPI_assertCS(TRUE);
 800043c:	2001      	movs	r0, #1
 800043e:	f004 f92b 	bl	8004698 <drv_SPI_assertCS>

  return u8MSBTemp;
 8000442:	79fb      	ldrb	r3, [r7, #7]
}
 8000444:	4618      	mov	r0, r3
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <get_temperature_LSB>:

static uint8_t get_temperature_LSB(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
  uint8_t u8LSBTemp = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	71fb      	strb	r3, [r7, #7]
  uint8_t au8cmd[1];
  au8cmd[0] = (READ_CMD_BIT_MASK | OUT_TEMPERATURE_L_RO);
 8000456:	238d      	movs	r3, #141	; 0x8d
 8000458:	713b      	strb	r3, [r7, #4]

  drv_SPI_assertCS(FALSE);
 800045a:	2000      	movs	r0, #0
 800045c:	f004 f91c 	bl	8004698 <drv_SPI_assertCS>
  drv_SPI_transmitReceive(au8cmd, &u8LSBTemp, sizeof(au8cmd), sizeof(u8LSBTemp));
 8000460:	1df9      	adds	r1, r7, #7
 8000462:	1d38      	adds	r0, r7, #4
 8000464:	2301      	movs	r3, #1
 8000466:	2201      	movs	r2, #1
 8000468:	f004 f85c 	bl	8004524 <drv_SPI_transmitReceive>
  drv_SPI_assertCS(TRUE);
 800046c:	2001      	movs	r0, #1
 800046e:	f004 f913 	bl	8004698 <drv_SPI_assertCS>

  return u8LSBTemp;
 8000472:	79fb      	ldrb	r3, [r7, #7]
}
 8000474:	4618      	mov	r0, r3
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <convertTwosCompToInt>:


static int16_t convertTwosCompToInt(uint16_t u16twoscomp)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	80fb      	strh	r3, [r7, #6]
  int16_t y = (u16twoscomp ^ 0xFFFF) + 1; // Invert bits and add 1
 8000486:	88fb      	ldrh	r3, [r7, #6]
 8000488:	425b      	negs	r3, r3
 800048a:	b29b      	uxth	r3, r3
 800048c:	81fb      	strh	r3, [r7, #14]
  if (u16twoscomp & (1 << 14)) // Check if 14th bit is set (meaning signed)
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000494:	2b00      	cmp	r3, #0
 8000496:	d004      	beq.n	80004a2 <convertTwosCompToInt+0x26>
  {
    return (~(y) + 1); // invert back from unsigned to signed.
 8000498:	89fb      	ldrh	r3, [r7, #14]
 800049a:	425b      	negs	r3, r3
 800049c:	b29b      	uxth	r3, r3
 800049e:	b21b      	sxth	r3, r3
 80004a0:	e001      	b.n	80004a6 <convertTwosCompToInt+0x2a>
  }

  return u16twoscomp; // if no sign bit then fine...
 80004a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
	...

080004b4 <DWT_Delay_Init>:
  {Third, entry_state_handler3, action_state_handler3, exit_state_handler3},
};


uint32_t DWT_Delay_Init(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <DWT_Delay_Init+0x58>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	4a13      	ldr	r2, [pc, #76]	; (800050c <DWT_Delay_Init+0x58>)
 80004be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004c2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <DWT_Delay_Init+0x58>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4a10      	ldr	r2, [pc, #64]	; (800050c <DWT_Delay_Init+0x58>)
 80004ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ce:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <DWT_Delay_Init+0x5c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <DWT_Delay_Init+0x5c>)
 80004d6:	f023 0301 	bic.w	r3, r3, #1
 80004da:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <DWT_Delay_Init+0x5c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <DWT_Delay_Init+0x5c>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <DWT_Delay_Init+0x5c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004ee:	bf00      	nop
    __ASM volatile ("NOP");
 80004f0:	bf00      	nop
    __ASM volatile ("NOP");
 80004f2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <DWT_Delay_Init+0x5c>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80004fc:	2300      	movs	r3, #0
 80004fe:	e000      	b.n	8000502 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000500:	2301      	movs	r3, #1
    }
}
 8000502:	4618      	mov	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	e000edf0 	.word	0xe000edf0
 8000510:	e0001000 	.word	0xe0001000

08000514 <app_main_init>:
  * @retval none
  */


void app_main_init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  simpleTimer_reset_milliSeconds(&ledONTimer, ONTime);
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <app_main_init+0x68>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	4619      	mov	r1, r3
 8000520:	4817      	ldr	r0, [pc, #92]	; (8000580 <app_main_init+0x6c>)
 8000522:	f004 faff 	bl	8004b24 <simpleTimer_reset_milliSeconds>
  ringBuffer_init(&ringbuf, au8buffer, BUFFER_SIZE);
 8000526:	2210      	movs	r2, #16
 8000528:	4916      	ldr	r1, [pc, #88]	; (8000584 <app_main_init+0x70>)
 800052a:	4817      	ldr	r0, [pc, #92]	; (8000588 <app_main_init+0x74>)
 800052c:	f004 fa8a 	bl	8004a44 <ringBuffer_init>
  simple_fsm_init(&myfsm, sizeof(states)/sizeof(states[0]), states);
 8000530:	4a16      	ldr	r2, [pc, #88]	; (800058c <app_main_init+0x78>)
 8000532:	2103      	movs	r1, #3
 8000534:	4816      	ldr	r0, [pc, #88]	; (8000590 <app_main_init+0x7c>)
 8000536:	f004 fadf 	bl	8004af8 <simple_fsm_init>

  DWT_Delay_Init();
 800053a:	f7ff ffbb 	bl	80004b4 <DWT_Delay_Init>
  SystemCoreClockUpdate();
 800053e:	f000 fcd1 	bl	8000ee4 <SystemCoreClockUpdate>

  UART_init_t UART1_Init = { .uartBaud = UART_BAUD_115200,
 8000542:	2302      	movs	r3, #2
 8000544:	713b      	strb	r3, [r7, #4]
 8000546:	2300      	movs	r3, #0
 8000548:	717b      	strb	r3, [r7, #5]
 800054a:	2300      	movs	r3, #0
 800054c:	71bb      	strb	r3, [r7, #6]
 800054e:	2300      	movs	r3, #0
 8000550:	71fb      	strb	r3, [r7, #7]
			    .uartWordLength = UART_WORD_LEGTH_8_BITS };




  drv_uart_init(&UART1_Init);
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	4618      	mov	r0, r3
 8000556:	f004 f8ff 	bl	8004758 <drv_uart_init>
  drv_SPI_init();
 800055a:	f003 ff43 	bl	80043e4 <drv_SPI_init>

  simpleTimer_reset_milliSeconds(&testTimer, ONTime);
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <app_main_init+0x68>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	4619      	mov	r1, r3
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <app_main_init+0x80>)
 8000566:	f004 fadd 	bl	8004b24 <simpleTimer_reset_milliSeconds>
  uwTickPrio = TICK_INT_PRIORITY;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <app_main_init+0x84>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]


  acc_init();
 8000570:	f7ff fe04 	bl	800017c <acc_init>

}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000004 	.word	0x20000004
 8000580:	20000030 	.word	0x20000030
 8000584:	20000064 	.word	0x20000064
 8000588:	20000054 	.word	0x20000054
 800058c:	08004d14 	.word	0x08004d14
 8000590:	20000074 	.word	0x20000074
 8000594:	20000048 	.word	0x20000048
 8000598:	2000000c 	.word	0x2000000c

0800059c <app_main_idle>:

static unsigned char acmsg[] = "Hello from STM";
static float temp;
static float Z_mg;
void app_main_idle(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  Z_mg = lis2dw12_get_z_sample_mg();
 80005a0:	f7ff fe64 	bl	800026c <lis2dw12_get_z_sample_mg>
 80005a4:	eef0 7a40 	vmov.f32	s15, s0
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <app_main_idle+0x34>)
 80005aa:	edc3 7a00 	vstr	s15, [r3]
  lis2dw12_get_whoAmI();
 80005ae:	f7ff fedf 	bl	8000370 <lis2dw12_get_whoAmI>
  temp = lis2dw12_get_temperature_sample_degC();
 80005b2:	f7ff fef5 	bl	80003a0 <lis2dw12_get_temperature_sample_degC>
 80005b6:	eef0 7a40 	vmov.f32	s15, s0
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <app_main_idle+0x38>)
 80005bc:	edc3 7a00 	vstr	s15, [r3]
  lis2dw12_generate_single_dataConversion();
 80005c0:	f7ff fec0 	bl	8000344 <lis2dw12_generate_single_dataConversion>
  HAL_Delay(100);
 80005c4:	2064      	movs	r0, #100	; 0x64
 80005c6:	f000 fdb3 	bl	8001130 <HAL_Delay>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000084 	.word	0x20000084
 80005d4:	20000080 	.word	0x20000080

080005d8 <entry_state_handler>:




void entry_state_handler()
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <action_state_handler>:

void action_state_handler(int* newState)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2101      	movs	r1, #1
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <action_state_handler+0x44>)
 80005f6:	f001 f8f7 	bl	80017e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2120      	movs	r1, #32
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <action_state_handler+0x44>)
 8000600:	f001 f8f2 	bl	80017e8 <HAL_GPIO_WritePin>

  if(simpleTimer_timeout(&ledONTimer))
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <action_state_handler+0x48>)
 8000606:	f004 faa9 	bl	8004b5c <simpleTimer_timeout>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d008      	beq.n	8000622 <action_state_handler+0x3a>
  {
    simpleTimer_reset_milliSeconds(&ledOFFTimer, OFFTime);
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <action_state_handler+0x4c>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4808      	ldr	r0, [pc, #32]	; (8000638 <action_state_handler+0x50>)
 8000618:	f004 fa84 	bl	8004b24 <simpleTimer_reset_milliSeconds>
    *newState = Second;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
  }
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	48000400 	.word	0x48000400
 8000630:	20000030 	.word	0x20000030
 8000634:	20000006 	.word	0x20000006
 8000638:	2000003c 	.word	0x2000003c

0800063c <exit_state_handler>:

void exit_state_handler()
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <entry_state_handler2>:

void entry_state_handler2()
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <action_state_handler2>:

void action_state_handler2(int* newState)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <action_state_handler2+0x44>)
 8000666:	f001 f8bf 	bl	80017e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2120      	movs	r1, #32
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <action_state_handler2+0x44>)
 8000670:	f001 f8ba 	bl	80017e8 <HAL_GPIO_WritePin>

  if(simpleTimer_timeout(&ledOFFTimer))
 8000674:	480a      	ldr	r0, [pc, #40]	; (80006a0 <action_state_handler2+0x48>)
 8000676:	f004 fa71 	bl	8004b5c <simpleTimer_timeout>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d008      	beq.n	8000692 <action_state_handler2+0x3a>
   {
     simpleTimer_reset_milliSeconds(&ledONTimer, ONTime);
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <action_state_handler2+0x4c>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <action_state_handler2+0x50>)
 8000688:	f004 fa4c 	bl	8004b24 <simpleTimer_reset_milliSeconds>
     *newState = Third;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2202      	movs	r2, #2
 8000690:	601a      	str	r2, [r3, #0]
   }

}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	48000400 	.word	0x48000400
 80006a0:	2000003c 	.word	0x2000003c
 80006a4:	20000004 	.word	0x20000004
 80006a8:	20000030 	.word	0x20000030

080006ac <exit_state_handler2>:

void exit_state_handler2()
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <entry_state_handler3>:

void entry_state_handler3()
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <action_state_handler3>:

void action_state_handler3(int* newState)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]

    *newState = First;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <exit_state_handler3>:

void exit_state_handler3()
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <LL_RCC_HSE_EnableDiv2>:
  * @brief  Enable HSE sysclk and pll prescaler division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_EnableDiv2
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableDiv2(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 80006f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800070e:	b480      	push	{r7}
 8000710:	b085      	sub	sp, #20
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800071a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800071c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4313      	orrs	r3, r2
 8000724:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800072a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4013      	ands	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000744:	f000 fca8 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000748:	f000 f810 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074c:	f000 f96a 	bl	8000a24 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000750:	f000 f940 	bl	80009d4 <MX_USB_PCD_Init>
  MX_CRC_Init();
 8000754:	f000 f8a8 	bl	80008a8 <MX_CRC_Init>
  MX_RTC_Init();
 8000758:	f000 f8c8 	bl	80008ec <MX_RTC_Init>
  MX_TIM2_Init();
 800075c:	f000 f8ee 	bl	800093c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 8000760:	f7ff fed8 	bl	8000514 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    app_main_idle();
 8000764:	f7ff ff1a 	bl	800059c <app_main_idle>
 8000768:	e7fc      	b.n	8000764 <main+0x24>
	...

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b0ae      	sub	sp, #184	; 0xb8
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000776:	2248      	movs	r2, #72	; 0x48
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f004 fa86 	bl	8004c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]
 8000792:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2250      	movs	r2, #80	; 0x50
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f004 fa76 	bl	8004c8c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <SystemClock_Config+0x138>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007a8:	4a3e      	ldr	r2, [pc, #248]	; (80008a4 <SystemClock_Config+0x138>)
 80007aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <SystemClock_Config+0x138>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80007bc:	230b      	movs	r3, #11
 80007be:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2340      	movs	r3, #64	; 0x40
 80007ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d2:	2305      	movs	r3, #5
 80007d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	2303      	movs	r3, #3
 80007e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80007e4:	2310      	movs	r3, #16
 80007e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 80007ea:	2320      	movs	r3, #32
 80007ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80007f8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80007fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000800:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fca7 	bl	8002160 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000818:	f000 f98a 	bl	8000b30 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800081c:	236f      	movs	r3, #111	; 0x6f
 800081e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2303      	movs	r3, #3
 8000822:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000838:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800083c:	2103      	movs	r1, #3
 800083e:	4618      	mov	r0, r3
 8000840:	f002 f822 	bl	8002888 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800084a:	f000 f971 	bl	8000b30 <Error_Handler>
  }
  /** Enable the HSE Prescaler 
  */
  __HAL_RCC_HSE_DIV2_ENABLE();
 800084e:	f7ff ff4f 	bl	80006f0 <LL_RCC_HSE_EnableDiv2>
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RTC
 8000852:	f44f 5324 	mov.w	r3, #10496	; 0x2900
 8000856:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000858:	2318      	movs	r3, #24
 800085a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800085c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000860:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV4;
 8000862:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000866:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000868:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800086c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800086e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000872:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000874:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000878:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800087a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000880:	2300      	movs	r3, #0
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000884:	2300      	movs	r3, #0
 8000886:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4618      	mov	r0, r3
 800088c:	f002 fc53 	bl	8003136 <HAL_RCCEx_PeriphCLKConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000896:	f000 f94b 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800089a:	bf00      	nop
 800089c:	37b8      	adds	r7, #184	; 0xb8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	58000400 	.word	0x58000400

080008a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MX_CRC_Init+0x3c>)
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <MX_CRC_Init+0x40>)
 80008b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_CRC_Init+0x3c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_CRC_Init+0x3c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_CRC_Init+0x3c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_CRC_Init+0x3c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_CRC_Init+0x3c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_CRC_Init+0x3c>)
 80008d2:	f000 fd2f 	bl	8001334 <HAL_CRC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80008dc:	f000 f928 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000dc 	.word	0x200000dc
 80008e8:	40023000 	.word	0x40023000

080008ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_RTC_Init+0x48>)
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <MX_RTC_Init+0x4c>)
 80008f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_RTC_Init+0x48>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_RTC_Init+0x48>)
 80008fe:	227f      	movs	r2, #127	; 0x7f
 8000900:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_RTC_Init+0x48>)
 8000904:	22ff      	movs	r2, #255	; 0xff
 8000906:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_RTC_Init+0x48>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_RTC_Init+0x48>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_RTC_Init+0x48>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_RTC_Init+0x48>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_RTC_Init+0x48>)
 8000922:	f002 fe8e 	bl	8003642 <HAL_RTC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800092c:	f000 f900 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000100 	.word	0x20000100
 8000938:	40002800 	.word	0x40002800

0800093c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_TIM2_Init+0x94>)
 800095c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000960:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_TIM2_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_TIM2_Init+0x94>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000980:	4813      	ldr	r0, [pc, #76]	; (80009d0 <MX_TIM2_Init+0x94>)
 8000982:	f002 ff4c 	bl	800381e <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800098c:	f000 f8d0 	bl	8000b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_TIM2_Init+0x94>)
 800099e:	f003 f8b2 	bl	8003b06 <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009a8:	f000 f8c2 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_TIM2_Init+0x94>)
 80009ba:	f003 fa85 	bl	8003ec8 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009c4:	f000 f8b4 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000124 	.word	0x20000124

080009d4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_USB_PCD_Init+0x48>)
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <MX_USB_PCD_Init+0x4c>)
 80009dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USB_PCD_Init+0x48>)
 80009e0:	2208      	movs	r2, #8
 80009e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <MX_USB_PCD_Init+0x48>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USB_PCD_Init+0x48>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_USB_PCD_Init+0x48>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USB_PCD_Init+0x48>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_USB_PCD_Init+0x48>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USB_PCD_Init+0x48>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_USB_PCD_Init+0x48>)
 8000a0a:	f000 ff05 	bl	8001818 <HAL_PCD_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a14:	f000 f88c 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000164 	.word	0x20000164
 8000a20:	40006800 	.word	0x40006800

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a38:	2004      	movs	r0, #4
 8000a3a:	f7ff fe68 	bl	800070e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f7ff fe65 	bl	800070e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fe62 	bl	800070e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2008      	movs	r0, #8
 8000a4c:	f7ff fe5f 	bl	800070e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2123      	movs	r1, #35	; 0x23
 8000a54:	482a      	ldr	r0, [pc, #168]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000a56:	f000 fec7 	bl	80017e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5a:	2310      	movs	r3, #16
 8000a5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODER_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4826      	ldr	r0, [pc, #152]	; (8000b04 <MX_GPIO_Init+0xe0>)
 8000a6c:	f000 fd4c 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a70:	2301      	movs	r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4619      	mov	r1, r3
 8000a84:	481e      	ldr	r0, [pc, #120]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000a86:	f000 fd3f 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD1_Pin;
 8000a8a:	2322      	movs	r3, #34	; 0x22
 8000a8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4818      	ldr	r0, [pc, #96]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000aa0:	f000 fd32 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODER_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4814      	ldr	r0, [pc, #80]	; (8000b08 <MX_GPIO_Init+0xe4>)
 8000ab6:	f000 fd27 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000aba:	2340      	movs	r3, #64	; 0x40
 8000abc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULL_UP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aca:	2307      	movs	r3, #7
 8000acc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480b      	ldr	r0, [pc, #44]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000ad4:	f000 fd18 	bl	8001508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4803      	ldr	r0, [pc, #12]	; (8000b00 <MX_GPIO_Init+0xdc>)
 8000af2:	f000 fd09 	bl	8001508 <HAL_GPIO_Init>

}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	48000400 	.word	0x48000400
 8000b04:	48000800 	.word	0x48000800
 8000b08:	48000c00 	.word	0x48000c00

08000b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1e:	f000 fadb 	bl	80010d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40014800 	.word	0x40014800

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <LL_AHB1_GRP1_EnableClock>:
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <LL_AHB2_GRP1_EnableClock>:
{
 8000b92:	b480      	push	{r7}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4013      	ands	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000be8:	68fb      	ldr	r3, [r7, #12]
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <HAL_CRC_MspInit+0x24>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d103      	bne.n	8000c1e <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c1a:	f7ff ffa1 	bl	8000b60 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023000 	.word	0x40023000

08000c2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_RTC_MspInit+0x28>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d105      	bne.n	8000c4a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c3e:	f7ff ff7e 	bl	8000b3e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c42:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c46:	f7ff ffbd 	bl	8000bc4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40002800 	.word	0x40002800

08000c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c68:	d102      	bne.n	8000c70 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f7ff ffaa 	bl	8000bc4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_PCD_MspInit+0x5c>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d118      	bne.n	8000ccc <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ff79 	bl	8000b92 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ca0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ca4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f000 fc22 	bl	8001508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cc4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000cc8:	f7ff ff7c 	bl	8000bc4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40006800 	.word	0x40006800

08000cd8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08c      	sub	sp, #48	; 0x30
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0); 
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	201a      	movs	r0, #26
 8000d22:	f000 fadf 	bl	80012e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn); 
 8000d26:	201a      	movs	r0, #26
 8000d28:	f000 faf6 	bl	8001318 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000d2c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000d30:	f7ff ffd2 	bl	8000cd8 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d34:	f107 0208 	add.w	r2, r7, #8
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 ff72 	bl	8002c28 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d44:	f001 ff5a 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 8000d48:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4c:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <HAL_InitTick+0x8c>)
 8000d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d52:	0c9b      	lsrs	r3, r3, #18
 8000d54:	3b01      	subs	r3, #1
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_InitTick+0x90>)
 8000d5a:	4a11      	ldr	r2, [pc, #68]	; (8000da0 <HAL_InitTick+0x94>)
 8000d5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_InitTick+0x90>)
 8000d60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d64:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000d66:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_InitTick+0x90>)
 8000d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_InitTick+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_InitTick+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <HAL_InitTick+0x90>)
 8000d7a:	f002 fd50 	bl	800381e <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d104      	bne.n	8000d8e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_InitTick+0x90>)
 8000d86:	f002 fd75 	bl	8003874 <HAL_TIM_Base_Start_IT>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	e000      	b.n	8000d90 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3730      	adds	r7, #48	; 0x30
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	200003d8 	.word	0x200003d8
 8000da0:	40014800 	.word	0x40014800

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000e0a:	f002 fd5d 	bl	80038c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  simpleTimer_IRQHandler(&htim17);
 8000e0e:	4802      	ldr	r0, [pc, #8]	; (8000e18 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000e10:	f003 fede 	bl	8004bd0 <simpleTimer_IRQHandler>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200003d8 	.word	0x200003d8

08000e1c <USART1_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  drv_uart_IRQHandler();
 8000e20:	f003 fdea 	bl	80049f8 <drv_uart_IRQHandler>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  //drv_SPI_IRQHandler();
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <SystemInit+0xa0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000e42:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <SystemInit+0xa0>)
 8000e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e48:	4a23      	ldr	r2, [pc, #140]	; (8000ed8 <SystemInit+0xa0>)
 8000e4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e66:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e6a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e76:	4b19      	ldr	r3, [pc, #100]	; (8000edc <SystemInit+0xa4>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e88:	f023 0305 	bic.w	r3, r3, #5
 8000e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <SystemInit+0xa8>)
 8000eaa:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <SystemInit+0xa8>)
 8000eb2:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00
 8000edc:	faf6fefb 	.word	0xfaf6fefb
 8000ee0:	22041000 	.word	0x22041000

08000ee4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	4a47      	ldr	r2, [pc, #284]	; (8001014 <SystemCoreClockUpdate+0x130>)
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b0c      	cmp	r3, #12
 8000f0a:	d867      	bhi.n	8000fdc <SystemCoreClockUpdate+0xf8>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <SystemCoreClockUpdate+0x30>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f49 	.word	0x08000f49
 8000f18:	08000fdd 	.word	0x08000fdd
 8000f1c:	08000fdd 	.word	0x08000fdd
 8000f20:	08000fdd 	.word	0x08000fdd
 8000f24:	08000f51 	.word	0x08000f51
 8000f28:	08000fdd 	.word	0x08000fdd
 8000f2c:	08000fdd 	.word	0x08000fdd
 8000f30:	08000fdd 	.word	0x08000fdd
 8000f34:	08000f59 	.word	0x08000f59
 8000f38:	08000fdd 	.word	0x08000fdd
 8000f3c:	08000fdd 	.word	0x08000fdd
 8000f40:	08000fdd 	.word	0x08000fdd
 8000f44:	08000f61 	.word	0x08000f61
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000f48:	4a33      	ldr	r2, [pc, #204]	; (8001018 <SystemCoreClockUpdate+0x134>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6013      	str	r3, [r2, #0]
      break;
 8000f4e:	e049      	b.n	8000fe4 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <SystemCoreClockUpdate+0x134>)
 8000f52:	4a32      	ldr	r2, [pc, #200]	; (800101c <SystemCoreClockUpdate+0x138>)
 8000f54:	601a      	str	r2, [r3, #0]
      break;
 8000f56:	e045      	b.n	8000fe4 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <SystemCoreClockUpdate+0x134>)
 8000f5a:	4a31      	ldr	r2, [pc, #196]	; (8001020 <SystemCoreClockUpdate+0x13c>)
 8000f5c:	601a      	str	r2, [r3, #0]
      break;
 8000f5e:	e041      	b.n	8000fe4 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	3301      	adds	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d105      	bne.n	8000f8e <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000f82:	4a26      	ldr	r2, [pc, #152]	; (800101c <SystemCoreClockUpdate+0x138>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e00d      	b.n	8000faa <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d105      	bne.n	8000fa0 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000f94:	4a22      	ldr	r2, [pc, #136]	; (8001020 <SystemCoreClockUpdate+0x13c>)
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e004      	b.n	8000faa <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa8:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	fb02 f303 	mul.w	r3, r2, r3
 8000fbc:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0f5b      	lsrs	r3, r3, #29
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	3301      	adds	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <SystemCoreClockUpdate+0x134>)
 8000fd8:	6013      	str	r3, [r2, #0]
      break;
 8000fda:	e003      	b.n	8000fe4 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <SystemCoreClockUpdate+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]
      break;
 8000fe2:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <SystemCoreClockUpdate+0x140>)
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <SystemCoreClockUpdate+0x134>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemCoreClockUpdate+0x134>)
 8001004:	6013      	str	r3, [r2, #0]

}
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	08004da4 	.word	0x08004da4
 8001018:	20000008 	.word	0x20000008
 800101c:	00f42400 	.word	0x00f42400
 8001020:	01e84800 	.word	0x01e84800
 8001024:	08004d44 	.word	0x08004d44

08001028 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001028:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102c:	3304      	adds	r3, #4

0800102e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001030:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001032:	d3f9      	bcc.n	8001028 <CopyDataInit>
  bx lr
 8001034:	4770      	bx	lr

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001036:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001038:	3004      	adds	r0, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800103a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>
  bx lr
 800103e:	4770      	bx	lr

08001040 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001042:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <LoopForever+0x8>)
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <LoopForever+0xc>)
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LoopForever+0x10>)
 800104a:	2300      	movs	r3, #0
 800104c:	f7ff ffef 	bl	800102e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <LoopForever+0x14>)
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <LoopForever+0x18>)
 8001054:	2300      	movs	r3, #0
 8001056:	f7ff fff0 	bl	800103a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800105a:	480c      	ldr	r0, [pc, #48]	; (800108c <LoopForever+0x1c>)
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <LoopForever+0x20>)
 800105e:	2300      	movs	r3, #0
 8001060:	f7ff ffeb 	bl	800103a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001064:	f7ff fee8 	bl	8000e38 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001068:	f003 fdec 	bl	8004c44 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800106c:	f7ff fb68 	bl	8000740 <main>

08001070 <LoopForever>:

LoopForever:
  b LoopForever
 8001070:	e7fe      	b.n	8001070 <LoopForever>
 8001072:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001074:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001078:	20000004 	.word	0x20000004
 800107c:	20000014 	.word	0x20000014
 8001080:	08004dec 	.word	0x08004dec
  INIT_BSS _sbss, _ebss
 8001084:	20000014 	.word	0x20000014
 8001088:	2000041c 	.word	0x2000041c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800108c:	20030000 	.word	0x20030000
 8001090:	20030000 	.word	0x20030000

08001094 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_Init+0x3c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_Init+0x3c>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f000 f90d 	bl	80012ce <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff fe29 	bl	8000d0c <HAL_InitTick>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	e001      	b.n	80010ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010c6:	f7ff fd96 	bl	8000bf6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ca:	79fb      	ldrb	r3, [r7, #7]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	58004000 	.word	0x58004000

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000010 	.word	0x20000010
 80010fc:	20000418 	.word	0x20000418

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000418 	.word	0x20000418

08001118 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTickPrio+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000000c 	.word	0x2000000c

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffe2 	bl	8001100 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_Delay+0x40>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffd2 	bl	8001100 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
    {
    }
  }
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000010 	.word	0x20000010

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4907      	ldr	r1, [pc, #28]	; (8001210 <__NVIC_EnableIRQ+0x38>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	; 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ff4c 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f2:	f7ff ff63 	bl	80011bc <__NVIC_GetPriorityGrouping>
 80012f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	6978      	ldr	r0, [r7, #20]
 80012fe:	f7ff ffb3 	bl	8001268 <NVIC_EncodePriority>
 8001302:	4602      	mov	r2, r0
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff82 	bl	8001214 <__NVIC_SetPriority>
}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff56 	bl	80011d8 <__NVIC_EnableIRQ>
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e054      	b.n	80013f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7f5b      	ldrb	r3, [r3, #29]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d105      	bne.n	800135c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fc54 	bl	8000c04 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2202      	movs	r2, #2
 8001360:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	791b      	ldrb	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <HAL_CRC_Init+0xc4>)
 8001370:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0218 	bic.w	r2, r2, #24
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	e00c      	b.n	800139e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6899      	ldr	r1, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	461a      	mov	r2, r3
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f834 	bl	80013fc <HAL_CRCEx_Polynomial_Set>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e028      	b.n	80013f0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	795b      	ldrb	r3, [r3, #5]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d105      	bne.n	80013b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f04f 32ff 	mov.w	r2, #4294967295
 80013ae:	611a      	str	r2, [r3, #16]
 80013b0:	e004      	b.n	80013bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6912      	ldr	r2, [r2, #16]
 80013ba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699a      	ldr	r2, [r3, #24]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	04c11db7 	.word	0x04c11db7

080013fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800140c:	231f      	movs	r3, #31
 800140e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001410:	bf00      	nop
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1e5a      	subs	r2, r3, #1
 8001416:	613a      	str	r2, [r7, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d009      	beq.n	8001430 <HAL_CRCEx_Polynomial_Set+0x34>
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b18      	cmp	r3, #24
 8001434:	d846      	bhi.n	80014c4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001436:	a201      	add	r2, pc, #4	; (adr r2, 800143c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143c:	080014cb 	.word	0x080014cb
 8001440:	080014c5 	.word	0x080014c5
 8001444:	080014c5 	.word	0x080014c5
 8001448:	080014c5 	.word	0x080014c5
 800144c:	080014c5 	.word	0x080014c5
 8001450:	080014c5 	.word	0x080014c5
 8001454:	080014c5 	.word	0x080014c5
 8001458:	080014c5 	.word	0x080014c5
 800145c:	080014b9 	.word	0x080014b9
 8001460:	080014c5 	.word	0x080014c5
 8001464:	080014c5 	.word	0x080014c5
 8001468:	080014c5 	.word	0x080014c5
 800146c:	080014c5 	.word	0x080014c5
 8001470:	080014c5 	.word	0x080014c5
 8001474:	080014c5 	.word	0x080014c5
 8001478:	080014c5 	.word	0x080014c5
 800147c:	080014ad 	.word	0x080014ad
 8001480:	080014c5 	.word	0x080014c5
 8001484:	080014c5 	.word	0x080014c5
 8001488:	080014c5 	.word	0x080014c5
 800148c:	080014c5 	.word	0x080014c5
 8001490:	080014c5 	.word	0x080014c5
 8001494:	080014c5 	.word	0x080014c5
 8001498:	080014c5 	.word	0x080014c5
 800149c:	080014a1 	.word	0x080014a1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d913      	bls.n	80014ce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80014aa:	e010      	b.n	80014ce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	2b07      	cmp	r3, #7
 80014b0:	d90f      	bls.n	80014d2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80014b6:	e00c      	b.n	80014d2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	d90b      	bls.n	80014d6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80014c2:	e008      	b.n	80014d6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	75fb      	strb	r3, [r7, #23]
      break;
 80014c8:	e006      	b.n	80014d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80014ca:	bf00      	nop
 80014cc:	e004      	b.n	80014d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80014ce:	bf00      	nop
 80014d0:	e002      	b.n	80014d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80014d2:	bf00      	nop
 80014d4:	e000      	b.n	80014d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80014d6:	bf00      	nop
  }
  if (status == HAL_OK)
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10d      	bne.n	80014fa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f023 0118 	bic.w	r1, r3, #24
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80014fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	371c      	adds	r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001508:	b480      	push	{r7}
 800150a:	b087      	sub	sp, #28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001516:	e14c      	b.n	80017b2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 813e 	beq.w	80017ac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d00b      	beq.n	8001550 <HAL_GPIO_Init+0x48>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001544:	2b11      	cmp	r3, #17
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b12      	cmp	r3, #18
 800154e:	d130      	bne.n	80015b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001586:	2201      	movs	r2, #1
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	091b      	lsrs	r3, r3, #4
 800159c:	f003 0201 	and.w	r2, r3, #1
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0xea>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d123      	bne.n	800163a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	08da      	lsrs	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3208      	adds	r2, #8
 80015fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	220f      	movs	r2, #15
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	691a      	ldr	r2, [r3, #16]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	08da      	lsrs	r2, r3, #3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3208      	adds	r2, #8
 8001634:	6939      	ldr	r1, [r7, #16]
 8001636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0203 	and.w	r2, r3, #3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 8098 	beq.w	80017ac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800167c:	4a54      	ldr	r2, [pc, #336]	; (80017d0 <HAL_GPIO_Init+0x2c8>)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	3302      	adds	r3, #2
 8001684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016a6:	d019      	beq.n	80016dc <HAL_GPIO_Init+0x1d4>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a4a      	ldr	r2, [pc, #296]	; (80017d4 <HAL_GPIO_Init+0x2cc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d013      	beq.n	80016d8 <HAL_GPIO_Init+0x1d0>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a49      	ldr	r2, [pc, #292]	; (80017d8 <HAL_GPIO_Init+0x2d0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00d      	beq.n	80016d4 <HAL_GPIO_Init+0x1cc>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a48      	ldr	r2, [pc, #288]	; (80017dc <HAL_GPIO_Init+0x2d4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d007      	beq.n	80016d0 <HAL_GPIO_Init+0x1c8>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a47      	ldr	r2, [pc, #284]	; (80017e0 <HAL_GPIO_Init+0x2d8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_GPIO_Init+0x1c4>
 80016c8:	2304      	movs	r3, #4
 80016ca:	e008      	b.n	80016de <HAL_GPIO_Init+0x1d6>
 80016cc:	2307      	movs	r3, #7
 80016ce:	e006      	b.n	80016de <HAL_GPIO_Init+0x1d6>
 80016d0:	2303      	movs	r3, #3
 80016d2:	e004      	b.n	80016de <HAL_GPIO_Init+0x1d6>
 80016d4:	2302      	movs	r3, #2
 80016d6:	e002      	b.n	80016de <HAL_GPIO_Init+0x1d6>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <HAL_GPIO_Init+0x1d6>
 80016dc:	2300      	movs	r3, #0
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	f002 0203 	and.w	r2, r2, #3
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	4093      	lsls	r3, r2
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016ee:	4938      	ldr	r1, [pc, #224]	; (80017d0 <HAL_GPIO_Init+0x2c8>)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_GPIO_Init+0x2dc>)
 80016fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001722:	4a30      	ldr	r2, [pc, #192]	; (80017e4 <HAL_GPIO_Init+0x2dc>)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <HAL_GPIO_Init+0x2dc>)
 800172c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001750:	4a24      	ldr	r2, [pc, #144]	; (80017e4 <HAL_GPIO_Init+0x2dc>)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001758:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <HAL_GPIO_Init+0x2dc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_GPIO_Init+0x2dc>)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_GPIO_Init+0x2dc>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017a6:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_GPIO_Init+0x2dc>)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f47f aeab 	bne.w	8001518 <HAL_GPIO_Init+0x10>
  }
}
 80017c2:	bf00      	nop
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40010000 	.word	0x40010000
 80017d4:	48000400 	.word	0x48000400
 80017d8:	48000800 	.word	0x48000800
 80017dc:	48000c00 	.word	0x48000c00
 80017e0:	48001000 	.word	0x48001000
 80017e4:	58000800 	.word	0x58000800

080017e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	807b      	strh	r3, [r7, #2]
 80017f4:	4613      	mov	r3, r2
 80017f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f8:	787b      	ldrb	r3, [r7, #1]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001804:	e002      	b.n	800180c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	b08b      	sub	sp, #44	; 0x2c
 800181c:	af06      	add	r7, sp, #24
 800181e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0ad      	b.n	8001986 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fa1a 	bl	8000c78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2203      	movs	r2, #3
 8001848:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f002 fbcf 	bl	8003ff4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	e035      	b.n	80018c8 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	015b      	lsls	r3, r3, #5
 8001862:	4413      	add	r3, r2
 8001864:	3329      	adds	r3, #41	; 0x29
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	015b      	lsls	r3, r3, #5
 8001870:	4413      	add	r3, r2
 8001872:	3328      	adds	r3, #40	; 0x28
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	b291      	uxth	r1, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	015b      	lsls	r3, r3, #5
 8001882:	4413      	add	r3, r2
 8001884:	3336      	adds	r3, #54	; 0x36
 8001886:	460a      	mov	r2, r1
 8001888:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	4413      	add	r3, r2
 8001892:	332b      	adds	r3, #43	; 0x2b
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	015b      	lsls	r3, r3, #5
 800189e:	4413      	add	r3, r2
 80018a0:	3338      	adds	r3, #56	; 0x38
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	015b      	lsls	r3, r3, #5
 80018ac:	4413      	add	r3, r2
 80018ae:	333c      	adds	r3, #60	; 0x3c
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	3302      	adds	r3, #2
 80018ba:	015b      	lsls	r3, r3, #5
 80018bc:	4413      	add	r3, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	3301      	adds	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d3c4      	bcc.n	800185c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	e031      	b.n	800193c <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	015b      	lsls	r3, r3, #5
 80018de:	4413      	add	r3, r2
 80018e0:	f203 1329 	addw	r3, r3, #297	; 0x129
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	015b      	lsls	r3, r3, #5
 80018ee:	4413      	add	r3, r2
 80018f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	015b      	lsls	r3, r3, #5
 80018fe:	4413      	add	r3, r2
 8001900:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	015b      	lsls	r3, r3, #5
 800190e:	4413      	add	r3, r2
 8001910:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	015b      	lsls	r3, r3, #5
 800191e:	4413      	add	r3, r2
 8001920:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	330a      	adds	r3, #10
 800192e:	015b      	lsls	r3, r3, #5
 8001930:	4413      	add	r3, r2
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	3301      	adds	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	d3c8      	bcc.n	80018d8 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	687e      	ldr	r6, [r7, #4]
 800194e:	466d      	mov	r5, sp
 8001950:	f106 0410 	add.w	r4, r6, #16
 8001954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	602b      	str	r3, [r5, #0]
 800195c:	1d33      	adds	r3, r6, #4
 800195e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001960:	6838      	ldr	r0, [r7, #0]
 8001962:	f002 fb64 	bl	800402e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d102      	bne.n	8001984 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f805 	bl	800198e <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800198e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	58000400 	.word	0x58000400

08001a04 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	58000400 	.word	0x58000400

08001a20 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a32:	d101      	bne.n	8001a38 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_RCC_HSE_EnableBypass>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_RCC_HSE_DisableBypass>:
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_RCC_HSE_Enable>:
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_RCC_HSE_Disable>:
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_RCC_HSE_IsReady>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ace:	d101      	bne.n	8001ad4 <LL_RCC_HSE_IsReady+0x18>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <LL_RCC_HSE_IsReady+0x1a>
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_RCC_HSI_Enable>:
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_RCC_HSI_Disable>:
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b10:	6013      	str	r3, [r2, #0]
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_RCC_HSI_IsReady>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2e:	d101      	bne.n	8001b34 <LL_RCC_HSI_IsReady+0x18>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <LL_RCC_HSI_IsReady+0x1a>
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_RCC_HSI48_Enable>:
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_RCC_HSI48_Disable>:
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_RCC_HSI48_IsReady>:
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d101      	bne.n	8001bc6 <LL_RCC_HSI48_IsReady+0x18>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <LL_RCC_HSI48_IsReady+0x1a>
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_RCC_LSE_Enable>:
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_RCC_LSE_Disable>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_RCC_LSE_EnableBypass>:
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_RCC_LSE_DisableBypass>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_RCC_LSE_IsReady>:
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d101      	bne.n	8001c72 <LL_RCC_LSE_IsReady+0x18>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <LL_RCC_LSE_IsReady+0x1a>
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_RCC_LSI1_Enable>:
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_RCC_LSI1_Disable>:
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb0:	f023 0301 	bic.w	r3, r3, #1
 8001cb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_RCC_LSI1_IsReady>:
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d101      	bne.n	8001cda <LL_RCC_LSI1_IsReady+0x18>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <LL_RCC_LSI1_IsReady+0x1a>
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_LSI2_Enable>:
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_RCC_LSI2_Disable>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_RCC_LSI2_IsReady>:
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d101      	bne.n	8001d42 <LL_RCC_LSI2_IsReady+0x18>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <LL_RCC_LSI2_IsReady+0x1a>
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_LSI2_SetTrimming>:
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_RCC_MSI_Enable>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_RCC_MSI_Disable>:
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6013      	str	r3, [r2, #0]
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_RCC_MSI_IsReady>:
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d101      	bne.n	8001dce <LL_RCC_MSI_IsReady+0x16>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <LL_RCC_MSI_IsReady+0x18>
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_RCC_MSI_SetRange>:
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_RCC_MSI_GetRange>:
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e12:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2bb0      	cmp	r3, #176	; 0xb0
 8001e18:	d901      	bls.n	8001e1e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001e1a:	23b0      	movs	r3, #176	; 0xb0
 8001e1c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001e1e:	687b      	ldr	r3, [r7, #4]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_RCC_MSI_SetCalibTrimming>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_SetSysClkSource>:
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 0203 	bic.w	r2, r3, #3
 8001e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_RCC_GetSysClkSource>:
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_RCC_SetAHBPrescaler>:
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <LL_C2_RCC_SetAHBPrescaler>:
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_RCC_SetAHB4Prescaler>:
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001efa:	f023 020f 	bic.w	r2, r3, #15
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_RCC_SetAPB1Prescaler>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_RCC_SetAPB2Prescaler>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_RCC_GetAHBPrescaler>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_C2_RCC_GetAHBPrescaler>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_RCC_GetAHB4Prescaler>:
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_RCC_GetAPB1Prescaler>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <LL_RCC_GetAPB2Prescaler>:
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff8:	6013      	str	r3, [r2, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002034:	d101      	bne.n	800203a <LL_RCC_PLL_IsReady+0x18>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_RCC_PLL_IsReady+0x1a>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002056:	4618      	mov	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ba:	d101      	bne.n	80020c0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020e0:	d101      	bne.n	80020e6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002106:	d101      	bne.n	800210c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800212a:	d101      	bne.n	8002130 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800214e:	d101      	bne.n	8002154 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b08d      	sub	sp, #52	; 0x34
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e386      	b.n	8002880 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 808f 	beq.w	800229e <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002180:	f7ff fe7d 	bl	8001e7e <LL_RCC_GetSysClkSource>
 8002184:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002186:	f7ff ff83 	bl	8002090 <LL_RCC_PLL_GetMainSource>
 800218a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x3e>
 8002192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d149      	bne.n	800222c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	2b01      	cmp	r3, #1
 800219c:	d146      	bne.n	800222c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800219e:	f7ff fe0b 	bl	8001db8 <LL_RCC_MSI_IsReady>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_OscConfig+0x54>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e365      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80021b8:	f7ff fe23 	bl	8001e02 <LL_RCC_MSI_GetRange>
 80021bc:	4603      	mov	r3, r0
 80021be:	429c      	cmp	r4, r3
 80021c0:	d914      	bls.n	80021ec <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fd60 	bl	8002c8c <RCC_SetFlashLatencyFromMSIRange>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e354      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fdfd 	bl	8001dda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fe21 	bl	8001e2c <LL_RCC_MSI_SetCalibTrimming>
 80021ea:	e013      	b.n	8002214 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fdf2 	bl	8001dda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fe16 	bl	8001e2c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fd41 	bl	8002c8c <RCC_SetFlashLatencyFromMSIRange>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e335      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002214:	f7fe fe66 	bl	8000ee4 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002218:	4bb4      	ldr	r3, [pc, #720]	; (80024ec <HAL_RCC_OscConfig+0x38c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fd75 	bl	8000d0c <HAL_InitTick>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d039      	beq.n	800229c <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e329      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01e      	beq.n	8002272 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002234:	f7ff fda2 	bl	8001d7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002238:	f7fe ff62 	bl	8001100 <HAL_GetTick>
 800223c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002240:	f7fe ff5e 	bl	8001100 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e316      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002252:	f7ff fdb1 	bl	8001db8 <LL_RCC_MSI_IsReady>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f1      	beq.n	8002240 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fdba 	bl	8001dda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fdde 	bl	8001e2c <LL_RCC_MSI_SetCalibTrimming>
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002272:	f7ff fd92 	bl	8001d9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002276:	f7fe ff43 	bl	8001100 <HAL_GetTick>
 800227a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800227e:	f7fe ff3f 	bl	8001100 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e2f7      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002290:	f7ff fd92 	bl	8001db8 <LL_RCC_MSI_IsReady>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f1      	bne.n	800227e <HAL_RCC_OscConfig+0x11e>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d05a      	beq.n	8002360 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022aa:	f7ff fde8 	bl	8001e7e <LL_RCC_GetSysClkSource>
 80022ae:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b0:	f7ff feee 	bl	8002090 <LL_RCC_PLL_GetMainSource>
 80022b4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_OscConfig+0x168>
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d10d      	bne.n	80022de <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d10a      	bne.n	80022de <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	f7ff fbf8 	bl	8001abc <LL_RCC_HSE_IsReady>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d045      	beq.n	800235e <HAL_RCC_OscConfig+0x1fe>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d141      	bne.n	800235e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e2d0      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e6:	d102      	bne.n	80022ee <HAL_RCC_OscConfig+0x18e>
 80022e8:	f7ff fbca 	bl	8001a80 <LL_RCC_HSE_Enable>
 80022ec:	e00d      	b.n	800230a <HAL_RCC_OscConfig+0x1aa>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f6:	d104      	bne.n	8002302 <HAL_RCC_OscConfig+0x1a2>
 80022f8:	f7ff fba4 	bl	8001a44 <LL_RCC_HSE_EnableBypass>
 80022fc:	f7ff fbc0 	bl	8001a80 <LL_RCC_HSE_Enable>
 8002300:	e003      	b.n	800230a <HAL_RCC_OscConfig+0x1aa>
 8002302:	f7ff fbcc 	bl	8001a9e <LL_RCC_HSE_Disable>
 8002306:	f7ff fbac 	bl	8001a62 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d012      	beq.n	8002338 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002312:	f7fe fef5 	bl	8001100 <HAL_GetTick>
 8002316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231a:	f7fe fef1 	bl	8001100 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	; 0x64
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e2a9      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 800232c:	f7ff fbc6 	bl	8001abc <LL_RCC_HSE_IsReady>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f1      	beq.n	800231a <HAL_RCC_OscConfig+0x1ba>
 8002336:	e013      	b.n	8002360 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe fee2 	bl	8001100 <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002340:	f7fe fede 	bl	8001100 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e296      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002352:	f7ff fbb3 	bl	8001abc <LL_RCC_HSE_IsReady>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f1      	bne.n	8002340 <HAL_RCC_OscConfig+0x1e0>
 800235c:	e000      	b.n	8002360 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d051      	beq.n	8002410 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236c:	f7ff fd87 	bl	8001e7e <LL_RCC_GetSysClkSource>
 8002370:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002372:	f7ff fe8d 	bl	8002090 <LL_RCC_PLL_GetMainSource>
 8002376:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2b04      	cmp	r3, #4
 800237c:	d005      	beq.n	800238a <HAL_RCC_OscConfig+0x22a>
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b0c      	cmp	r3, #12
 8002382:	d113      	bne.n	80023ac <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d110      	bne.n	80023ac <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800238a:	f7ff fbc7 	bl	8001b1c <LL_RCC_HSI_IsReady>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_OscConfig+0x240>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e26f      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fbcb 	bl	8001b40 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023aa:	e031      	b.n	8002410 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d019      	beq.n	80023e8 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b4:	f7ff fb94 	bl	8001ae0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fea2 	bl	8001100 <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c0:	f7fe fe9e 	bl	8001100 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e256      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 80023d2:	f7ff fba3 	bl	8001b1c <LL_RCC_HSI_IsReady>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f1      	beq.n	80023c0 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fbad 	bl	8001b40 <LL_RCC_HSI_SetCalibTrimming>
 80023e6:	e013      	b.n	8002410 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e8:	f7ff fb89 	bl	8001afe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fe88 	bl	8001100 <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f4:	f7fe fe84 	bl	8001100 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e23c      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002406:	f7ff fb89 	bl	8001b1c <LL_RCC_HSI_IsReady>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1f1      	bne.n	80023f4 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80a2 	beq.w	800256e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d075      	beq.n	800251e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	d046      	beq.n	80024cc <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800243e:	f7ff fc40 	bl	8001cc2 <LL_RCC_LSI1_IsReady>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d113      	bne.n	8002470 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002448:	f7ff fc19 	bl	8001c7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800244c:	f7fe fe58 	bl	8001100 <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002454:	f7fe fe54 	bl	8001100 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e20c      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002466:	f7ff fc2c 	bl	8001cc2 <LL_RCC_LSI1_IsReady>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f1      	beq.n	8002454 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002470:	f7ff fc39 	bl	8001ce6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fe44 	bl	8001100 <HAL_GetTick>
 8002478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800247c:	f7fe fe40 	bl	8001100 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b03      	cmp	r3, #3
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e1f8      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800248e:	f7ff fc4c 	bl	8001d2a <LL_RCC_LSI2_IsReady>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f1      	beq.n	800247c <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fc56 	bl	8001d4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80024a2:	f7ff fbfd 	bl	8001ca0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7fe fe2b 	bl	8001100 <HAL_GetTick>
 80024aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80024ae:	f7fe fe27 	bl	8001100 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e1df      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80024c0:	f7ff fbff 	bl	8001cc2 <LL_RCC_LSI1_IsReady>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f1      	bne.n	80024ae <HAL_RCC_OscConfig+0x34e>
 80024ca:	e050      	b.n	800256e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80024cc:	f7ff fbd7 	bl	8001c7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe fe16 	bl	8001100 <HAL_GetTick>
 80024d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80024d8:	f7fe fe12 	bl	8001100 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d904      	bls.n	80024f0 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e1ca      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
 80024ea:	bf00      	nop
 80024ec:	2000000c 	.word	0x2000000c
        while (LL_RCC_LSI1_IsReady() == 0U)
 80024f0:	f7ff fbe7 	bl	8001cc2 <LL_RCC_LSI1_IsReady>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0ee      	beq.n	80024d8 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80024fa:	f7ff fc05 	bl	8001d08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002500:	f7fe fdfe 	bl	8001100 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b03      	cmp	r3, #3
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1b6      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002512:	f7ff fc0a 	bl	8001d2a <LL_RCC_LSI2_IsReady>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f1      	bne.n	8002500 <HAL_RCC_OscConfig+0x3a0>
 800251c:	e027      	b.n	800256e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800251e:	f7ff fbf3 	bl	8001d08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002522:	f7fe fded 	bl	8001100 <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800252a:	f7fe fde9 	bl	8001100 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b03      	cmp	r3, #3
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e1a1      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800253c:	f7ff fbf5 	bl	8001d2a <LL_RCC_LSI2_IsReady>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f1      	bne.n	800252a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002546:	f7ff fbab 	bl	8001ca0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7fe fdd9 	bl	8001100 <HAL_GetTick>
 800254e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002552:	f7fe fdd5 	bl	8001100 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e18d      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002564:	f7ff fbad 	bl	8001cc2 <LL_RCC_LSI1_IsReady>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f1      	bne.n	8002552 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d05b      	beq.n	8002632 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257a:	4bb5      	ldr	r3, [pc, #724]	; (8002850 <HAL_RCC_OscConfig+0x6f0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d114      	bne.n	80025b0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002586:	f7ff fa2d 	bl	80019e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7fe fdb9 	bl	8001100 <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002592:	f7fe fdb5 	bl	8001100 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e16d      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a4:	4baa      	ldr	r3, [pc, #680]	; (8002850 <HAL_RCC_OscConfig+0x6f0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <HAL_RCC_OscConfig+0x45e>
 80025b8:	f7ff fb0b 	bl	8001bd2 <LL_RCC_LSE_Enable>
 80025bc:	e00c      	b.n	80025d8 <HAL_RCC_OscConfig+0x478>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d104      	bne.n	80025d0 <HAL_RCC_OscConfig+0x470>
 80025c6:	f7ff fb26 	bl	8001c16 <LL_RCC_LSE_EnableBypass>
 80025ca:	f7ff fb02 	bl	8001bd2 <LL_RCC_LSE_Enable>
 80025ce:	e003      	b.n	80025d8 <HAL_RCC_OscConfig+0x478>
 80025d0:	f7ff fb10 	bl	8001bf4 <LL_RCC_LSE_Disable>
 80025d4:	f7ff fb30 	bl	8001c38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d014      	beq.n	800260a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e0:	f7fe fd8e 	bl	8001100 <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e8:	f7fe fd8a 	bl	8001100 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e140      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 80025fe:	f7ff fb2c 	bl	8001c5a <LL_RCC_LSE_IsReady>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ef      	beq.n	80025e8 <HAL_RCC_OscConfig+0x488>
 8002608:	e013      	b.n	8002632 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe fd79 	bl	8001100 <HAL_GetTick>
 800260e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7fe fd75 	bl	8001100 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e12b      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002628:	f7ff fb17 	bl	8001c5a <LL_RCC_LSE_IsReady>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ef      	bne.n	8002612 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d02c      	beq.n	8002698 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	2b00      	cmp	r3, #0
 8002644:	d014      	beq.n	8002670 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002646:	f7ff fa90 	bl	8001b6a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7fe fd59 	bl	8001100 <HAL_GetTick>
 800264e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002652:	f7fe fd55 	bl	8001100 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e10d      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002664:	f7ff faa3 	bl	8001bae <LL_RCC_HSI48_IsReady>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f1      	beq.n	8002652 <HAL_RCC_OscConfig+0x4f2>
 800266e:	e013      	b.n	8002698 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002670:	f7ff fa8c 	bl	8001b8c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fd44 	bl	8001100 <HAL_GetTick>
 8002678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800267c:	f7fe fd40 	bl	8001100 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e0f8      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800268e:	f7ff fa8e 	bl	8001bae <LL_RCC_HSI48_IsReady>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f1      	bne.n	800267c <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80ee 	beq.w	800287e <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a2:	f7ff fbec 	bl	8001e7e <LL_RCC_GetSysClkSource>
 80026a6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80026a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	f040 80af 	bne.w	8002818 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0203 	and.w	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d123      	bne.n	8002710 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d11c      	bne.n	8002710 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d114      	bne.n	8002710 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d10d      	bne.n	8002710 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d106      	bne.n	8002710 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d05d      	beq.n	80027cc <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d058      	beq.n	80027c8 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0ab      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002728:	f7ff fc6c 	bl	8002004 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800272c:	f7fe fce8 	bl	8001100 <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe fce4 	bl	8001100 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e09c      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1ef      	bne.n	8002734 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <HAL_RCC_OscConfig+0x6f4>)
 800275c:	4013      	ands	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002766:	4311      	orrs	r1, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800276c:	0212      	lsls	r2, r2, #8
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002774:	4311      	orrs	r1, r2
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800277a:	4311      	orrs	r1, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002780:	430a      	orrs	r2, r1
 8002782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002786:	4313      	orrs	r3, r2
 8002788:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800278a:	f7ff fc2c 	bl	8001fe6 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800279e:	f7fe fcaf 	bl	8001100 <HAL_GetTick>
 80027a2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fe fcab 	bl	8001100 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e063      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0ef      	beq.n	80027a6 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c6:	e05a      	b.n	800287e <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e059      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d151      	bne.n	800287e <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027da:	f7ff fc04 	bl	8001fe6 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ee:	f7fe fc87 	bl	8001100 <HAL_GetTick>
 80027f2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fe fc83 	bl	8001100 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e03b      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0ef      	beq.n	80027f6 <HAL_RCC_OscConfig+0x696>
 8002816:	e032      	b.n	800287e <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d02d      	beq.n	800287a <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	f7ff fbf1 	bl	8002004 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800282c:	f023 0303 	bic.w	r3, r3, #3
 8002830:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800283c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002844:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe fc5b 	bl	8001100 <HAL_GetTick>
 800284a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284c:	e00d      	b.n	800286a <HAL_RCC_OscConfig+0x70a>
 800284e:	bf00      	nop
 8002850:	58000400 	.word	0x58000400
 8002854:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe fc52 	bl	8001100 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ef      	bne.n	8002858 <HAL_RCC_OscConfig+0x6f8>
 8002878:	e001      	b.n	800287e <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3734      	adds	r7, #52	; 0x34
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}

08002888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e12a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b97      	ldr	r3, [pc, #604]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d91b      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b94      	ldr	r3, [pc, #592]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 0207 	bic.w	r2, r3, #7
 80028b2:	4992      	ldr	r1, [pc, #584]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ba:	f7fe fc21 	bl	8001100 <HAL_GetTick>
 80028be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028c2:	f7fe fc1d 	bl	8001100 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e10e      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d4:	4b89      	ldr	r3, [pc, #548]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d1ef      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff facf 	bl	8001e96 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028f8:	f7fe fc02 	bl	8001100 <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002900:	f7fe fbfe 	bl	8001100 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0ef      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002912:	f7ff fbc9 	bl	80020a8 <LL_RCC_IsActiveFlag_HPRE>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f1      	beq.n	8002900 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0320 	and.w	r3, r3, #32
 8002924:	2b00      	cmp	r3, #0
 8002926:	d016      	beq.n	8002956 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fac6 	bl	8001ebe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002932:	f7fe fbe5 	bl	8001100 <HAL_GetTick>
 8002936:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800293a:	f7fe fbe1 	bl	8001100 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e0d2      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800294c:	f7ff fbbe 	bl	80020cc <LL_RCC_IsActiveFlag_C2HPRE>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f1      	beq.n	800293a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fabf 	bl	8001eea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800296c:	f7fe fbc8 	bl	8001100 <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002974:	f7fe fbc4 	bl	8001100 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0b5      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002986:	f7ff fbb4 	bl	80020f2 <LL_RCC_IsActiveFlag_SHDHPRE>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f1      	beq.n	8002974 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d016      	beq.n	80029ca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fab9 	bl	8001f18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029a6:	f7fe fbab 	bl	8001100 <HAL_GetTick>
 80029aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029ae:	f7fe fba7 	bl	8001100 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e098      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80029c0:	f7ff fbaa 	bl	8002118 <LL_RCC_IsActiveFlag_PPRE1>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f1      	beq.n	80029ae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d017      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff faaf 	bl	8001f40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029e2:	f7fe fb8d 	bl	8001100 <HAL_GetTick>
 80029e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029ea:	f7fe fb89 	bl	8001100 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e07a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80029fc:	f7ff fb9e 	bl	800213c <LL_RCC_IsActiveFlag_PPRE2>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f1      	beq.n	80029ea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d043      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d106      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002a1a:	f7ff f84f 	bl	8001abc <LL_RCC_HSE_IsReady>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d11e      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e064      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002a30:	f7ff faf7 	bl	8002022 <LL_RCC_PLL_IsReady>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d113      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e059      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002a46:	f7ff f9b7 	bl	8001db8 <LL_RCC_MSI_IsReady>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d108      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e04e      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002a54:	f7ff f862 	bl	8001b1c <LL_RCC_HSI_IsReady>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e047      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff f9f5 	bl	8001e56 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fb48 	bl	8001100 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe fb44 	bl	8001100 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e033      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	f7ff f9f8 	bl	8001e7e <LL_RCC_GetSysClkSource>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d1ec      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d21b      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 0207 	bic.w	r2, r3, #7
 8002ab0:	4912      	ldr	r1, [pc, #72]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab8:	f7fe fb22 	bl	8001100 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ac0:	f7fe fb1e 	bl	8001100 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e00f      	b.n	8002af2 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1ef      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002ae0:	f7fe fa00 	bl	8000ee4 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002ae4:	f7fe fb18 	bl	8001118 <HAL_GetTickPrio>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe f90e 	bl	8000d0c <HAL_InitTick>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	58004000 	.word	0x58004000

08002b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b06:	f7ff f9ba 	bl	8001e7e <LL_RCC_GetSysClkSource>
 8002b0a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10a      	bne.n	8002b28 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002b12:	f7ff f976 	bl	8001e02 <LL_RCC_MSI_GetRange>
 8002b16:	4603      	mov	r3, r0
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	4a2a      	ldr	r2, [pc, #168]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	e04a      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d102      	bne.n	8002b34 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b2e:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e044      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d10a      	bne.n	8002b50 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b3a:	f7fe ff71 	bl	8001a20 <LL_RCC_HSE_IsEnabledDiv2>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d102      	bne.n	8002b4a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002b44:	4b21      	ldr	r3, [pc, #132]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e039      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002b4a:	4b21      	ldr	r3, [pc, #132]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e036      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002b50:	f7ff fa9e 	bl	8002090 <LL_RCC_PLL_GetMainSource>
 8002b54:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d002      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0x62>
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d003      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x68>
 8002b60:	e00d      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b64:	60bb      	str	r3, [r7, #8]
        break;
 8002b66:	e015      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b68:	f7fe ff5a 	bl	8001a20 <LL_RCC_HSE_IsEnabledDiv2>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d102      	bne.n	8002b78 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002b72:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b74:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002b76:	e00d      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b7a:	60bb      	str	r3, [r7, #8]
        break;
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002b7e:	f7ff f940 	bl	8001e02 <LL_RCC_MSI_GetRange>
 8002b82:	4603      	mov	r3, r0
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b90:	60bb      	str	r3, [r7, #8]
        break;
 8002b92:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002b94:	f7ff fa57 	bl	8002046 <LL_RCC_PLL_GetN>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	fb03 f402 	mul.w	r4, r3, r2
 8002ba0:	f7ff fa6a 	bl	8002078 <LL_RCC_PLL_GetDivider>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	3301      	adds	r3, #1
 8002baa:	fbb4 f4f3 	udiv	r4, r4, r3
 8002bae:	f7ff fa57 	bl	8002060 <LL_RCC_PLL_GetR>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	0f5b      	lsrs	r3, r3, #29
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	fbb4 f3f3 	udiv	r3, r4, r3
 8002bbc:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd90      	pop	{r4, r7, pc}
 8002bc8:	08004da4 	.word	0x08004da4
 8002bcc:	00f42400 	.word	0x00f42400
 8002bd0:	01e84800 	.word	0x01e84800

08002bd4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b598      	push	{r3, r4, r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002bd8:	f7ff ff92 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002bdc:	4604      	mov	r4, r0
 8002bde:	f7ff f9c3 	bl	8001f68 <LL_RCC_GetAHBPrescaler>
 8002be2:	4603      	mov	r3, r0
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	4a03      	ldr	r2, [pc, #12]	; (8002bf8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd98      	pop	{r3, r4, r7, pc}
 8002bf8:	08004d44 	.word	0x08004d44

08002bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bfc:	b598      	push	{r3, r4, r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002c00:	f7ff ffe8 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002c04:	4604      	mov	r4, r0
 8002c06:	f7ff f9e2 	bl	8001fce <LL_RCC_GetAPB2Prescaler>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	0adb      	lsrs	r3, r3, #11
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd98      	pop	{r3, r4, r7, pc}
 8002c24:	08004d84 	.word	0x08004d84

08002c28 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	226f      	movs	r2, #111	; 0x6f
 8002c36:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002c38:	f7ff f921 	bl	8001e7e <LL_RCC_GetSysClkSource>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002c42:	f7ff f991 	bl	8001f68 <LL_RCC_GetAHBPrescaler>
 8002c46:	4602      	mov	r2, r0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002c4c:	f7ff f9b3 	bl	8001fb6 <LL_RCC_GetAPB1Prescaler>
 8002c50:	4602      	mov	r2, r0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002c56:	f7ff f9ba 	bl	8001fce <LL_RCC_GetAPB2Prescaler>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002c60:	f7ff f98e 	bl	8001f80 <LL_C2_RCC_GetAHBPrescaler>
 8002c64:	4602      	mov	r2, r0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002c6a:	f7ff f996 	bl	8001f9a <LL_RCC_GetAHB4Prescaler>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <HAL_RCC_GetClockConfig+0x60>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0207 	and.w	r2, r3, #7
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	601a      	str	r2, [r3, #0]
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	58004000 	.word	0x58004000

08002c8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2bb0      	cmp	r3, #176	; 0xb0
 8002c98:	d903      	bls.n	8002ca2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002c9a:	4b15      	ldr	r3, [pc, #84]	; (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e007      	b.n	8002cb2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002cb2:	f7ff f972 	bl	8001f9a <LL_RCC_GetAHB4Prescaler>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	0c9c      	lsrs	r4, r3, #18
 8002cd6:	f7fe fe95 	bl	8001a04 <HAL_PWREx_GetVoltageRange>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4620      	mov	r0, r4
 8002ce0:	f000 f80c 	bl	8002cfc <RCC_SetFlashLatency>
 8002ce4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd90      	pop	{r4, r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	08004da4 	.word	0x08004da4
 8002cf4:	08004d44 	.word	0x08004d44
 8002cf8:	431bde83 	.word	0x431bde83

08002cfc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b093      	sub	sp, #76	; 0x4c
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002d06:	4b39      	ldr	r3, [pc, #228]	; (8002dec <RCC_SetFlashLatency+0xf0>)
 8002d08:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002d12:	4a37      	ldr	r2, [pc, #220]	; (8002df0 <RCC_SetFlashLatency+0xf4>)
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002d1e:	4b35      	ldr	r3, [pc, #212]	; (8002df4 <RCC_SetFlashLatency+0xf8>)
 8002d20:	f107 040c 	add.w	r4, r7, #12
 8002d24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d34:	d11c      	bne.n	8002d70 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	643b      	str	r3, [r7, #64]	; 0x40
 8002d3a:	e015      	b.n	8002d68 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d44:	4413      	add	r3, r2
 8002d46:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d808      	bhi.n	8002d62 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d58:	4413      	add	r3, r2
 8002d5a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002d5e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002d60:	e022      	b.n	8002da8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d64:	3301      	adds	r3, #1
 8002d66:	643b      	str	r3, [r7, #64]	; 0x40
 8002d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d9e6      	bls.n	8002d3c <RCC_SetFlashLatency+0x40>
 8002d6e:	e01b      	b.n	8002da8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d74:	e015      	b.n	8002da2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d7e:	4413      	add	r3, r2
 8002d80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d808      	bhi.n	8002d9c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d92:	4413      	add	r3, r2
 8002d94:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002d98:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002d9a:	e005      	b.n	8002da8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9e:	3301      	adds	r3, #1
 8002da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d9e6      	bls.n	8002d76 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <RCC_SetFlashLatency+0xfc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f023 0207 	bic.w	r2, r3, #7
 8002db0:	4911      	ldr	r1, [pc, #68]	; (8002df8 <RCC_SetFlashLatency+0xfc>)
 8002db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002db8:	f7fe f9a2 	bl	8001100 <HAL_GetTick>
 8002dbc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002dbe:	e008      	b.n	8002dd2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002dc0:	f7fe f99e 	bl	8001100 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e007      	b.n	8002de2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <RCC_SetFlashLatency+0xfc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1ef      	bne.n	8002dc0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	374c      	adds	r7, #76	; 0x4c
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd90      	pop	{r4, r7, pc}
 8002dea:	bf00      	nop
 8002dec:	08004cb8 	.word	0x08004cb8
 8002df0:	08004cc8 	.word	0x08004cc8
 8002df4:	08004cd4 	.word	0x08004cd4
 8002df8:	58004000 	.word	0x58004000

08002dfc <LL_RCC_LSE_IsEnabled>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <LL_RCC_LSE_IsEnabled+0x18>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <LL_RCC_LSE_IsEnabled+0x1a>
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_RCC_LSE_IsReady>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d101      	bne.n	8002e38 <LL_RCC_LSE_IsReady+0x18>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <LL_RCC_LSE_IsReady+0x1a>
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LL_RCC_SetRFWKPClockSource>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <LL_RCC_SetSMPSClockSource>:
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	f023 0203 	bic.w	r2, r3, #3
 8002e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_SetSMPSPrescaler>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_RCC_SetUSARTClockSource>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f023 0203 	bic.w	r2, r3, #3
 8002ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_RCC_SetLPUARTClockSource>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_RCC_SetI2CClockSource>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002f30:	43db      	mvns	r3, r3
 8002f32:	401a      	ands	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_RCC_SetLPTIMClockSource>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	041b      	lsls	r3, r3, #16
 8002f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <LL_RCC_SetSAIClockSource>:
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_SetRNGClockSource>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_RCC_SetCLK48ClockSource>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <LL_RCC_SetUSBClockSource>:
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ffe3 	bl	8002fde <LL_RCC_SetCLK48ClockSource>
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <LL_RCC_SetADCClockSource>:
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_RCC_SetRTCClockSource>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_RCC_GetRTCClockSource>:
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <LL_RCC_ForceBackupDomainReset>:
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80030aa:	bf00      	nop
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80030b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_RCC_PLLSAI1_Enable>:
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80030da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030e8:	6013      	str	r3, [r2, #0]
}
 80030ea:	bf00      	nop
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_RCC_PLLSAI1_Disable>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80030f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003102:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_RCC_PLLSAI1_IsReady>:
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003124:	d101      	bne.n	800312a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b088      	sub	sp, #32
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800313e:	2300      	movs	r3, #0
 8003140:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003142:	2300      	movs	r3, #0
 8003144:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d033      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800315a:	d00c      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800315c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003160:	d802      	bhi.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d010      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003166:	e017      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003168:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800316c:	d017      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x68>
 800316e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003172:	d016      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003174:	e010      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003184:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003186:	e00d      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f947 	bl	8003420 <RCCEx_PLLSAI1_ConfigNP>
 8003192:	4603      	mov	r3, r0
 8003194:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003196:	e005      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	77fb      	strb	r3, [r7, #31]
        break;
 800319c:	e002      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800319e:	bf00      	nop
 80031a0:	e000      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80031a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a4:	7ffb      	ldrb	r3, [r7, #31]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fee9 	bl	8002f86 <LL_RCC_SetSAIClockSource>
 80031b4:	e001      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
 80031b8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d046      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80031c6:	f7ff ff57 	bl	8003078 <LL_RCC_GetRTCClockSource>
 80031ca:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d03c      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80031d6:	f7fe fc05 	bl	80019e4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff31 	bl	800304c <LL_RCC_SetRTCClockSource>
 80031ea:	e02e      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80031f6:	f7ff ff4c 	bl	8003092 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80031fa:	f7ff ff5b 	bl	80030b4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800320c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003216:	f7ff fdf1 	bl	8002dfc <LL_RCC_LSE_IsEnabled>
 800321a:	4603      	mov	r3, r0
 800321c:	2b01      	cmp	r3, #1
 800321e:	d114      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003220:	f7fd ff6e 	bl	8001100 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003226:	e00b      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fd ff6a 	bl	8001100 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d902      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	77fb      	strb	r3, [r7, #31]
              break;
 800323e:	e004      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003240:	f7ff fdee 	bl	8002e20 <LL_RCC_LSE_IsReady>
 8003244:	4603      	mov	r3, r0
 8003246:	2b01      	cmp	r3, #1
 8003248:	d1ee      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800324a:	7ffb      	ldrb	r3, [r7, #31]
 800324c:	77bb      	strb	r3, [r7, #30]
 800324e:	e001      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7ffb      	ldrb	r3, [r7, #31]
 8003252:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fe2b 	bl	8002ec0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fe36 	bl	8002eec <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d004      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fe5e 	bl	8002f52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fe53 	bl	8002f52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d004      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fe2b 	bl	8002f18 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fe20 	bl	8002f18 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d022      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fe8e 	bl	800300a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f6:	d107      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80032f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003306:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003310:	d10b      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f8dd 	bl	80034d6 <RCCEx_PLLSAI1_ConfigNQ>
 800331c:	4603      	mov	r3, r0
 800331e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003320:	7ffb      	ldrb	r3, [r7, #31]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8003326:	7ffb      	ldrb	r3, [r7, #31]
 8003328:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003332:	2b00      	cmp	r3, #0
 8003334:	d02b      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333e:	d008      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003348:	d003      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fe2b 	bl	8002fb2 <LL_RCC_SetRNGClockSource>
 800335c:	e00a      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	2000      	movs	r0, #0
 800336a:	f7ff fe22 	bl	8002fb2 <LL_RCC_SetRNGClockSource>
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff fe35 	bl	8002fde <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800337c:	d107      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800337e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003396:	2b00      	cmp	r3, #0
 8003398:	d022      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fe3e 	bl	8003020 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033ac:	d107      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033c6:	d10b      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f8dd 	bl	800358c <RCCEx_PLLSAI1_ConfigNR>
 80033d2:	4603      	mov	r3, r0
 80033d4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80033d6:	7ffb      	ldrb	r3, [r7, #31]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80033dc:	7ffb      	ldrb	r3, [r7, #31]
 80033de:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d004      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fd27 	bl	8002e44 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fd46 	bl	8002e98 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fd2d 	bl	8002e70 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8003416:	7fbb      	ldrb	r3, [r7, #30]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800342c:	f7ff fe62 	bl	80030f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003430:	f7fd fe66 	bl	8001100 <HAL_GetTick>
 8003434:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003436:	e009      	b.n	800344c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003438:	f7fd fe62 	bl	8001100 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d902      	bls.n	800344c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	73fb      	strb	r3, [r7, #15]
      break;
 800344a:	e004      	b.n	8003456 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800344c:	f7ff fe61 	bl	8003112 <LL_RCC_PLLSAI1_IsReady>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f0      	bne.n	8003438 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d137      	bne.n	80034cc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800345c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003470:	4313      	orrs	r3, r2
 8003472:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003486:	4313      	orrs	r3, r2
 8003488:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800348a:	f7ff fe24 	bl	80030d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800348e:	f7fd fe37 	bl	8001100 <HAL_GetTick>
 8003492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003494:	e009      	b.n	80034aa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003496:	f7fd fe33 	bl	8001100 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d902      	bls.n	80034aa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	73fb      	strb	r3, [r7, #15]
        break;
 80034a8:	e004      	b.n	80034b4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80034aa:	f7ff fe32 	bl	8003112 <LL_RCC_PLLSAI1_IsReady>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d1f0      	bne.n	8003496 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034c8:	4313      	orrs	r3, r2
 80034ca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034e2:	f7ff fe07 	bl	80030f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034e6:	f7fd fe0b 	bl	8001100 <HAL_GetTick>
 80034ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034ec:	e009      	b.n	8003502 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034ee:	f7fd fe07 	bl	8001100 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d902      	bls.n	8003502 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003500:	e004      	b.n	800350c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003502:	f7ff fe06 	bl	8003112 <LL_RCC_PLLSAI1_IsReady>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d137      	bne.n	8003582 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800352a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800353c:	4313      	orrs	r3, r2
 800353e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003540:	f7ff fdc9 	bl	80030d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003544:	f7fd fddc 	bl	8001100 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800354a:	e009      	b.n	8003560 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800354c:	f7fd fdd8 	bl	8001100 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d902      	bls.n	8003560 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	73fb      	strb	r3, [r7, #15]
        break;
 800355e:	e004      	b.n	800356a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003560:	f7ff fdd7 	bl	8003112 <LL_RCC_PLLSAI1_IsReady>
 8003564:	4603      	mov	r3, r0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d1f0      	bne.n	800354c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d108      	bne.n	8003582 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800357e:	4313      	orrs	r3, r2
 8003580:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003582:	7bfb      	ldrb	r3, [r7, #15]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003598:	f7ff fdac 	bl	80030f4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800359c:	f7fd fdb0 	bl	8001100 <HAL_GetTick>
 80035a0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035a2:	e009      	b.n	80035b8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035a4:	f7fd fdac 	bl	8001100 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d902      	bls.n	80035b8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	73fb      	strb	r3, [r7, #15]
      break;
 80035b6:	e004      	b.n	80035c2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035b8:	f7ff fdab 	bl	8003112 <LL_RCC_PLLSAI1_IsReady>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d137      	bne.n	8003638 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035dc:	4313      	orrs	r3, r2
 80035de:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80035e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f2:	4313      	orrs	r3, r2
 80035f4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035f6:	f7ff fd6e 	bl	80030d6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035fa:	f7fd fd81 	bl	8001100 <HAL_GetTick>
 80035fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003600:	e009      	b.n	8003616 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003602:	f7fd fd7d 	bl	8001100 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d902      	bls.n	8003616 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	73fb      	strb	r3, [r7, #15]
        break;
 8003614:	e004      	b.n	8003620 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003616:	f7ff fd7c 	bl	8003112 <LL_RCC_PLLSAI1_IsReady>
 800361a:	4603      	mov	r3, r0
 800361c:	2b01      	cmp	r3, #1
 800361e:	d1f0      	bne.n	8003602 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d108      	bne.n	8003638 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003634:	4313      	orrs	r3, r2
 8003636:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e090      	b.n	8003776 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7fd fadf 	bl	8000c2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	22ca      	movs	r2, #202	; 0xca
 800367c:	625a      	str	r2, [r3, #36]	; 0x24
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2253      	movs	r2, #83	; 0x53
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f89f 	bl	80037ca <RTC_EnterInitMode>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	22ff      	movs	r2, #255	; 0xff
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2204      	movs	r2, #4
 800369e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e067      	b.n	8003776 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80036b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6899      	ldr	r1, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68d2      	ldr	r2, [r2, #12]
 80036e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6919      	ldr	r1, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	041a      	lsls	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003704:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0203 	bic.w	r2, r2, #3
 8003714:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d113      	bne.n	8003764 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f81e 	bl	800377e <HAL_RTC_WaitForSynchro>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00d      	beq.n	8003764 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	22ff      	movs	r2, #255	; 0xff
 800374e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2204      	movs	r2, #4
 8003754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e008      	b.n	8003776 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	22ff      	movs	r2, #255	; 0xff
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003774:	2300      	movs	r3, #0
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003794:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003796:	f7fd fcb3 	bl	8001100 <HAL_GetTick>
 800379a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800379c:	e009      	b.n	80037b2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800379e:	f7fd fcaf 	bl	8001100 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ac:	d901      	bls.n	80037b2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e007      	b.n	80037c2 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ee      	beq.n	800379e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d119      	bne.n	8003814 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f04f 32ff 	mov.w	r2, #4294967295
 80037e8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80037ea:	f7fd fc89 	bl	8001100 <HAL_GetTick>
 80037ee:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80037f0:	e009      	b.n	8003806 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80037f2:	f7fd fc85 	bl	8001100 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003800:	d901      	bls.n	8003806 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e007      	b.n	8003816 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ee      	beq.n	80037f2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e01d      	b.n	800386c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d106      	bne.n	800384a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fd fa07 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2202      	movs	r2, #2
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f000 fa33 	bl	8003cc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_TIM_Base_Start_IT+0x50>)
 8003894:	4013      	ands	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b06      	cmp	r3, #6
 800389c:	d00b      	beq.n	80038b6 <HAL_TIM_Base_Start_IT+0x42>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d007      	beq.n	80038b6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	00010007 	.word	0x00010007

080038c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d122      	bne.n	8003924 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d11b      	bne.n	8003924 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0202 	mvn.w	r2, #2
 80038f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f9be 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003910:	e005      	b.n	800391e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f9b0 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f9c1 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b04      	cmp	r3, #4
 8003930:	d122      	bne.n	8003978 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d11b      	bne.n	8003978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f06f 0204 	mvn.w	r2, #4
 8003948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f994 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003964:	e005      	b.n	8003972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f986 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f997 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d122      	bne.n	80039cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b08      	cmp	r3, #8
 8003992:	d11b      	bne.n	80039cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0208 	mvn.w	r2, #8
 800399c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2204      	movs	r2, #4
 80039a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f96a 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 80039b8:	e005      	b.n	80039c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f95c 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f96d 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d122      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b10      	cmp	r3, #16
 80039e6:	d11b      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0210 	mvn.w	r2, #16
 80039f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2208      	movs	r2, #8
 80039f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f940 	bl	8003c8c <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f932 	bl	8003c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f943 	bl	8003ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d10e      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0201 	mvn.w	r2, #1
 8003a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fd f860 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a56:	2b80      	cmp	r3, #128	; 0x80
 8003a58:	d10e      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	2b80      	cmp	r3, #128	; 0x80
 8003a66:	d107      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa92 	bl	8003f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a86:	d10e      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d107      	bne.n	8003aa6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fa85 	bl	8003fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab0:	2b40      	cmp	r3, #64	; 0x40
 8003ab2:	d10e      	bne.n	8003ad2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d107      	bne.n	8003ad2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f8f1 	bl	8003cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f003 0320 	and.w	r3, r3, #32
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d10e      	bne.n	8003afe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d107      	bne.n	8003afe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f06f 0220 	mvn.w	r2, #32
 8003af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fa45 	bl	8003f88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b084      	sub	sp, #16
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_ConfigClockSource+0x18>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e0a8      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x16a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003b3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b40:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b48:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d067      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x124>
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d80b      	bhi.n	8003b76 <HAL_TIM_ConfigClockSource+0x70>
 8003b5e:	2b10      	cmp	r3, #16
 8003b60:	d073      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x144>
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d802      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x66>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d06f      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b6a:	e078      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d06c      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x144>
 8003b70:	2b30      	cmp	r3, #48	; 0x30
 8003b72:	d06a      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003b74:	e073      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b76:	2b70      	cmp	r3, #112	; 0x70
 8003b78:	d00d      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0x90>
 8003b7a:	2b70      	cmp	r3, #112	; 0x70
 8003b7c:	d804      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x82>
 8003b7e:	2b50      	cmp	r3, #80	; 0x50
 8003b80:	d033      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0xe4>
 8003b82:	2b60      	cmp	r3, #96	; 0x60
 8003b84:	d041      	beq.n	8003c0a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003b86:	e06a      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8c:	d066      	beq.n	8003c5c <HAL_TIM_ConfigClockSource+0x156>
 8003b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b92:	d017      	beq.n	8003bc4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003b94:	e063      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6899      	ldr	r1, [r3, #8]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f000 f96f 	bl	8003e88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	609a      	str	r2, [r3, #8]
      break;
 8003bc2:	e04c      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	6899      	ldr	r1, [r3, #8]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f000 f958 	bl	8003e88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be6:	609a      	str	r2, [r3, #8]
      break;
 8003be8:	e039      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6859      	ldr	r1, [r3, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f000 f8ca 	bl	8003d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2150      	movs	r1, #80	; 0x50
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f923 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 8003c08:	e029      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6859      	ldr	r1, [r3, #4]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f000 f8e9 	bl	8003dee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2160      	movs	r1, #96	; 0x60
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 f913 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 8003c28:	e019      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6859      	ldr	r1, [r3, #4]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	461a      	mov	r2, r3
 8003c38:	f000 f8aa 	bl	8003d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2140      	movs	r1, #64	; 0x40
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f903 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 8003c48:	e009      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f000 f8fa 	bl	8003e4e <TIM_ITRx_SetConfig>
      break;
 8003c5a:	e000      	b.n	8003c5e <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003c5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a2a      	ldr	r2, [pc, #168]	; (8003d84 <TIM_Base_SetConfig+0xbc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_Base_SetConfig+0x20>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce6:	d108      	bne.n	8003cfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a21      	ldr	r2, [pc, #132]	; (8003d84 <TIM_Base_SetConfig+0xbc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00b      	beq.n	8003d1a <TIM_Base_SetConfig+0x52>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d08:	d007      	beq.n	8003d1a <TIM_Base_SetConfig+0x52>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a1e      	ldr	r2, [pc, #120]	; (8003d88 <TIM_Base_SetConfig+0xc0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_Base_SetConfig+0x52>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <TIM_Base_SetConfig+0xc4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d108      	bne.n	8003d2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a0c      	ldr	r2, [pc, #48]	; (8003d84 <TIM_Base_SetConfig+0xbc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d007      	beq.n	8003d68 <TIM_Base_SetConfig+0xa0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <TIM_Base_SetConfig+0xc0>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d003      	beq.n	8003d68 <TIM_Base_SetConfig+0xa0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <TIM_Base_SetConfig+0xc4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d103      	bne.n	8003d70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	615a      	str	r2, [r3, #20]
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40014400 	.word	0x40014400
 8003d8c:	40014800 	.word	0x40014800

08003d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	f023 0201 	bic.w	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f023 030a 	bic.w	r3, r3, #10
 8003dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b087      	sub	sp, #28
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0210 	bic.w	r2, r3, #16
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	031b      	lsls	r3, r3, #12
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f043 0307 	orr.w	r3, r3, #7
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	021a      	lsls	r2, r3, #8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	609a      	str	r2, [r3, #8]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d101      	bne.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003edc:	2302      	movs	r3, #2
 8003ede:	e04a      	b.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d108      	bne.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f48:	d10c      	bne.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40012c00 	.word	0x40012c00

08003f88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fcc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003fd0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	89fb      	ldrh	r3, [r7, #14]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ffc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004000:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004008:	b29b      	uxth	r3, r3
 800400a:	b21a      	sxth	r2, r3
 800400c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004010:	43db      	mvns	r3, r3
 8004012:	b21b      	sxth	r3, r3
 8004014:	4013      	ands	r3, r2
 8004016:	b21b      	sxth	r3, r3
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800402e:	b084      	sub	sp, #16
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	f107 0014 	add.w	r0, r7, #20
 800403c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff ffaf 	bl	8003fc4 <USB_EnableGlobalInt>

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004072:	b004      	add	sp, #16
 8004074:	4770      	bx	lr

08004076 <drv_GPIO_init>:
/* Global variables ---------------------------------------------------*/

/* Public functions ----------------------------------------------------*/

void drv_GPIO_init(GPIO_init_t* pGPIOInit)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  GPIO_TypeDef* GPIOx;

  GPIOx = get_GPIO_port(pGPIOInit);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f934 	bl	80042ec <get_GPIO_port>
 8004084:	60f8      	str	r0, [r7, #12]
  set_GPIO_mode(pGPIOInit, GPIOx);
 8004086:	68f9      	ldr	r1, [r7, #12]
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f953 	bl	8004334 <set_GPIO_mode>
  set_GPIO_type(pGPIOInit, GPIOx);
 800408e:	68f9      	ldr	r1, [r7, #12]
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f901 	bl	8004298 <set_GPIO_type>
  set_GPIO_speed(pGPIOInit, GPIOx);
 8004096:	68f9      	ldr	r1, [r7, #12]
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f8b1 	bl	8004200 <set_GPIO_speed>
  set_GPIO_pull(pGPIOInit, GPIOx);
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f873 	bl	800418c <set_GPIO_pull>

}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <drv_GPIO_set_pin>:

void drv_GPIO_set_pin(eGPIO_Ports_t ePort, bool_t bState, uint8_t u8pinNumber)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	71fb      	strb	r3, [r7, #7]
 80040ba:	460b      	mov	r3, r1
 80040bc:	71bb      	strb	r3, [r7, #6]
 80040be:	4613      	mov	r3, r2
 80040c0:	717b      	strb	r3, [r7, #5]
  switch(ePort)
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d022      	beq.n	800410e <drv_GPIO_set_pin+0x5e>
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d03a      	beq.n	8004142 <drv_GPIO_set_pin+0x92>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d000      	beq.n	80040d2 <drv_GPIO_set_pin+0x22>
  {
    case GPIO_PORTA: { bState ? (GPIOA->ODR |= (0x01 << u8pinNumber) ) : (GPIOA->ODR &= ~(0x01 << u8pinNumber) ); } break;
    case GPIO_PORTB: { bState ? (GPIOB->ODR |= (0x01 << u8pinNumber) ) : (GPIOB->ODR &= ~(0x01 << u8pinNumber) ); } break;
    case GPIO_PORTC: { bState ? (GPIOC->ODR |= (0x01 << u8pinNumber) ) : (GPIOC->ODR &= ~(0x01 << u8pinNumber) ); } break;
    default : break;
 80040d0:	e051      	b.n	8004176 <drv_GPIO_set_pin+0xc6>
    case GPIO_PORTA: { bState ? (GPIOA->ODR |= (0x01 << u8pinNumber) ) : (GPIOA->ODR &= ~(0x01 << u8pinNumber) ); } break;
 80040d2:	79bb      	ldrb	r3, [r7, #6]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00c      	beq.n	80040f2 <drv_GPIO_set_pin+0x42>
 80040d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	797a      	ldrb	r2, [r7, #5]
 80040e0:	2101      	movs	r1, #1
 80040e2:	fa01 f202 	lsl.w	r2, r1, r2
 80040e6:	4611      	mov	r1, r2
 80040e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6153      	str	r3, [r2, #20]
 80040f0:	e041      	b.n	8004176 <drv_GPIO_set_pin+0xc6>
 80040f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	797a      	ldrb	r2, [r7, #5]
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004100:	43d2      	mvns	r2, r2
 8004102:	4611      	mov	r1, r2
 8004104:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004108:	400b      	ands	r3, r1
 800410a:	6153      	str	r3, [r2, #20]
 800410c:	e033      	b.n	8004176 <drv_GPIO_set_pin+0xc6>
    case GPIO_PORTB: { bState ? (GPIOB->ODR |= (0x01 << u8pinNumber) ) : (GPIOB->ODR &= ~(0x01 << u8pinNumber) ); } break;
 800410e:	79bb      	ldrb	r3, [r7, #6]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <drv_GPIO_set_pin+0x7a>
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <drv_GPIO_set_pin+0xd4>)
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	797a      	ldrb	r2, [r7, #5]
 800411a:	2101      	movs	r1, #1
 800411c:	fa01 f202 	lsl.w	r2, r1, r2
 8004120:	4611      	mov	r1, r2
 8004122:	4a18      	ldr	r2, [pc, #96]	; (8004184 <drv_GPIO_set_pin+0xd4>)
 8004124:	430b      	orrs	r3, r1
 8004126:	6153      	str	r3, [r2, #20]
 8004128:	e025      	b.n	8004176 <drv_GPIO_set_pin+0xc6>
 800412a:	4b16      	ldr	r3, [pc, #88]	; (8004184 <drv_GPIO_set_pin+0xd4>)
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	797a      	ldrb	r2, [r7, #5]
 8004130:	2101      	movs	r1, #1
 8004132:	fa01 f202 	lsl.w	r2, r1, r2
 8004136:	43d2      	mvns	r2, r2
 8004138:	4611      	mov	r1, r2
 800413a:	4a12      	ldr	r2, [pc, #72]	; (8004184 <drv_GPIO_set_pin+0xd4>)
 800413c:	400b      	ands	r3, r1
 800413e:	6153      	str	r3, [r2, #20]
 8004140:	e019      	b.n	8004176 <drv_GPIO_set_pin+0xc6>
    case GPIO_PORTC: { bState ? (GPIOC->ODR |= (0x01 << u8pinNumber) ) : (GPIOC->ODR &= ~(0x01 << u8pinNumber) ); } break;
 8004142:	79bb      	ldrb	r3, [r7, #6]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <drv_GPIO_set_pin+0xae>
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <drv_GPIO_set_pin+0xd8>)
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	797a      	ldrb	r2, [r7, #5]
 800414e:	2101      	movs	r1, #1
 8004150:	fa01 f202 	lsl.w	r2, r1, r2
 8004154:	4611      	mov	r1, r2
 8004156:	4a0c      	ldr	r2, [pc, #48]	; (8004188 <drv_GPIO_set_pin+0xd8>)
 8004158:	430b      	orrs	r3, r1
 800415a:	6153      	str	r3, [r2, #20]
 800415c:	e00a      	b.n	8004174 <drv_GPIO_set_pin+0xc4>
 800415e:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <drv_GPIO_set_pin+0xd8>)
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	797a      	ldrb	r2, [r7, #5]
 8004164:	2101      	movs	r1, #1
 8004166:	fa01 f202 	lsl.w	r2, r1, r2
 800416a:	43d2      	mvns	r2, r2
 800416c:	4611      	mov	r1, r2
 800416e:	4a06      	ldr	r2, [pc, #24]	; (8004188 <drv_GPIO_set_pin+0xd8>)
 8004170:	400b      	ands	r3, r1
 8004172:	6153      	str	r3, [r2, #20]
 8004174:	bf00      	nop
  }
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	48000400 	.word	0x48000400
 8004188:	48000800 	.word	0x48000800

0800418c <set_GPIO_pull>:


/* Private functions ---------------------------------------------------*/
static void set_GPIO_pull(GPIO_init_t* pGPIOPull, GPIO_TypeDef* GPIOx)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  switch(pGPIOPull->gpioPuPd)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	791b      	ldrb	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d011      	beq.n	80041c2 <set_GPIO_pull+0x36>
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d01b      	beq.n	80041da <set_GPIO_pull+0x4e>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d000      	beq.n	80041a8 <set_GPIO_pull+0x1c>
   {
     case GPIO_NO_PULL:   { GPIOx->PUPDR &= ~(0x01 << (pGPIOPull->u8pinNumber * 2)  ); } break;
     case GPIO_PULLUP:    { GPIOx->PUPDR |=  (0x01 << (pGPIOPull->u8pinNumber * 2) ); } break;
     case GPIO_PULL_DOWN: { GPIOx->PUPDR |=  (0x02 << (pGPIOPull->u8pinNumber * 2) ); } break;
     default: break;
 80041a6:	e024      	b.n	80041f2 <set_GPIO_pull+0x66>
     case GPIO_NO_PULL:   { GPIOx->PUPDR &= ~(0x01 << (pGPIOPull->u8pinNumber * 2)  ); } break;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	7952      	ldrb	r2, [r2, #5]
 80041b0:	0052      	lsls	r2, r2, #1
 80041b2:	2101      	movs	r1, #1
 80041b4:	fa01 f202 	lsl.w	r2, r1, r2
 80041b8:	43d2      	mvns	r2, r2
 80041ba:	401a      	ands	r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	e017      	b.n	80041f2 <set_GPIO_pull+0x66>
     case GPIO_PULLUP:    { GPIOx->PUPDR |=  (0x01 << (pGPIOPull->u8pinNumber * 2) ); } break;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	7952      	ldrb	r2, [r2, #5]
 80041ca:	0052      	lsls	r2, r2, #1
 80041cc:	2101      	movs	r1, #1
 80041ce:	fa01 f202 	lsl.w	r2, r1, r2
 80041d2:	431a      	orrs	r2, r3
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	60da      	str	r2, [r3, #12]
 80041d8:	e00b      	b.n	80041f2 <set_GPIO_pull+0x66>
     case GPIO_PULL_DOWN: { GPIOx->PUPDR |=  (0x02 << (pGPIOPull->u8pinNumber * 2) ); } break;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	7952      	ldrb	r2, [r2, #5]
 80041e2:	0052      	lsls	r2, r2, #1
 80041e4:	2102      	movs	r1, #2
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	431a      	orrs	r2, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	60da      	str	r2, [r3, #12]
 80041f0:	bf00      	nop
   }
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <set_GPIO_speed>:


static void set_GPIO_speed(GPIO_init_t* pGPIOSpeed, GPIO_TypeDef* GPIOx)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  switch(pGPIOSpeed->gpioSpeed)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	78db      	ldrb	r3, [r3, #3]
 800420e:	2b03      	cmp	r3, #3
 8004210:	d83b      	bhi.n	800428a <set_GPIO_speed+0x8a>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <set_GPIO_speed+0x18>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	08004229 	.word	0x08004229
 800421c:	08004243 	.word	0x08004243
 8004220:	0800425b 	.word	0x0800425b
 8004224:	08004273 	.word	0x08004273
   {
     case GPIO_SPEED_LOW:    { GPIOx->OSPEEDR &= ~(0x01 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	7952      	ldrb	r2, [r2, #5]
 8004230:	0052      	lsls	r2, r2, #1
 8004232:	2101      	movs	r1, #1
 8004234:	fa01 f202 	lsl.w	r2, r1, r2
 8004238:	43d2      	mvns	r2, r2
 800423a:	401a      	ands	r2, r3
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	e024      	b.n	800428c <set_GPIO_speed+0x8c>
     case GPIO_SPEED_MEDIUM: { GPIOx->OSPEEDR |=  (0x01 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	7952      	ldrb	r2, [r2, #5]
 800424a:	0052      	lsls	r2, r2, #1
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f202 	lsl.w	r2, r1, r2
 8004252:	431a      	orrs	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	e018      	b.n	800428c <set_GPIO_speed+0x8c>
     case GPIO_SPEED_FAST:   { GPIOx->OSPEEDR |=  (0x02 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	7952      	ldrb	r2, [r2, #5]
 8004262:	0052      	lsls	r2, r2, #1
 8004264:	2102      	movs	r1, #2
 8004266:	fa01 f202 	lsl.w	r2, r1, r2
 800426a:	431a      	orrs	r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	e00c      	b.n	800428c <set_GPIO_speed+0x8c>
     case GPIO_SPEED_HIGH:   { GPIOx->OSPEEDR |=  (0x03 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	7952      	ldrb	r2, [r2, #5]
 800427a:	0052      	lsls	r2, r2, #1
 800427c:	2103      	movs	r1, #3
 800427e:	fa01 f202 	lsl.w	r2, r1, r2
 8004282:	431a      	orrs	r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	e000      	b.n	800428c <set_GPIO_speed+0x8c>
     default: break;
 800428a:	bf00      	nop
   }
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <set_GPIO_type>:


static void set_GPIO_type(GPIO_init_t* pGPIOType, GPIO_TypeDef* GPIOx)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  switch(pGPIOType->gpioType)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	789b      	ldrb	r3, [r3, #2]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <set_GPIO_type+0x18>
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d00c      	beq.n	80042c8 <set_GPIO_type+0x30>
   {
     case GPIO_TYPE_PUSH_PULL:  { GPIOx->OTYPER &=  ~(0x01 << pGPIOType->u8pinNumber ); } break;
     case GPIO_TYPE_OPEN_DRAIN: { GPIOx->OTYPER |=   (0x01 << pGPIOType->u8pinNumber ); } break;

     default: break;
 80042ae:	e016      	b.n	80042de <set_GPIO_type+0x46>
     case GPIO_TYPE_PUSH_PULL:  { GPIOx->OTYPER &=  ~(0x01 << pGPIOType->u8pinNumber ); } break;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	7952      	ldrb	r2, [r2, #5]
 80042b8:	4611      	mov	r1, r2
 80042ba:	2201      	movs	r2, #1
 80042bc:	408a      	lsls	r2, r1
 80042be:	43d2      	mvns	r2, r2
 80042c0:	401a      	ands	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	e00a      	b.n	80042de <set_GPIO_type+0x46>
     case GPIO_TYPE_OPEN_DRAIN: { GPIOx->OTYPER |=   (0x01 << pGPIOType->u8pinNumber ); } break;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	7952      	ldrb	r2, [r2, #5]
 80042d0:	4611      	mov	r1, r2
 80042d2:	2201      	movs	r2, #1
 80042d4:	408a      	lsls	r2, r1
 80042d6:	431a      	orrs	r2, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	bf00      	nop
   }
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <get_GPIO_port>:


static GPIO_TypeDef* get_GPIO_port(GPIO_init_t* pGPIOInit)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  GPIO_TypeDef* pretVal = NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]

  switch(pGPIOInit->gpioPort)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d008      	beq.n	8004312 <get_GPIO_port+0x26>
 8004300:	2b02      	cmp	r3, #2
 8004302:	d009      	beq.n	8004318 <get_GPIO_port+0x2c>
 8004304:	2b00      	cmp	r3, #0
 8004306:	d000      	beq.n	800430a <get_GPIO_port+0x1e>
  {
    case GPIO_PORTA : { pretVal = GPIOA; } break;
    case GPIO_PORTB : { pretVal = GPIOB; } break;
    case GPIO_PORTC : { pretVal = GPIOC; } break;

    default: break;
 8004308:	e009      	b.n	800431e <get_GPIO_port+0x32>
    case GPIO_PORTA : { pretVal = GPIOA; } break;
 800430a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e005      	b.n	800431e <get_GPIO_port+0x32>
    case GPIO_PORTB : { pretVal = GPIOB; } break;
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <get_GPIO_port+0x40>)
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	e002      	b.n	800431e <get_GPIO_port+0x32>
    case GPIO_PORTC : { pretVal = GPIOC; } break;
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <get_GPIO_port+0x44>)
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	bf00      	nop
  }

  return pretVal;
 800431e:	68fb      	ldr	r3, [r7, #12]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	48000400 	.word	0x48000400
 8004330:	48000800 	.word	0x48000800

08004334 <set_GPIO_mode>:

static void set_GPIO_mode(GPIO_init_t* pGPIOMode, GPIO_TypeDef* GPIOx)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  switch(pGPIOMode->gpioMode)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d847      	bhi.n	80043d6 <set_GPIO_mode+0xa2>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <set_GPIO_mode+0x18>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	0800435d 	.word	0x0800435d
 8004350:	08004377 	.word	0x08004377
 8004354:	080043a7 	.word	0x080043a7
 8004358:	080043d7 	.word	0x080043d7
  {
     case GPIO_MODE_INPUT  : {  GPIOx->MODER &= ~(0x01 << ((pGPIOMode->u8pinNumber * 2))); } break;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	7952      	ldrb	r2, [r2, #5]
 8004364:	0052      	lsls	r2, r2, #1
 8004366:	2101      	movs	r1, #1
 8004368:	fa01 f202 	lsl.w	r2, r1, r2
 800436c:	43d2      	mvns	r2, r2
 800436e:	401a      	ands	r2, r3
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e030      	b.n	80043d8 <set_GPIO_mode+0xa4>
     case GPIO_MODER_OUTPUT :
     {
       GPIOx->MODER &= ~(0x03 << ((pGPIOMode->u8pinNumber * 2))); /* Clear the reset value */
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	7952      	ldrb	r2, [r2, #5]
 800437e:	0052      	lsls	r2, r2, #1
 8004380:	2103      	movs	r1, #3
 8004382:	fa01 f202 	lsl.w	r2, r1, r2
 8004386:	43d2      	mvns	r2, r2
 8004388:	401a      	ands	r2, r3
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	601a      	str	r2, [r3, #0]
       GPIOx->MODER |=  (0x01 << ((pGPIOMode->u8pinNumber * 2)));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	7952      	ldrb	r2, [r2, #5]
 8004396:	0052      	lsls	r2, r2, #1
 8004398:	2101      	movs	r1, #1
 800439a:	fa01 f202 	lsl.w	r2, r1, r2
 800439e:	431a      	orrs	r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	601a      	str	r2, [r3, #0]
     } break;
 80043a4:	e018      	b.n	80043d8 <set_GPIO_mode+0xa4>
     case GPIO_MODER_ALTERNATE 	:
       {
	 GPIOx->MODER &= ~(0x03 << ((pGPIOMode->u8pinNumber * 2))); /* Clear the reset value */
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	7952      	ldrb	r2, [r2, #5]
 80043ae:	0052      	lsls	r2, r2, #1
 80043b0:	2103      	movs	r1, #3
 80043b2:	fa01 f202 	lsl.w	r2, r1, r2
 80043b6:	43d2      	mvns	r2, r2
 80043b8:	401a      	ands	r2, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	601a      	str	r2, [r3, #0]
	 GPIOx->MODER |=  (0x02 << ((pGPIOMode->u8pinNumber * 2)));
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	7952      	ldrb	r2, [r2, #5]
 80043c6:	0052      	lsls	r2, r2, #1
 80043c8:	2102      	movs	r1, #2
 80043ca:	fa01 f202 	lsl.w	r2, r1, r2
 80043ce:	431a      	orrs	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	601a      	str	r2, [r3, #0]
       } break;
 80043d4:	e000      	b.n	80043d8 <set_GPIO_mode+0xa4>
     case GPIO_MODER_ANALOG 	: { } break;

     default: break;
 80043d6:	bf00      	nop
   }
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <drv_SPI_init>:
/* Global variables ---------------------------------------------------*/

/* Public functions ----------------------------------------------------*/

void drv_SPI_init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
  PA6 SS

  PA11 SPI1_ MISO
  PA12 SPI1_ MOSI
  PA5 SPI1_ SCK*/
  GPIO_init_t SPI_GPIO_CS_PA4 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 80043ea:	4a49      	ldr	r2, [pc, #292]	; (8004510 <drv_SPI_init+0x12c>)
 80043ec:	f107 0318 	add.w	r3, r7, #24
 80043f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80043f4:	6018      	str	r0, [r3, #0]
 80043f6:	3304      	adds	r3, #4
 80043f8:	8019      	strh	r1, [r3, #0]
				   .gpioSpeed = GPIO_SPEED_HIGH,
				   .gpioPort = GPIO_PORTA,
				   .gpioPuPd = GPIO_PULLUP,
				   .u8pinNumber = SPI_CS_PIN                 };

  GPIO_init_t SPI_GPIO_MISO_PA6 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 80043fa:	4a46      	ldr	r2, [pc, #280]	; (8004514 <drv_SPI_init+0x130>)
 80043fc:	f107 0310 	add.w	r3, r7, #16
 8004400:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004404:	6018      	str	r0, [r3, #0]
 8004406:	3304      	adds	r3, #4
 8004408:	8019      	strh	r1, [r3, #0]
				     .gpioSpeed = GPIO_SPEED_HIGH,
				     .gpioPort = GPIO_PORTA,
				     .gpioPuPd = GPIO_PULLUP,
				     .u8pinNumber = 6                 };

  GPIO_init_t SPI_GPIO_MOSI_PA7 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 800440a:	4a43      	ldr	r2, [pc, #268]	; (8004518 <drv_SPI_init+0x134>)
 800440c:	f107 0308 	add.w	r3, r7, #8
 8004410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004414:	6018      	str	r0, [r3, #0]
 8004416:	3304      	adds	r3, #4
 8004418:	8019      	strh	r1, [r3, #0]
  				     .gpioSpeed = GPIO_SPEED_HIGH,
  				     .gpioPort = GPIO_PORTA,
  				     .gpioPuPd = GPIO_PULLUP,
  				     .u8pinNumber = 7                 };

  GPIO_init_t SPI_GPIO_SCK_PA5 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 800441a:	4a40      	ldr	r2, [pc, #256]	; (800451c <drv_SPI_init+0x138>)
 800441c:	463b      	mov	r3, r7
 800441e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004422:	6018      	str	r0, [r3, #0]
 8004424:	3304      	adds	r3, #4
 8004426:	8019      	strh	r1, [r3, #0]
				   .gpioSpeed = GPIO_SPEED_HIGH,
				   .gpioPort = GPIO_PORTA,
				   .gpioPuPd = GPIO_PULLUP,
				   .u8pinNumber = 5                 };

  drv_GPIO_init(&SPI_GPIO_CS_PA4);
 8004428:	f107 0318 	add.w	r3, r7, #24
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fe22 	bl	8004076 <drv_GPIO_init>
  drv_GPIO_init(&SPI_GPIO_MISO_PA6);
 8004432:	f107 0310 	add.w	r3, r7, #16
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fe1d 	bl	8004076 <drv_GPIO_init>
  drv_GPIO_init(&SPI_GPIO_MOSI_PA7);
 800443c:	f107 0308 	add.w	r3, r7, #8
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fe18 	bl	8004076 <drv_GPIO_init>
  drv_GPIO_init(&SPI_GPIO_SCK_PA5);
 8004446:	463b      	mov	r3, r7
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fe14 	bl	8004076 <drv_GPIO_init>

  GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL5_Pos);
 800444e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004458:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800445c:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL6_Pos);
 800445e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004468:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 800446c:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL7_Pos);
 800446e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004478:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800447c:	6213      	str	r3, [r2, #32]
  PA6 SPI1_ MISO
  PA7 SPI1_ MOSI
  PA5 SPI1_ SCK
*/

  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800447e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004488:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800448c:	6613      	str	r3, [r2, #96]	; 0x60

  SPI1->CR1 |= SPI_CR1_SSM; /* Software slave select */
 800448e:	4b24      	ldr	r3, [pc, #144]	; (8004520 <drv_SPI_init+0x13c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a23      	ldr	r2, [pc, #140]	; (8004520 <drv_SPI_init+0x13c>)
 8004494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004498:	6013      	str	r3, [r2, #0]

  SPI1->CR1 |= SPI_CR1_MSTR; /* Master */
 800449a:	4b21      	ldr	r3, [pc, #132]	; (8004520 <drv_SPI_init+0x13c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a20      	ldr	r2, [pc, #128]	; (8004520 <drv_SPI_init+0x13c>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	6013      	str	r3, [r2, #0]

  SPI1->CR1 |= SPI_CR1_CPOL; /* CK to 1 when idle */
 80044a6:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <drv_SPI_init+0x13c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1d      	ldr	r2, [pc, #116]	; (8004520 <drv_SPI_init+0x13c>)
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CPHA; /* Clock phase 1: The second clock transition is the first data capture edge */
 80044b2:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <drv_SPI_init+0x13c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1a      	ldr	r2, [pc, #104]	; (8004520 <drv_SPI_init+0x13c>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	6013      	str	r3, [r2, #0]

  // Clear the existing BR bits
  SPI1->CR1 &= ~SPI_CR1_BR;
 80044be:	4b18      	ldr	r3, [pc, #96]	; (8004520 <drv_SPI_init+0x13c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a17      	ldr	r2, [pc, #92]	; (8004520 <drv_SPI_init+0x13c>)
 80044c4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80044c8:	6013      	str	r3, [r2, #0]

  // Set the desired baud rate divisor (e.g., divide by 64)
  SPI1->CR1 |= SPI_CR1_BR_2 | SPI_CR1_BR_0;
 80044ca:	4b15      	ldr	r3, [pc, #84]	; (8004520 <drv_SPI_init+0x13c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a14      	ldr	r2, [pc, #80]	; (8004520 <drv_SPI_init+0x13c>)
 80044d0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80044d4:	6013      	str	r3, [r2, #0]
  //SPI1->CR2 &= ~(SPI_CR2_DS_3); /* 0111: 8-bit */
 /* If software attempts to write one of the “Not used” values, they are forced to the value “0111”
(8-bit) */


  SPI1->CR2 |= SPI_CR2_SSOE; /* 1: SS output is enabled in master mode and when the SPI interface is enabled. The SPI
 80044d6:	4b12      	ldr	r3, [pc, #72]	; (8004520 <drv_SPI_init+0x13c>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4a11      	ldr	r2, [pc, #68]	; (8004520 <drv_SPI_init+0x13c>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6053      	str	r3, [r2, #4]
interface cannot work in a multimaster environment. */

  SPI1->CR1 |= SPI_CR1_SPE; /* SPI enable */
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <drv_SPI_init+0x13c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <drv_SPI_init+0x13c>)
 80044e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ec:	6013      	str	r3, [r2, #0]
 SPI1->CR2 |= SPI_CR2_RXNEIE;
 80044ee:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <drv_SPI_init+0x13c>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4a0b      	ldr	r2, [pc, #44]	; (8004520 <drv_SPI_init+0x13c>)
 80044f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f8:	6053      	str	r3, [r2, #4]
 SPI1->CR2 |= SPI_CR2_TXEIE;
 80044fa:	4b09      	ldr	r3, [pc, #36]	; (8004520 <drv_SPI_init+0x13c>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4a08      	ldr	r2, [pc, #32]	; (8004520 <drv_SPI_init+0x13c>)
 8004500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004504:	6053      	str	r3, [r2, #4]
}
 8004506:	bf00      	nop
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	08004ce4 	.word	0x08004ce4
 8004514:	08004cec 	.word	0x08004cec
 8004518:	08004cf4 	.word	0x08004cf4
 800451c:	08004cfc 	.word	0x08004cfc
 8004520:	40013000 	.word	0x40013000

08004524 <drv_SPI_transmitReceive>:



void drv_SPI_transmitReceive(uint8_t* pu8TxData, uint8_t* pu8RxDataRx, uint16_t u16TxdataLength, uint16_t u16RxdataLength)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	4611      	mov	r1, r2
 8004530:	461a      	mov	r2, r3
 8004532:	460b      	mov	r3, r1
 8004534:	80fb      	strh	r3, [r7, #6]
 8004536:	4613      	mov	r3, r2
 8004538:	80bb      	strh	r3, [r7, #4]
  uint16_t u16currentTxLength = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	82fb      	strh	r3, [r7, #22]
  uint16_t u16currentRxLength = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	82bb      	strh	r3, [r7, #20]

  /* Clear RXNE flag */
  (void)SPI1->DR;
 8004542:	4b32      	ldr	r3, [pc, #200]	; (800460c <drv_SPI_transmitReceive+0xe8>)
 8004544:	68db      	ldr	r3, [r3, #12]

  while (u16currentTxLength < u16TxdataLength)
 8004546:	e02e      	b.n	80045a6 <drv_SPI_transmitReceive+0x82>
  {
    while (!(SPI1->SR & SPI_SR_TXE)); // Wait for the transmit buffer to be empty
 8004548:	bf00      	nop
 800454a:	4b30      	ldr	r3, [pc, #192]	; (800460c <drv_SPI_transmitReceive+0xe8>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0f9      	beq.n	800454a <drv_SPI_transmitReceive+0x26>
    *((__IO uint8_t *)&SPI1->DR) = pu8TxData[u16currentTxLength];
 8004556:	8afb      	ldrh	r3, [r7, #22]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	4a2c      	ldr	r2, [pc, #176]	; (8004610 <drv_SPI_transmitReceive+0xec>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	7013      	strb	r3, [r2, #0]

   while (!(SPI1->SR & SPI_SR_TXE)){}; // Wait for the transmit buffer to be empty
 8004562:	bf00      	nop
 8004564:	4b29      	ldr	r3, [pc, #164]	; (800460c <drv_SPI_transmitReceive+0xe8>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f9      	beq.n	8004564 <drv_SPI_transmitReceive+0x40>

    *((__IO uint8_t *)&SPI1->DR) = 0x00; // Dummy write after the first command
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <drv_SPI_transmitReceive+0xec>)
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]

   u16currentTxLength++;
 8004576:	8afb      	ldrh	r3, [r7, #22]
 8004578:	3301      	adds	r3, #1
 800457a:	82fb      	strh	r3, [r7, #22]

    /* Wait until RXNE flag is set */
   if(u16RxdataLength > 0)
 800457c:	88bb      	ldrh	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d011      	beq.n	80045a6 <drv_SPI_transmitReceive+0x82>
   {
    while (!(SPI1->SR & SPI_SR_RXNE)){};
 8004582:	bf00      	nop
 8004584:	4b21      	ldr	r3, [pc, #132]	; (800460c <drv_SPI_transmitReceive+0xe8>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f9      	beq.n	8004584 <drv_SPI_transmitReceive+0x60>
    pu8RxDataRx[u16currentRxLength] = (uint8_t)(SPI1->DR >> 8) ;
 8004590:	4b1e      	ldr	r3, [pc, #120]	; (800460c <drv_SPI_transmitReceive+0xe8>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	0a19      	lsrs	r1, r3, #8
 8004596:	8abb      	ldrh	r3, [r7, #20]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	4413      	add	r3, r2
 800459c:	b2ca      	uxtb	r2, r1
 800459e:	701a      	strb	r2, [r3, #0]
    u16currentRxLength++;
 80045a0:	8abb      	ldrh	r3, [r7, #20]
 80045a2:	3301      	adds	r3, #1
 80045a4:	82bb      	strh	r3, [r7, #20]
  while (u16currentTxLength < u16TxdataLength)
 80045a6:	8afa      	ldrh	r2, [r7, #22]
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d3cc      	bcc.n	8004548 <drv_SPI_transmitReceive+0x24>
   }
  }

  // Add a delay here to ensure previous data has been fully received
  for (volatile int i = 0; i < 10; i++);
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e002      	b.n	80045ba <drv_SPI_transmitReceive+0x96>
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	3301      	adds	r3, #1
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b09      	cmp	r3, #9
 80045be:	ddf9      	ble.n	80045b4 <drv_SPI_transmitReceive+0x90>

  while (u16currentRxLength < u16RxdataLength)
 80045c0:	e013      	b.n	80045ea <drv_SPI_transmitReceive+0xc6>
  {
    *((__IO uint8_t *)&SPI1->DR) = 0x00;
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <drv_SPI_transmitReceive+0xec>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	701a      	strb	r2, [r3, #0]
    while (!(SPI1->SR & SPI_SR_RXNE));
 80045c8:	bf00      	nop
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <drv_SPI_transmitReceive+0xe8>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f9      	beq.n	80045ca <drv_SPI_transmitReceive+0xa6>
    pu8RxDataRx[u16currentRxLength] = *((__IO uint8_t *)&SPI1->DR);
 80045d6:	490e      	ldr	r1, [pc, #56]	; (8004610 <drv_SPI_transmitReceive+0xec>)
 80045d8:	8abb      	ldrh	r3, [r7, #20]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	4413      	add	r3, r2
 80045de:	780a      	ldrb	r2, [r1, #0]
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]

    u16currentRxLength++;
 80045e4:	8abb      	ldrh	r3, [r7, #20]
 80045e6:	3301      	adds	r3, #1
 80045e8:	82bb      	strh	r3, [r7, #20]
  while (u16currentRxLength < u16RxdataLength)
 80045ea:	8aba      	ldrh	r2, [r7, #20]
 80045ec:	88bb      	ldrh	r3, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d3e7      	bcc.n	80045c2 <drv_SPI_transmitReceive+0x9e>
  }

  /* Wait until SPI is not busy */
  while ((SPI1->SR & SPI_SR_BSY) != 0) {};
 80045f2:	bf00      	nop
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <drv_SPI_transmitReceive+0xe8>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f9      	bne.n	80045f4 <drv_SPI_transmitReceive+0xd0>

}
 8004600:	bf00      	nop
 8004602:	371c      	adds	r7, #28
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40013000 	.word	0x40013000
 8004610:	4001300c 	.word	0x4001300c

08004614 <drv_SPI_transmit_nBytes>:

}


void drv_SPI_transmit_nBytes(uint8_t* pu8Data, uint16_t u16dataLength)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
  for(uint16_t u16idx = 0; u16idx < u16dataLength; ++u16idx)
 8004620:	2300      	movs	r3, #0
 8004622:	81fb      	strh	r3, [r7, #14]
 8004624:	e00f      	b.n	8004646 <drv_SPI_transmit_nBytes+0x32>
  {
    while (!(SPI1->SR & SPI_SR_TXE)) {}  //Wait for the transmit buffer to be empty
 8004626:	bf00      	nop
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <drv_SPI_transmit_nBytes+0x7c>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f9      	beq.n	8004628 <drv_SPI_transmit_nBytes+0x14>
    *((__IO uint8_t *)&SPI1->DR) = pu8Data[u16idx];
 8004634:	89fb      	ldrh	r3, [r7, #14]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	4413      	add	r3, r2
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <drv_SPI_transmit_nBytes+0x80>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	7013      	strb	r3, [r2, #0]
  for(uint16_t u16idx = 0; u16idx < u16dataLength; ++u16idx)
 8004640:	89fb      	ldrh	r3, [r7, #14]
 8004642:	3301      	adds	r3, #1
 8004644:	81fb      	strh	r3, [r7, #14]
 8004646:	89fa      	ldrh	r2, [r7, #14]
 8004648:	887b      	ldrh	r3, [r7, #2]
 800464a:	429a      	cmp	r2, r3
 800464c:	d3eb      	bcc.n	8004626 <drv_SPI_transmit_nBytes+0x12>
  }

  while (!(SPI1->SR & SPI_SR_TXE)) {} //Wait for the transmit buffer to be empty
 800464e:	bf00      	nop
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <drv_SPI_transmit_nBytes+0x7c>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f9      	beq.n	8004650 <drv_SPI_transmit_nBytes+0x3c>
  while (SPI1->SR & SPI_SR_BSY){}  //Wait for the SPI peripheral to finish the transmission
 800465c:	bf00      	nop
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <drv_SPI_transmit_nBytes+0x7c>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f9      	bne.n	800465e <drv_SPI_transmit_nBytes+0x4a>

  if(SPI1->SR & SPI_SR_OVR)
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <drv_SPI_transmit_nBytes+0x7c>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d005      	beq.n	8004682 <drv_SPI_transmit_nBytes+0x6e>
  {
    uint8_t u8void = SPI1->DR;
 8004676:	4b06      	ldr	r3, [pc, #24]	; (8004690 <drv_SPI_transmit_nBytes+0x7c>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	737b      	strb	r3, [r7, #13]
    (void)u8void;
    u8void = SPI1->SR;
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <drv_SPI_transmit_nBytes+0x7c>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	737b      	strb	r3, [r7, #13]
  }
}
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40013000 	.word	0x40013000
 8004694:	4001300c 	.word	0x4001300c

08004698 <drv_SPI_assertCS>:

}


void drv_SPI_assertCS(bool_t bValue)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
  while (SPI1->SR & SPI_SR_BSY){ }; // Wait for the SPI peripheral to finish the transmission
 80046a2:	bf00      	nop
 80046a4:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <drv_SPI_assertCS+0x2c>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f9      	bne.n	80046a4 <drv_SPI_assertCS+0xc>
  drv_GPIO_set_pin(GPIO_PORTA, bValue, SPI_CS_PIN);
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	2204      	movs	r2, #4
 80046b4:	4619      	mov	r1, r3
 80046b6:	2000      	movs	r0, #0
 80046b8:	f7ff fcfa 	bl	80040b0 <drv_GPIO_set_pin>
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40013000 	.word	0x40013000

080046c8 <__NVIC_EnableIRQ>:
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	db0b      	blt.n	80046f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	f003 021f 	and.w	r2, r3, #31
 80046e0:	4907      	ldr	r1, [pc, #28]	; (8004700 <__NVIC_EnableIRQ+0x38>)
 80046e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	2001      	movs	r0, #1
 80046ea:	fa00 f202 	lsl.w	r2, r0, r2
 80046ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	e000e100 	.word	0xe000e100

08004704 <__NVIC_SetPriority>:
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	6039      	str	r1, [r7, #0]
 800470e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004714:	2b00      	cmp	r3, #0
 8004716:	db0a      	blt.n	800472e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	490c      	ldr	r1, [pc, #48]	; (8004750 <__NVIC_SetPriority+0x4c>)
 800471e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004722:	0112      	lsls	r2, r2, #4
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	440b      	add	r3, r1
 8004728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800472c:	e00a      	b.n	8004744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4908      	ldr	r1, [pc, #32]	; (8004754 <__NVIC_SetPriority+0x50>)
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	3b04      	subs	r3, #4
 800473c:	0112      	lsls	r2, r2, #4
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	440b      	add	r3, r1
 8004742:	761a      	strb	r2, [r3, #24]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	e000e100 	.word	0xe000e100
 8004754:	e000ed00 	.word	0xe000ed00

08004758 <drv_uart_init>:
static uint8_t au8TxBuf[TX_BUFFER_SIZE];
static uint8_t au8RxBuf[RX_BUFFER_SIZE];

/* Public functions ----------------------------------------------------*/
void drv_uart_init(UART_init_t* pUARTInit)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  ringBuffer_init(&uartTxBuffer, au8TxBuf, TX_BUFFER_SIZE);
 8004760:	2210      	movs	r2, #16
 8004762:	493e      	ldr	r1, [pc, #248]	; (800485c <drv_uart_init+0x104>)
 8004764:	483e      	ldr	r0, [pc, #248]	; (8004860 <drv_uart_init+0x108>)
 8004766:	f000 f96d 	bl	8004a44 <ringBuffer_init>
  ringBuffer_init(&uartRxBuffer, au8RxBuf, RX_BUFFER_SIZE);
 800476a:	2210      	movs	r2, #16
 800476c:	493d      	ldr	r1, [pc, #244]	; (8004864 <drv_uart_init+0x10c>)
 800476e:	483e      	ldr	r0, [pc, #248]	; (8004868 <drv_uart_init+0x110>)
 8004770:	f000 f968 	bl	8004a44 <ringBuffer_init>

  RCC->APB2ENR |= RCC_APB2ENR_USART1EN; /* CPU1 USART1 clocks enable */
 8004774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800477e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004782:	6613      	str	r3, [r2, #96]	; 0x60
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8004784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* https://www.st.com/resource/en/datasheet/stm32wb55cc.pdf  AF7  USART1 PB6 -> USART1_ TX PB7 -> USART1_ RX
  GPIOx_AFRL 0111: AF7*/
  GPIOB->AFR[0] |= (0x07 << GPIO_AFRL_AFSEL7_Pos);
 8004794:	4b35      	ldr	r3, [pc, #212]	; (800486c <drv_uart_init+0x114>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	4a34      	ldr	r2, [pc, #208]	; (800486c <drv_uart_init+0x114>)
 800479a:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 800479e:	6213      	str	r3, [r2, #32]
  GPIOB->AFR[0] |= (0x07 << GPIO_AFRL_AFSEL6_Pos);
 80047a0:	4b32      	ldr	r3, [pc, #200]	; (800486c <drv_uart_init+0x114>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4a31      	ldr	r2, [pc, #196]	; (800486c <drv_uart_init+0x114>)
 80047a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80047aa:	6213      	str	r3, [r2, #32]

  GPIO_init_t USART_GPIO_PB5 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 80047ac:	4a30      	ldr	r2, [pc, #192]	; (8004870 <drv_uart_init+0x118>)
 80047ae:	f107 0310 	add.w	r3, r7, #16
 80047b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047b6:	6018      	str	r0, [r3, #0]
 80047b8:	3304      	adds	r3, #4
 80047ba:	8019      	strh	r1, [r3, #0]
			         .gpioSpeed = GPIO_SPEED_HIGH,
			         .gpioPort = GPIO_PORTB,
				 .gpioPuPd = GPIO_NO_PULL,
				 .u8pinNumber = 7                 };

  GPIO_init_t USART_GPIO_PB6 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 80047bc:	4a2d      	ldr	r2, [pc, #180]	; (8004874 <drv_uart_init+0x11c>)
 80047be:	f107 0308 	add.w	r3, r7, #8
 80047c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047c6:	6018      	str	r0, [r3, #0]
 80047c8:	3304      	adds	r3, #4
 80047ca:	8019      	strh	r1, [r3, #0]
  			         .gpioSpeed = GPIO_SPEED_HIGH,
  			         .gpioPort = GPIO_PORTB,
  				 .gpioPuPd = GPIO_NO_PULL,
  			         .u8pinNumber = 6	          };

  drv_GPIO_init(&USART_GPIO_PB5);
 80047cc:	f107 0310 	add.w	r3, r7, #16
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fc50 	bl	8004076 <drv_GPIO_init>
  drv_GPIO_init(&USART_GPIO_PB6);
 80047d6:	f107 0308 	add.w	r3, r7, #8
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fc4b 	bl	8004076 <drv_GPIO_init>

  // Disable USART
   USART1->CR1 &= ~USART_CR1_UE;
 80047e0:	4b25      	ldr	r3, [pc, #148]	; (8004878 <drv_uart_init+0x120>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a24      	ldr	r2, [pc, #144]	; (8004878 <drv_uart_init+0x120>)
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	6013      	str	r3, [r2, #0]
   // Clear interrupt flags
    USART1->ICR = USART_ICR_TCCF;
 80047ec:	4b22      	ldr	r3, [pc, #136]	; (8004878 <drv_uart_init+0x120>)
 80047ee:	2240      	movs	r2, #64	; 0x40
 80047f0:	621a      	str	r2, [r3, #32]

   /* In asynchronous mode, the following bits must be kept cleared: LINEN and CLKEN bits in the USART_CR2 register */
  USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80047f2:	4b21      	ldr	r3, [pc, #132]	; (8004878 <drv_uart_init+0x120>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4a20      	ldr	r2, [pc, #128]	; (8004878 <drv_uart_init+0x120>)
 80047f8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80047fc:	6053      	str	r3, [r2, #4]
  USART1->CR3 &= ~((USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fe:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <drv_uart_init+0x120>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	4a1d      	ldr	r2, [pc, #116]	; (8004878 <drv_uart_init+0x120>)
 8004804:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004808:	6093      	str	r3, [r2, #8]

  set_UART_stopBits(pUARTInit);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f836 	bl	800487c <set_UART_stopBits>
  set_UART_wordLength(pUARTInit);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f85b 	bl	80048cc <set_UART_wordLength>
  set_UART_baudRate(pUARTInit);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f87e 	bl	8004918 <set_UART_baudRate>
  set_UART_parity(pUARTInit);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f8a5 	bl	800496c <set_UART_parity>

  /* Oversampling */
  USART1->CR1 &= ~USART_CR1_OVER8; /* 16 */
 8004822:	4b15      	ldr	r3, [pc, #84]	; (8004878 <drv_uart_init+0x120>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a14      	ldr	r2, [pc, #80]	; (8004878 <drv_uart_init+0x120>)
 8004828:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800482c:	6013      	str	r3, [r2, #0]

  /* CR2 Bit 19 MSBFIRST: Most significant bit first */
  // Enable USART1, transmitter, and receiver
  USART1->CR1 |= USART_CR1_TE | USART_CR1_UE | USART_CR1_RE  | USART_CR1_TCIE;
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <drv_uart_init+0x120>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a11      	ldr	r2, [pc, #68]	; (8004878 <drv_uart_init+0x120>)
 8004834:	f043 034d 	orr.w	r3, r3, #77	; 0x4d
 8004838:	6013      	str	r3, [r2, #0]

  // Clear the TXE interrupt enable bit
  USART1->CR1 &= ~(USART_CR1_TXEIE | USART_CR1_TCIE); /* Clear TXEIE and TC interrupts */
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <drv_uart_init+0x120>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a0e      	ldr	r2, [pc, #56]	; (8004878 <drv_uart_init+0x120>)
 8004840:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004844:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART1_IRQn, 0);			// Set Priority to 1
 8004846:	2100      	movs	r1, #0
 8004848:	2024      	movs	r0, #36	; 0x24
 800484a:	f7ff ff5b 	bl	8004704 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);				// Enable interrupt of USART1 peripheral
 800484e:	2024      	movs	r0, #36	; 0x24
 8004850:	f7ff ff3a 	bl	80046c8 <__NVIC_EnableIRQ>
}
 8004854:	bf00      	nop
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	200000a8 	.word	0x200000a8
 8004860:	20000088 	.word	0x20000088
 8004864:	200000b8 	.word	0x200000b8
 8004868:	20000098 	.word	0x20000098
 800486c:	48000400 	.word	0x48000400
 8004870:	08004d04 	.word	0x08004d04
 8004874:	08004d0c 	.word	0x08004d0c
 8004878:	40013800 	.word	0x40013800

0800487c <set_UART_stopBits>:
}


/* Private functions ---------------------------------------------------*/
static void set_UART_stopBits(UART_init_t* pUARTInit)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartStopBits)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <set_UART_stopBits+0x16>
 800488c:	2b01      	cmp	r3, #1
 800488e:	d00d      	beq.n	80048ac <set_UART_stopBits+0x30>

    case UART_STOP_BITS_2:
      USART1->CR2 |= (0x2UL << USART_CR2_STOP_Pos) ;
      break;

    default: break;
 8004890:	e013      	b.n	80048ba <set_UART_stopBits+0x3e>
      USART1->CR2 &= ~(0x01UL << USART_CR2_STOP_Pos);
 8004892:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <set_UART_stopBits+0x4c>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <set_UART_stopBits+0x4c>)
 8004898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800489c:	6053      	str	r3, [r2, #4]
      USART1->CR2 &= ~(0x01UL << (USART_CR2_STOP_Pos + 1U));
 800489e:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <set_UART_stopBits+0x4c>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <set_UART_stopBits+0x4c>)
 80048a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048a8:	6053      	str	r3, [r2, #4]
      break;
 80048aa:	e006      	b.n	80048ba <set_UART_stopBits+0x3e>
      USART1->CR2 |= (0x2UL << USART_CR2_STOP_Pos) ;
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <set_UART_stopBits+0x4c>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	4a05      	ldr	r2, [pc, #20]	; (80048c8 <set_UART_stopBits+0x4c>)
 80048b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048b6:	6053      	str	r3, [r2, #4]
      break;
 80048b8:	bf00      	nop
  }
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40013800 	.word	0x40013800

080048cc <set_UART_wordLength>:

static void set_UART_wordLength(UART_init_t* pUARTInit)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartWordLength)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	78db      	ldrb	r3, [r3, #3]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d011      	beq.n	8004900 <set_UART_wordLength+0x34>
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d011      	beq.n	8004904 <set_UART_wordLength+0x38>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d000      	beq.n	80048e6 <set_UART_wordLength+0x1a>
       USART1->CR1 &= ~USART_CR1_M0;
     } break;

     case UART_WORD_LEGTH_7_BITS: break;
     case UART_WORD_LEGTH_9_BITS: break;
     default: break;
 80048e4:	e00f      	b.n	8004906 <set_UART_wordLength+0x3a>
       USART1->CR1 &= ~USART_CR1_M1;
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <set_UART_wordLength+0x48>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <set_UART_wordLength+0x48>)
 80048ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f0:	6013      	str	r3, [r2, #0]
       USART1->CR1 &= ~USART_CR1_M0;
 80048f2:	4b08      	ldr	r3, [pc, #32]	; (8004914 <set_UART_wordLength+0x48>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a07      	ldr	r2, [pc, #28]	; (8004914 <set_UART_wordLength+0x48>)
 80048f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048fc:	6013      	str	r3, [r2, #0]
     } break;
 80048fe:	e002      	b.n	8004906 <set_UART_wordLength+0x3a>
     case UART_WORD_LEGTH_7_BITS: break;
 8004900:	bf00      	nop
 8004902:	e000      	b.n	8004906 <set_UART_wordLength+0x3a>
     case UART_WORD_LEGTH_9_BITS: break;
 8004904:	bf00      	nop
   }
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40013800 	.word	0x40013800

08004918 <set_UART_baudRate>:

static void set_UART_baudRate(UART_init_t* pUARTInit)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t baudValue = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
  switch (pUARTInit->uartBaud)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d00a      	beq.n	8004942 <set_UART_baudRate+0x2a>
 800492c:	2b02      	cmp	r3, #2
 800492e:	d00e      	beq.n	800494e <set_UART_baudRate+0x36>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d000      	beq.n	8004936 <set_UART_baudRate+0x1e>
  {
    case UART_BAUD_9600:  { baudValue = calculateBaudRateValue(9600);  } break;
    case UART_BAUD_38400: { baudValue = calculateBaudRateValue(38400); } break;
    case UART_BAUD_115200: { baudValue = calculateBaudRateValue(115200);} break;
    default: break;
 8004934:	e011      	b.n	800495a <set_UART_baudRate+0x42>
    case UART_BAUD_9600:  { baudValue = calculateBaudRateValue(9600);  } break;
 8004936:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800493a:	f000 f847 	bl	80049cc <calculateBaudRateValue>
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	e00b      	b.n	800495a <set_UART_baudRate+0x42>
    case UART_BAUD_38400: { baudValue = calculateBaudRateValue(38400); } break;
 8004942:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 8004946:	f000 f841 	bl	80049cc <calculateBaudRateValue>
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	e005      	b.n	800495a <set_UART_baudRate+0x42>
    case UART_BAUD_115200: { baudValue = calculateBaudRateValue(115200);} break;
 800494e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8004952:	f000 f83b 	bl	80049cc <calculateBaudRateValue>
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	bf00      	nop
  }
   USART1->BRR = baudValue;
 800495a:	4a03      	ldr	r2, [pc, #12]	; (8004968 <set_UART_baudRate+0x50>)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	60d3      	str	r3, [r2, #12]
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	40013800 	.word	0x40013800

0800496c <set_UART_parity>:

static void set_UART_parity(UART_init_t* pUARTInit)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartParity)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	789b      	ldrb	r3, [r3, #2]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d00b      	beq.n	8004994 <set_UART_parity+0x28>
 800497c:	2b02      	cmp	r3, #2
 800497e:	d016      	beq.n	80049ae <set_UART_parity+0x42>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d000      	beq.n	8004986 <set_UART_parity+0x1a>
      USART1->CR1 |= USART_CR1_PCE;
      USART1->CR1 &= ~USART_CR1_PS;
    } break;

    case UART_PARITY_ODD: { USART1->CR1 |= USART_CR1_PCE | USART_CR1_PS; } break;
    default: break;
 8004984:	e01a      	b.n	80049bc <set_UART_parity+0x50>
    case UART_PARITY_NONE: { USART1->CR1 &= ~USART_CR1_PCE; } break;
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <set_UART_parity+0x5c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a0f      	ldr	r2, [pc, #60]	; (80049c8 <set_UART_parity+0x5c>)
 800498c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e013      	b.n	80049bc <set_UART_parity+0x50>
      USART1->CR1 |= USART_CR1_PCE;
 8004994:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <set_UART_parity+0x5c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0b      	ldr	r2, [pc, #44]	; (80049c8 <set_UART_parity+0x5c>)
 800499a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800499e:	6013      	str	r3, [r2, #0]
      USART1->CR1 &= ~USART_CR1_PS;
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <set_UART_parity+0x5c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <set_UART_parity+0x5c>)
 80049a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049aa:	6013      	str	r3, [r2, #0]
    } break;
 80049ac:	e006      	b.n	80049bc <set_UART_parity+0x50>
    case UART_PARITY_ODD: { USART1->CR1 |= USART_CR1_PCE | USART_CR1_PS; } break;
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <set_UART_parity+0x5c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a05      	ldr	r2, [pc, #20]	; (80049c8 <set_UART_parity+0x5c>)
 80049b4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	bf00      	nop
  }
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40013800 	.word	0x40013800

080049cc <calculateBaudRateValue>:

int((104.1875 * 16) + 0.5) = 1667 = 0x683

Personally I've been using BRR = APBCLK / BAUD for 13+ years, it is simpler to explain/compute. */
static uint32_t calculateBaudRateValue(uint32_t u32baudrate)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t APBCLK = 64000000;
 80049d4:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <calculateBaudRateValue+0x28>)
 80049d6:	60fb      	str	r3, [r7, #12]
  uint32_t u32res = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	60bb      	str	r3, [r7, #8]

  u32res = (APBCLK / u32baudrate );
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	60bb      	str	r3, [r7, #8]

  return u32res;
 80049e6:	68bb      	ldr	r3, [r7, #8]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	03d09000 	.word	0x03d09000

080049f8 <drv_uart_IRQHandler>:
transmission corrupts the data on the TX pin as the baud rate counters get frozen. The
current data being transmitted are then lost.
An idle frame is sent when the TE bit is enabled. */

void drv_uart_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  if (USART1->ISR & USART_ISR_TC) /* If a transfer is complete, byte by byte */
 80049fc:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <drv_uart_IRQHandler+0x44>)
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d017      	beq.n	8004a38 <drv_uart_IRQHandler+0x40>
  {
    if (uartTxBuffer.u16elementsInBuffer > 0) /* Do we have anything to send */
 8004a08:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <drv_uart_IRQHandler+0x48>)
 8004a0a:	891b      	ldrh	r3, [r3, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00d      	beq.n	8004a2c <drv_uart_IRQHandler+0x34>
    {
      USART1->TDR = ringBuffer_get(&uartTxBuffer);
 8004a10:	480b      	ldr	r0, [pc, #44]	; (8004a40 <drv_uart_IRQHandler+0x48>)
 8004a12:	f000 f836 	bl	8004a82 <ringBuffer_get>
 8004a16:	4603      	mov	r3, r0
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <drv_uart_IRQHandler+0x44>)
 8004a1c:	629a      	str	r2, [r3, #40]	; 0x28
      while(!(USART1->ISR & USART_ISR_TC));  /* Wait here until the transfer is complete */
 8004a1e:	bf00      	nop
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <drv_uart_IRQHandler+0x44>)
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f9      	beq.n	8004a20 <drv_uart_IRQHandler+0x28>
    }

    USART1->CR1 &= ~(USART_CR1_TXEIE); /* Disable the transmission buffer empty interrupt, we will enable this once we have something to send */
 8004a2c:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <drv_uart_IRQHandler+0x44>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a02      	ldr	r2, [pc, #8]	; (8004a3c <drv_uart_IRQHandler+0x44>)
 8004a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a36:	6013      	str	r3, [r2, #0]
  }
}
 8004a38:	bf00      	nop
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40013800 	.word	0x40013800
 8004a40:	20000088 	.word	0x20000088

08004a44 <ringBuffer_init>:

/* Global variables ---------------------------------------------------*/

/* Public functions ----------------------------------------------------*/
void ringBuffer_init(sRingbuf_t* pRingBuffer, uint8_t* pu8buffer, uint16_t u16bufferSizeBytes)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
  pRingBuffer->au8buffer 	    = &pu8buffer[0];
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	601a      	str	r2, [r3, #0]
  pRingBuffer->u16bufferMaxCapacity = u16bufferSizeBytes;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	88fa      	ldrh	r2, [r7, #6]
 8004a5c:	815a      	strh	r2, [r3, #10]
  pRingBuffer->u16elementsInBuffer  = 0;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	811a      	strh	r2, [r3, #8]
  pRingBuffer->u16getIndex  	    = 0;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	80da      	strh	r2, [r3, #6]
  pRingBuffer->u16putIndex          = 0;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	809a      	strh	r2, [r3, #4]
  pRingBuffer->eRingBufStatus       = RINGBUF_EMPTY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	731a      	strb	r2, [r3, #12]
}
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <ringBuffer_get>:
  return bStatus;
}


uint8_t ringBuffer_get(sRingbuf_t* pRingBuffer)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a8a:	b672      	cpsid	i
  __disable_irq();

  uint8_t u8returnValue = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	73fb      	strb	r3, [r7, #15]

  if(    (pRingBuffer->eRingBufStatus != RINGBUF_EMPTY        )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	7b1b      	ldrb	r3, [r3, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d026      	beq.n	8004ae6 <ringBuffer_get+0x64>
      && (pRingBuffer->u16getIndex != pRingBuffer->u16putIndex)  )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	88da      	ldrh	r2, [r3, #6]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	889b      	ldrh	r3, [r3, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d020      	beq.n	8004ae6 <ringBuffer_get+0x64>
  {
    u8returnValue = pRingBuffer->au8buffer[pRingBuffer->u16getIndex];
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	88d2      	ldrh	r2, [r2, #6]
 8004aac:	4413      	add	r3, r2
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	73fb      	strb	r3, [r7, #15]
    pRingBuffer->au8buffer[pRingBuffer->u16getIndex] = 0;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	88d2      	ldrh	r2, [r2, #6]
 8004aba:	4413      	add	r3, r2
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
    pRingBuffer->u16elementsInBuffer--;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	891b      	ldrh	r3, [r3, #8]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	811a      	strh	r2, [r3, #8]
    pRingBuffer->u16getIndex = (pRingBuffer->u16getIndex + 1) % (pRingBuffer->u16bufferMaxCapacity);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	88db      	ldrh	r3, [r3, #6]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	8952      	ldrh	r2, [r2, #10]
 8004ad6:	fb93 f1f2 	sdiv	r1, r3, r2
 8004ada:	fb02 f201 	mul.w	r2, r2, r1
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	80da      	strh	r2, [r3, #6]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ae6:	b662      	cpsie	i

  }
  __enable_irq();
  return u8returnValue;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <simple_fsm_init>:
/* Global variables ---------------------------------------------------*/
static const state_table_t* states;

/* Public functions ----------------------------------------------------*/
void simple_fsm_init(fsm_t* pfsm, uint8_t u8sizeBytes, const state_table_t* pstates)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	460b      	mov	r3, r1
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	72fb      	strb	r3, [r7, #11]
  pfsm->u8statesCount = u8sizeBytes;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	7afa      	ldrb	r2, [r7, #11]
 8004b0a:	721a      	strb	r2, [r3, #8]
  states = pstates;
 8004b0c:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <simple_fsm_init+0x28>)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6013      	str	r3, [r2, #0]
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	200000c8 	.word	0x200000c8

08004b24 <simpleTimer_reset_milliSeconds>:
    timer->eTimerStatus = STS_RUNNING;
  }
}

void simpleTimer_reset_milliSeconds(sTimer_t* timer, uint16_t u16resetValue)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	807b      	strh	r3, [r7, #2]
  if(timer->eTimerStatus != STS_RUNNING )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	791b      	ldrb	r3, [r3, #4]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d00d      	beq.n	8004b54 <simpleTimer_reset_milliSeconds+0x30>
  {
    timer->u32timeOfReset = simpleTimer_getMilliseconds();
 8004b38:	f000 f878 	bl	8004c2c <simpleTimer_getMilliseconds>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	601a      	str	r2, [r3, #0]
    timer->u16resetValue = u16resetValue;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	887a      	ldrh	r2, [r7, #2]
 8004b46:	80da      	strh	r2, [r3, #6]
    timer->bIsMillisecondsTimer = true;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	721a      	strb	r2, [r3, #8]
    timer->eTimerStatus = STS_RUNNING;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	711a      	strb	r2, [r3, #4]
  }
}
 8004b54:	bf00      	nop
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <simpleTimer_timeout>:


bool_t simpleTimer_timeout(sTimer_t* timer)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  bool_t bTimedOut = false;
 8004b64:	2300      	movs	r3, #0
 8004b66:	73fb      	strb	r3, [r7, #15]

  if(timer->bIsMillisecondsTimer)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7a1b      	ldrb	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d012      	beq.n	8004b96 <simpleTimer_timeout+0x3a>
  {
    if(    ( (timer->u32timeOfReset + timer->u16resetValue) < u32currentTimeMilliseconds )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	88d2      	ldrh	r2, [r2, #6]
 8004b78:	441a      	add	r2, r3
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <simpleTimer_timeout+0x6c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d21b      	bcs.n	8004bba <simpleTimer_timeout+0x5e>
        && (timer->eTimerStatus == STS_RUNNING)                                             )
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	791b      	ldrb	r3, [r3, #4]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d117      	bne.n	8004bba <simpleTimer_timeout+0x5e>
    {
      bTimedOut = true;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	73fb      	strb	r3, [r7, #15]
      timer->eTimerStatus = STS_TIMED_OUT;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2202      	movs	r2, #2
 8004b92:	711a      	strb	r2, [r3, #4]
 8004b94:	e011      	b.n	8004bba <simpleTimer_timeout+0x5e>
    }
  }
  else
  {
    if(    ( (timer->u32timeOfReset + timer->u16resetValue) < u32currentTimeSeconds)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	88d2      	ldrh	r2, [r2, #6]
 8004b9e:	441a      	add	r2, r3
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <simpleTimer_timeout+0x70>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d208      	bcs.n	8004bba <simpleTimer_timeout+0x5e>
	&& (timer->eTimerStatus == STS_RUNNING)                                       )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	791b      	ldrb	r3, [r3, #4]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d104      	bne.n	8004bba <simpleTimer_timeout+0x5e>
    {
      bTimedOut = true;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
      timer->eTimerStatus = STS_TIMED_OUT;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	711a      	strb	r2, [r3, #4]
    }
  }
  return bTimedOut;
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	200000d8 	.word	0x200000d8
 8004bcc:	200000d4 	.word	0x200000d4

08004bd0 <simpleTimer_IRQHandler>:

/* Public functions ----------------------------------------------------*/


void simpleTimer_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM17)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0f      	ldr	r2, [pc, #60]	; (8004c1c <simpleTimer_IRQHandler+0x4c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d116      	bne.n	8004c10 <simpleTimer_IRQHandler+0x40>
  {
    ++u32elapsedTicks;
 8004be2:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <simpleTimer_IRQHandler+0x50>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3301      	adds	r3, #1
 8004be8:	4a0d      	ldr	r2, [pc, #52]	; (8004c20 <simpleTimer_IRQHandler+0x50>)
 8004bea:	6013      	str	r3, [r2, #0]

    if((u32elapsedTicks % 1000) == 0)
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <simpleTimer_IRQHandler+0x50>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <simpleTimer_IRQHandler+0x54>)
 8004bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf6:	099b      	lsrs	r3, r3, #6
 8004bf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <simpleTimer_IRQHandler+0x40>
    {
      ++u32elapsedSeconds;
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <simpleTimer_IRQHandler+0x58>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	4a06      	ldr	r2, [pc, #24]	; (8004c28 <simpleTimer_IRQHandler+0x58>)
 8004c0e:	6013      	str	r3, [r2, #0]
    }
  }
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40014800 	.word	0x40014800
 8004c20:	200000cc 	.word	0x200000cc
 8004c24:	10624dd3 	.word	0x10624dd3
 8004c28:	200000d0 	.word	0x200000d0

08004c2c <simpleTimer_getMilliseconds>:
{
  return u32elapsedSeconds;
}

uint32_t simpleTimer_getMilliseconds(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return u32elapsedTicks;
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <simpleTimer_getMilliseconds+0x14>)
 8004c32:	681b      	ldr	r3, [r3, #0]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	200000cc 	.word	0x200000cc

08004c44 <__libc_init_array>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	4e0d      	ldr	r6, [pc, #52]	; (8004c7c <__libc_init_array+0x38>)
 8004c48:	4c0d      	ldr	r4, [pc, #52]	; (8004c80 <__libc_init_array+0x3c>)
 8004c4a:	1ba4      	subs	r4, r4, r6
 8004c4c:	10a4      	asrs	r4, r4, #2
 8004c4e:	2500      	movs	r5, #0
 8004c50:	42a5      	cmp	r5, r4
 8004c52:	d109      	bne.n	8004c68 <__libc_init_array+0x24>
 8004c54:	4e0b      	ldr	r6, [pc, #44]	; (8004c84 <__libc_init_array+0x40>)
 8004c56:	4c0c      	ldr	r4, [pc, #48]	; (8004c88 <__libc_init_array+0x44>)
 8004c58:	f000 f820 	bl	8004c9c <_init>
 8004c5c:	1ba4      	subs	r4, r4, r6
 8004c5e:	10a4      	asrs	r4, r4, #2
 8004c60:	2500      	movs	r5, #0
 8004c62:	42a5      	cmp	r5, r4
 8004c64:	d105      	bne.n	8004c72 <__libc_init_array+0x2e>
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c6c:	4798      	blx	r3
 8004c6e:	3501      	adds	r5, #1
 8004c70:	e7ee      	b.n	8004c50 <__libc_init_array+0xc>
 8004c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c76:	4798      	blx	r3
 8004c78:	3501      	adds	r5, #1
 8004c7a:	e7f2      	b.n	8004c62 <__libc_init_array+0x1e>
 8004c7c:	08004de4 	.word	0x08004de4
 8004c80:	08004de4 	.word	0x08004de4
 8004c84:	08004de4 	.word	0x08004de4
 8004c88:	08004de8 	.word	0x08004de8

08004c8c <memset>:
 8004c8c:	4402      	add	r2, r0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d100      	bne.n	8004c96 <memset+0xa>
 8004c94:	4770      	bx	lr
 8004c96:	f803 1b01 	strb.w	r1, [r3], #1
 8004c9a:	e7f9      	b.n	8004c90 <memset+0x4>

08004c9c <_init>:
 8004c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9e:	bf00      	nop
 8004ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ca2:	bc08      	pop	{r3}
 8004ca4:	469e      	mov	lr, r3
 8004ca6:	4770      	bx	lr

08004ca8 <_fini>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	bf00      	nop
 8004cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cae:	bc08      	pop	{r3}
 8004cb0:	469e      	mov	lr, r3
 8004cb2:	4770      	bx	lr
