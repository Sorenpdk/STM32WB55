
STM32WB55.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080074d4  080074d4  000174d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080074dc  080074dc  000174dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000004  080074e4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004d8  20000020  08007500  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004f8  08007500  000204f8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002299f  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004192  00000000  00000000  000429ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001e10  00000000  00000000  00046b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c28  00000000  00000000  00048998  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00025fc7  00000000  00000000  0004a5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00016e3e  00000000  00000000  00070587  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000e9f93  00000000  00000000  000873c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00171358  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d78  00000000  00000000  001713d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000020 	.word	0x20000020
 800015c:	00000000 	.word	0x00000000
 8000160:	080073d0 	.word	0x080073d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000024 	.word	0x20000024
 800017c:	080073d0 	.word	0x080073d0

08000180 <__aeabi_uldivmod>:
 8000180:	b953      	cbnz	r3, 8000198 <__aeabi_uldivmod+0x18>
 8000182:	b94a      	cbnz	r2, 8000198 <__aeabi_uldivmod+0x18>
 8000184:	2900      	cmp	r1, #0
 8000186:	bf08      	it	eq
 8000188:	2800      	cmpeq	r0, #0
 800018a:	bf1c      	itt	ne
 800018c:	f04f 31ff 	movne.w	r1, #4294967295
 8000190:	f04f 30ff 	movne.w	r0, #4294967295
 8000194:	f000 b972 	b.w	800047c <__aeabi_idiv0>
 8000198:	f1ad 0c08 	sub.w	ip, sp, #8
 800019c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a0:	f000 f806 	bl	80001b0 <__udivmoddi4>
 80001a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ac:	b004      	add	sp, #16
 80001ae:	4770      	bx	lr

080001b0 <__udivmoddi4>:
 80001b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b4:	9e08      	ldr	r6, [sp, #32]
 80001b6:	4604      	mov	r4, r0
 80001b8:	4688      	mov	r8, r1
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d14b      	bne.n	8000256 <__udivmoddi4+0xa6>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4615      	mov	r5, r2
 80001c2:	d967      	bls.n	8000294 <__udivmoddi4+0xe4>
 80001c4:	fab2 f282 	clz	r2, r2
 80001c8:	b14a      	cbz	r2, 80001de <__udivmoddi4+0x2e>
 80001ca:	f1c2 0720 	rsb	r7, r2, #32
 80001ce:	fa01 f302 	lsl.w	r3, r1, r2
 80001d2:	fa20 f707 	lsr.w	r7, r0, r7
 80001d6:	4095      	lsls	r5, r2
 80001d8:	ea47 0803 	orr.w	r8, r7, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001e2:	0c23      	lsrs	r3, r4, #16
 80001e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e8:	fa1f fc85 	uxth.w	ip, r5
 80001ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80001f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f4:	fb07 f10c 	mul.w	r1, r7, ip
 80001f8:	4299      	cmp	r1, r3
 80001fa:	d909      	bls.n	8000210 <__udivmoddi4+0x60>
 80001fc:	18eb      	adds	r3, r5, r3
 80001fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000202:	f080 811b 	bcs.w	800043c <__udivmoddi4+0x28c>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 8118 	bls.w	800043c <__udivmoddi4+0x28c>
 800020c:	3f02      	subs	r7, #2
 800020e:	442b      	add	r3, r5
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0fe 	udiv	r0, r3, lr
 8000218:	fb0e 3310 	mls	r3, lr, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 fc0c 	mul.w	ip, r0, ip
 8000224:	45a4      	cmp	ip, r4
 8000226:	d909      	bls.n	800023c <__udivmoddi4+0x8c>
 8000228:	192c      	adds	r4, r5, r4
 800022a:	f100 33ff 	add.w	r3, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x290>
 8000232:	45a4      	cmp	ip, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x290>
 8000238:	3802      	subs	r0, #2
 800023a:	442c      	add	r4, r5
 800023c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000240:	eba4 040c 	sub.w	r4, r4, ip
 8000244:	2700      	movs	r7, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa0>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	4639      	mov	r1, r7
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xbe>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80eb 	beq.w	8000436 <__udivmoddi4+0x286>
 8000260:	2700      	movs	r7, #0
 8000262:	e9c6 0100 	strd	r0, r1, [r6]
 8000266:	4638      	mov	r0, r7
 8000268:	4639      	mov	r1, r7
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f783 	clz	r7, r3
 8000272:	2f00      	cmp	r7, #0
 8000274:	d147      	bne.n	8000306 <__udivmoddi4+0x156>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd0>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fa 	bhi.w	8000474 <__udivmoddi4+0x2c4>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa0>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa0>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xe8>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 808f 	bne.w	80003c0 <__udivmoddi4+0x210>
 80002a2:	1b49      	subs	r1, r1, r5
 80002a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a8:	fa1f f885 	uxth.w	r8, r5
 80002ac:	2701      	movs	r7, #1
 80002ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80002b2:	0c23      	lsrs	r3, r4, #16
 80002b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb08 f10c 	mul.w	r1, r8, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d907      	bls.n	80002d4 <__udivmoddi4+0x124>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x122>
 80002cc:	4299      	cmp	r1, r3
 80002ce:	f200 80cd 	bhi.w	800046c <__udivmoddi4+0x2bc>
 80002d2:	4684      	mov	ip, r0
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	b2a3      	uxth	r3, r4
 80002d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80002e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	45a0      	cmp	r8, r4
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0x14c>
 80002ec:	192c      	adds	r4, r5, r4
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14a>
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	f200 80b6 	bhi.w	8000466 <__udivmoddi4+0x2b6>
 80002fa:	4618      	mov	r0, r3
 80002fc:	eba4 0408 	sub.w	r4, r4, r8
 8000300:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000304:	e79f      	b.n	8000246 <__udivmoddi4+0x96>
 8000306:	f1c7 0c20 	rsb	ip, r7, #32
 800030a:	40bb      	lsls	r3, r7
 800030c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000310:	ea4e 0e03 	orr.w	lr, lr, r3
 8000314:	fa01 f407 	lsl.w	r4, r1, r7
 8000318:	fa20 f50c 	lsr.w	r5, r0, ip
 800031c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000320:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000324:	4325      	orrs	r5, r4
 8000326:	fbb3 f9f8 	udiv	r9, r3, r8
 800032a:	0c2c      	lsrs	r4, r5, #16
 800032c:	fb08 3319 	mls	r3, r8, r9, r3
 8000330:	fa1f fa8e 	uxth.w	sl, lr
 8000334:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000338:	fb09 f40a 	mul.w	r4, r9, sl
 800033c:	429c      	cmp	r4, r3
 800033e:	fa02 f207 	lsl.w	r2, r2, r7
 8000342:	fa00 f107 	lsl.w	r1, r0, r7
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b0>
 8000348:	eb1e 0303 	adds.w	r3, lr, r3
 800034c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000350:	f080 8087 	bcs.w	8000462 <__udivmoddi4+0x2b2>
 8000354:	429c      	cmp	r4, r3
 8000356:	f240 8084 	bls.w	8000462 <__udivmoddi4+0x2b2>
 800035a:	f1a9 0902 	sub.w	r9, r9, #2
 800035e:	4473      	add	r3, lr
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	b2ad      	uxth	r5, r5
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000370:	fb00 fa0a 	mul.w	sl, r0, sl
 8000374:	45a2      	cmp	sl, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1da>
 8000378:	eb1e 0404 	adds.w	r4, lr, r4
 800037c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000380:	d26b      	bcs.n	800045a <__udivmoddi4+0x2aa>
 8000382:	45a2      	cmp	sl, r4
 8000384:	d969      	bls.n	800045a <__udivmoddi4+0x2aa>
 8000386:	3802      	subs	r0, #2
 8000388:	4474      	add	r4, lr
 800038a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038e:	fba0 8902 	umull	r8, r9, r0, r2
 8000392:	eba4 040a 	sub.w	r4, r4, sl
 8000396:	454c      	cmp	r4, r9
 8000398:	46c2      	mov	sl, r8
 800039a:	464b      	mov	r3, r9
 800039c:	d354      	bcc.n	8000448 <__udivmoddi4+0x298>
 800039e:	d051      	beq.n	8000444 <__udivmoddi4+0x294>
 80003a0:	2e00      	cmp	r6, #0
 80003a2:	d069      	beq.n	8000478 <__udivmoddi4+0x2c8>
 80003a4:	ebb1 050a 	subs.w	r5, r1, sl
 80003a8:	eb64 0403 	sbc.w	r4, r4, r3
 80003ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003b0:	40fd      	lsrs	r5, r7
 80003b2:	40fc      	lsrs	r4, r7
 80003b4:	ea4c 0505 	orr.w	r5, ip, r5
 80003b8:	e9c6 5400 	strd	r5, r4, [r6]
 80003bc:	2700      	movs	r7, #0
 80003be:	e747      	b.n	8000250 <__udivmoddi4+0xa0>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f703 	lsr.w	r7, r0, r3
 80003c8:	4095      	lsls	r5, r2
 80003ca:	fa01 f002 	lsl.w	r0, r1, r2
 80003ce:	fa21 f303 	lsr.w	r3, r1, r3
 80003d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d6:	4338      	orrs	r0, r7
 80003d8:	0c01      	lsrs	r1, r0, #16
 80003da:	fbb3 f7fe 	udiv	r7, r3, lr
 80003de:	fa1f f885 	uxth.w	r8, r5
 80003e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ea:	fb07 f308 	mul.w	r3, r7, r8
 80003ee:	428b      	cmp	r3, r1
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x256>
 80003f6:	1869      	adds	r1, r5, r1
 80003f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80003fc:	d22f      	bcs.n	800045e <__udivmoddi4+0x2ae>
 80003fe:	428b      	cmp	r3, r1
 8000400:	d92d      	bls.n	800045e <__udivmoddi4+0x2ae>
 8000402:	3f02      	subs	r7, #2
 8000404:	4429      	add	r1, r5
 8000406:	1acb      	subs	r3, r1, r3
 8000408:	b281      	uxth	r1, r0
 800040a:	fbb3 f0fe 	udiv	r0, r3, lr
 800040e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000412:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000416:	fb00 f308 	mul.w	r3, r0, r8
 800041a:	428b      	cmp	r3, r1
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x27e>
 800041e:	1869      	adds	r1, r5, r1
 8000420:	f100 3cff 	add.w	ip, r0, #4294967295
 8000424:	d217      	bcs.n	8000456 <__udivmoddi4+0x2a6>
 8000426:	428b      	cmp	r3, r1
 8000428:	d915      	bls.n	8000456 <__udivmoddi4+0x2a6>
 800042a:	3802      	subs	r0, #2
 800042c:	4429      	add	r1, r5
 800042e:	1ac9      	subs	r1, r1, r3
 8000430:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000434:	e73b      	b.n	80002ae <__udivmoddi4+0xfe>
 8000436:	4637      	mov	r7, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e709      	b.n	8000250 <__udivmoddi4+0xa0>
 800043c:	4607      	mov	r7, r0
 800043e:	e6e7      	b.n	8000210 <__udivmoddi4+0x60>
 8000440:	4618      	mov	r0, r3
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x8c>
 8000444:	4541      	cmp	r1, r8
 8000446:	d2ab      	bcs.n	80003a0 <__udivmoddi4+0x1f0>
 8000448:	ebb8 0a02 	subs.w	sl, r8, r2
 800044c:	eb69 020e 	sbc.w	r2, r9, lr
 8000450:	3801      	subs	r0, #1
 8000452:	4613      	mov	r3, r2
 8000454:	e7a4      	b.n	80003a0 <__udivmoddi4+0x1f0>
 8000456:	4660      	mov	r0, ip
 8000458:	e7e9      	b.n	800042e <__udivmoddi4+0x27e>
 800045a:	4618      	mov	r0, r3
 800045c:	e795      	b.n	800038a <__udivmoddi4+0x1da>
 800045e:	4667      	mov	r7, ip
 8000460:	e7d1      	b.n	8000406 <__udivmoddi4+0x256>
 8000462:	4681      	mov	r9, r0
 8000464:	e77c      	b.n	8000360 <__udivmoddi4+0x1b0>
 8000466:	3802      	subs	r0, #2
 8000468:	442c      	add	r4, r5
 800046a:	e747      	b.n	80002fc <__udivmoddi4+0x14c>
 800046c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000470:	442b      	add	r3, r5
 8000472:	e72f      	b.n	80002d4 <__udivmoddi4+0x124>
 8000474:	4638      	mov	r0, r7
 8000476:	e708      	b.n	800028a <__udivmoddi4+0xda>
 8000478:	4637      	mov	r7, r6
 800047a:	e6e9      	b.n	8000250 <__udivmoddi4+0xa0>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <app_main_init>:
  * @retval none
  */

uint8_t data[] = "Hello, STM32WB55!";
void app_main_init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
  //drv_timer_init();
  UART_init_t UART1_Init = { .uartBaud = UART_BAUD_115200,
 8000486:	2302      	movs	r3, #2
 8000488:	713b      	strb	r3, [r7, #4]
 800048a:	2300      	movs	r3, #0
 800048c:	717b      	strb	r3, [r7, #5]
 800048e:	2300      	movs	r3, #0
 8000490:	71bb      	strb	r3, [r7, #6]
 8000492:	2300      	movs	r3, #0
 8000494:	71fb      	strb	r3, [r7, #7]
 			    .uartParity = UART_PARITY_NONE,
 			    .uartStopBits = UART_STOP_BITS_1,
 			    .uartWordLength = UART_WORD_LEGTH_8_BITS };

   drv_uart_init(&UART1_Init);
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4618      	mov	r0, r3
 800049a:	f006 fd69 	bl	8006f70 <drv_uart_init>
   drv_DMA_init();
 800049e:	f006 fb3f 	bl	8006b20 <drv_DMA_init>


  acc_init();
#endif

}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <app_main_idle>:
static float temp;
static float Z_mg;
#endif
static unsigned char acmsg[] = "Hello from STM";
void app_main_idle(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  //drv_uart_trasnmit(acmsg, sizeof(acmsg));
 HAL_UART_Transmit_DMA(&huart1, acmsg, sizeof(acmsg));
 80004b0:	220f      	movs	r2, #15
 80004b2:	4903      	ldr	r1, [pc, #12]	; (80004c0 <app_main_idle+0x14>)
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <app_main_idle+0x18>)
 80004b6:	f004 fcc9 	bl	8004e4c <HAL_UART_Transmit_DMA>
  /* Clear the TC flag in the ICR register */

      //USART1->ISR &= ~UART_CLEAR_TCF;
      //USART1->CR3 |= USART_CR3_DMAT;
#endif
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000004 	.word	0x20000004
 80004c4:	2000008c 	.word	0x2000008c

080004c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	db0b      	blt.n	80004f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	f003 021f 	and.w	r2, r3, #31
 80004e0:	4907      	ldr	r1, [pc, #28]	; (8000500 <__NVIC_EnableIRQ+0x38>)
 80004e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e6:	095b      	lsrs	r3, r3, #5
 80004e8:	2001      	movs	r0, #1
 80004ea:	fa00 f202 	lsl.w	r2, r0, r2
 80004ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000e100 	.word	0xe000e100

08000504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	6039      	str	r1, [r7, #0]
 800050e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	db0a      	blt.n	800052e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	b2da      	uxtb	r2, r3
 800051c:	490c      	ldr	r1, [pc, #48]	; (8000550 <__NVIC_SetPriority+0x4c>)
 800051e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000522:	0112      	lsls	r2, r2, #4
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	440b      	add	r3, r1
 8000528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800052c:	e00a      	b.n	8000544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4908      	ldr	r1, [pc, #32]	; (8000554 <__NVIC_SetPriority+0x50>)
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	f003 030f 	and.w	r3, r3, #15
 800053a:	3b04      	subs	r3, #4
 800053c:	0112      	lsls	r2, r2, #4
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	440b      	add	r3, r1
 8000542:	761a      	strb	r2, [r3, #24]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <LL_RCC_HSE_EnableDiv2>:
  * @brief  Enable HSE sysclk and pll prescaler division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_EnableDiv2
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableDiv2(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 800055c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000576:	b480      	push	{r7}
 8000578:	b085      	sub	sp, #20
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800057e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4313      	orrs	r3, r2
 800058c:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800058e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000592:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4013      	ands	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059a:	68fb      	ldr	r3, [r7, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4313      	orrs	r3, r2
 80005be:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4013      	ands	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005cc:	68fb      	ldr	r3, [r7, #12]
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fe37 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f815 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fa43 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fa2f 	bl	8000a4c <MX_DMA_Init>
  MX_USB_PCD_Init();
 80005ee:	f000 fa05 	bl	80009fc <MX_USB_PCD_Init>
  MX_CRC_Init();
 80005f2:	f000 f8ad 	bl	8000750 <MX_CRC_Init>
  MX_RTC_Init();
 80005f6:	f000 f8cd 	bl	8000794 <MX_RTC_Init>
  MX_TIM2_Init();
 80005fa:	f000 f8f3 	bl	80007e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005fe:	f000 f9b1 	bl	8000964 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000602:	f000 f989 	bl	8000918 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 8000606:	f7ff ff3b 	bl	8000480 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    app_main_idle();
 800060a:	f7ff ff4f 	bl	80004ac <app_main_idle>
 800060e:	e7fc      	b.n	800060a <main+0x30>

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b0ae      	sub	sp, #184	; 0xb8
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800061a:	2248      	movs	r2, #72	; 0x48
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fece 	bl	80073c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
 8000634:	615a      	str	r2, [r3, #20]
 8000636:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2250      	movs	r2, #80	; 0x50
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f006 febe 	bl	80073c0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	4b41      	ldr	r3, [pc, #260]	; (800074c <SystemClock_Config+0x13c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800064c:	4a3f      	ldr	r2, [pc, #252]	; (800074c <SystemClock_Config+0x13c>)
 800064e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b3d      	ldr	r3, [pc, #244]	; (800074c <SystemClock_Config+0x13c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000660:	230b      	movs	r3, #11
 8000662:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000676:	2305      	movs	r3, #5
 8000678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	2303      	movs	r3, #3
 8000684:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000688:	2310      	movs	r3, #16
 800068a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 800068e:	2320      	movs	r3, #32
 8000690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800069c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80006a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 f8e1 	bl	8002878 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006bc:	f000 fa40 	bl	8000b40 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006c0:	236f      	movs	r3, #111	; 0x6f
 80006c2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2303      	movs	r3, #3
 80006c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006e0:	2103      	movs	r1, #3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fc5c 	bl	8002fa0 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006ee:	f000 fa27 	bl	8000b40 <Error_Handler>
  }
  /** Enable the HSE Prescaler 
  */
  __HAL_RCC_HSE_DIV2_ENABLE();
 80006f2:	f7ff ff31 	bl	8000558 <LL_RCC_HSE_EnableDiv2>
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RTC
 80006f6:	f642 1301 	movw	r3, #10497	; 0x2901
 80006fa:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80006fc:	2318      	movs	r3, #24
 80006fe:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000704:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV4;
 8000706:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800070a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800070c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000710:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000712:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000716:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800071c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800072c:	2300      	movs	r3, #0
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f003 f8a1 	bl	800387a <HAL_RCCEx_PeriphCLKConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800073e:	f000 f9ff 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000742:	bf00      	nop
 8000744:	37b8      	adds	r7, #184	; 0xb8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	58000400 	.word	0x58000400

08000750 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_CRC_Init+0x3c>)
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <MX_CRC_Init+0x40>)
 8000758:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_CRC_Init+0x3c>)
 800075c:	2200      	movs	r2, #0
 800075e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_CRC_Init+0x3c>)
 8000762:	2200      	movs	r2, #0
 8000764:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_CRC_Init+0x3c>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_CRC_Init+0x3c>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_CRC_Init+0x3c>)
 8000774:	2201      	movs	r2, #1
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_CRC_Init+0x3c>)
 800077a:	f000 fe95 	bl	80014a8 <HAL_CRC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000784:	f000 f9dc 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000118 	.word	0x20000118
 8000790:	40023000 	.word	0x40023000

08000794 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000798:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_RTC_Init+0x48>)
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MX_RTC_Init+0x4c>)
 800079c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_RTC_Init+0x48>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_RTC_Init+0x48>)
 80007a6:	227f      	movs	r2, #127	; 0x7f
 80007a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_RTC_Init+0x48>)
 80007ac:	22ff      	movs	r2, #255	; 0xff
 80007ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_RTC_Init+0x48>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_RTC_Init+0x48>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_RTC_Init+0x48>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_RTC_Init+0x48>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_RTC_Init+0x48>)
 80007ca:	f003 fadc 	bl	8003d86 <HAL_RTC_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80007d4:	f000 f9b4 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000019c 	.word	0x2000019c
 80007e0:	40002800 	.word	0x40002800

080007e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <MX_TIM2_Init+0x130>)
 8000818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 800081e:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <MX_TIM2_Init+0x130>)
 8000820:	2240      	movs	r2, #64	; 0x40
 8000822:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000824:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <MX_TIM2_Init+0x130>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x0000FFFF;
 800082a:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <MX_TIM2_Init+0x130>)
 800082c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000830:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000832:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MX_TIM2_Init+0x130>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000838:	4b36      	ldr	r3, [pc, #216]	; (8000914 <MX_TIM2_Init+0x130>)
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800083e:	4835      	ldr	r0, [pc, #212]	; (8000914 <MX_TIM2_Init+0x130>)
 8000840:	f003 fb8f 	bl	8003f62 <HAL_TIM_Base_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800084a:	f000 f979 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800084e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000854:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000858:	4619      	mov	r1, r3
 800085a:	482e      	ldr	r0, [pc, #184]	; (8000914 <MX_TIM2_Init+0x130>)
 800085c:	f003 fda8 	bl	80043b0 <HAL_TIM_ConfigClockSource>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000866:	f000 f96b 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800086a:	482a      	ldr	r0, [pc, #168]	; (8000914 <MX_TIM2_Init+0x130>)
 800086c:	f003 fbce 	bl	800400c <HAL_TIM_OC_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000876:	f000 f963 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4822      	ldr	r0, [pc, #136]	; (8000914 <MX_TIM2_Init+0x130>)
 800088a:	f004 f9f1 	bl	8004c70 <HAL_TIMEx_MasterConfigSynchronization>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000894:	f000 f954 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 800089c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008aa:	463b      	mov	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4818      	ldr	r0, [pc, #96]	; (8000914 <MX_TIM2_Init+0x130>)
 80008b2:	f003 fcff 	bl	80042b4 <HAL_TIM_OC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80008bc:	f000 f940 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.Pulse = 10000;
 80008c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80008c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	2204      	movs	r2, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_TIM2_Init+0x130>)
 80008ce:	f003 fcf1 	bl	80042b4 <HAL_TIM_OC_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80008d8:	f000 f932 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->EGR |= TIM_EGR_UG;
 80008dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6153      	str	r3, [r2, #20]

  TIM2->CR1 |= TIM_CR1_CEN;
 80008ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6013      	str	r3, [r2, #0]


  // Enable the NVIC for TIM2
  NVIC_SetPriority(TIM2_IRQn, 0); // Set your desired priority
 80008fc:	2100      	movs	r1, #0
 80008fe:	201c      	movs	r0, #28
 8000900:	f7ff fe00 	bl	8000504 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000904:	201c      	movs	r0, #28
 8000906:	f7ff fddf 	bl	80004c8 <__NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	3738      	adds	r7, #56	; 0x38
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200001c0 	.word	0x200001c0

08000918 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_TIM16_Init+0x44>)
 800091e:	4a10      	ldr	r2, [pc, #64]	; (8000960 <MX_TIM16_Init+0x48>)
 8000920:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_TIM16_Init+0x44>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_TIM16_Init+0x44>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_TIM16_Init+0x44>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_TIM16_Init+0x44>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_TIM16_Init+0x44>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_TIM16_Init+0x44>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_TIM16_Init+0x44>)
 8000948:	f003 fb0b 	bl	8003f62 <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000952:	f000 f8f5 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000474 	.word	0x20000474
 8000960:	40014400 	.word	0x40014400

08000964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 800096a:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <MX_USART1_UART_Init+0x94>)
 800096c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 80009ae:	f004 f9fd 	bl	8004dac <HAL_UART_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009b8:	f000 f8c2 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 80009c0:	f005 ff70 	bl	80068a4 <HAL_UARTEx_SetTxFifoThreshold>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009ca:	f000 f8b9 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 80009d2:	f005 ffa5 	bl	8006920 <HAL_UARTEx_SetRxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009dc:	f000 f8b0 	bl	8000b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_USART1_UART_Init+0x90>)
 80009e2:	f005 ff26 	bl	8006832 <HAL_UARTEx_DisableFifoMode>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009ec:	f000 f8a8 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000008c 	.word	0x2000008c
 80009f8:	40013800 	.word	0x40013800

080009fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USB_PCD_Init+0x48>)
 8000a02:	4a11      	ldr	r2, [pc, #68]	; (8000a48 <MX_USB_PCD_Init+0x4c>)
 8000a04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USB_PCD_Init+0x48>)
 8000a08:	2208      	movs	r2, #8
 8000a0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a0c:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <MX_USB_PCD_Init+0x48>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USB_PCD_Init+0x48>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_USB_PCD_Init+0x48>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USB_PCD_Init+0x48>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_USB_PCD_Init+0x48>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USB_PCD_Init+0x48>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_USB_PCD_Init+0x48>)
 8000a32:	f001 fa7d 	bl	8001f30 <HAL_PCD_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a3c:	f000 f880 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000200 	.word	0x20000200
 8000a48:	40006800 	.word	0x40006800

08000a4c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a50:	2004      	movs	r0, #4
 8000a52:	f7ff fd90 	bl	8000576 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff fd8d 	bl	8000576 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	200b      	movs	r0, #11
 8000a62:	f000 fcf9 	bl	8001458 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a66:	200b      	movs	r0, #11
 8000a68:	f000 fd10 	bl	800148c <HAL_NVIC_EnableIRQ>

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a84:	2004      	movs	r0, #4
 8000a86:	f7ff fd8f 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff fd8c 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	2001      	movs	r0, #1
 8000a92:	f7ff fd89 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	2008      	movs	r0, #8
 8000a98:	f7ff fd86 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2123      	movs	r1, #35	; 0x23
 8000aa0:	481b      	ldr	r0, [pc, #108]	; (8000b10 <MX_GPIO_Init+0xa0>)
 8000aa2:	f001 fa2d 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4817      	ldr	r0, [pc, #92]	; (8000b14 <MX_GPIO_Init+0xa4>)
 8000ab8:	f001 f8b2 	bl	8001c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000abc:	2301      	movs	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480f      	ldr	r0, [pc, #60]	; (8000b10 <MX_GPIO_Init+0xa0>)
 8000ad2:	f001 f8a5 	bl	8001c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD1_Pin;
 8000ad6:	2322      	movs	r3, #34	; 0x22
 8000ad8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MX_GPIO_Init+0xa0>)
 8000aec:	f001 f898 	bl	8001c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000af0:	2303      	movs	r3, #3
 8000af2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_GPIO_Init+0xa8>)
 8000b02:	f001 f88d 	bl	8001c20 <HAL_GPIO_Init>

}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48000800 	.word	0x48000800
 8000b18:	48000c00 	.word	0x48000c00

08000b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d101      	bne.n	8000b32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b2e:	f000 fbaf 	bl	8001290 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40014800 	.word	0x40014800

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <LL_AHB1_GRP1_EnableClock>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b94:	68fb      	ldr	r3, [r7, #12]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <LL_AHB2_GRP1_EnableClock>:
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b085      	sub	sp, #20
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b085      	sub	sp, #20
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4013      	ands	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <HAL_CRC_MspInit+0x24>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d103      	bne.n	8000c62 <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c5e:	f7ff ff87 	bl	8000b70 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023000 	.word	0x40023000

08000c70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_RTC_MspInit+0x28>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d105      	bne.n	8000c8e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c82:	f7ff ff64 	bl	8000b4e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c86:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c8a:	f7ff ffa3 	bl	8000bd4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40002800 	.word	0x40002800

08000c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cac:	d10b      	bne.n	8000cc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff ff90 	bl	8000bd4 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	201c      	movs	r0, #28
 8000cba:	f000 fbcd 	bl	8001458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cbe:	201c      	movs	r0, #28
 8000cc0:	f000 fbe4 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000cc4:	e010      	b.n	8000ce8 <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM16)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <HAL_TIM_Base_MspInit+0x54>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d10b      	bne.n	8000ce8 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000cd0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000cd4:	f7ff ff97 	bl	8000c06 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2019      	movs	r0, #25
 8000cde:	f000 fbbb 	bl	8001458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ce2:	2019      	movs	r0, #25
 8000ce4:	f000 fbd2 	bl	800148c <HAL_NVIC_EnableIRQ>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40014400 	.word	0x40014400

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a2f      	ldr	r2, [pc, #188]	; (8000dd0 <HAL_UART_MspInit+0xdc>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d157      	bne.n	8000dc6 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d1a:	f7ff ff74 	bl	8000c06 <LL_APB2_GRP1_EnableClock>
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f7ff ff3f 	bl	8000ba2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 8000d24:	2340      	movs	r3, #64	; 0x40
 8000d26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d34:	2307      	movs	r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4825      	ldr	r0, [pc, #148]	; (8000dd4 <HAL_UART_MspInit+0xe0>)
 8000d40:	f000 ff6e 	bl	8001c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d54:	2307      	movs	r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481d      	ldr	r0, [pc, #116]	; (8000dd4 <HAL_UART_MspInit+0xe0>)
 8000d60:	f000 ff5e 	bl	8001c20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000d66:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <HAL_UART_MspInit+0xe8>)
 8000d68:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000d72:	2210      	movs	r2, #16
 8000d74:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000d7e:	2280      	movs	r2, #128	; 0x80
 8000d80:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d9a:	480f      	ldr	r0, [pc, #60]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000d9c:	f000 fc6e 	bl	800167c <HAL_DMA_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8000da6:	f7ff fecb 	bl	8000b40 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000dae:	675a      	str	r2, [r3, #116]	; 0x74
 8000db0:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <HAL_UART_MspInit+0xe4>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2024      	movs	r0, #36	; 0x24
 8000dbc:	f000 fb4c 	bl	8001458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dc0:	2024      	movs	r0, #36	; 0x24
 8000dc2:	f000 fb63 	bl	800148c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3720      	adds	r7, #32
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40013800 	.word	0x40013800
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	2000013c 	.word	0x2000013c
 8000ddc:	40020008 	.word	0x40020008

08000de0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <HAL_PCD_MspInit+0x5c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d118      	bne.n	8000e34 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff fecd 	bl	8000ba2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e1a:	230a      	movs	r3, #10
 8000e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f000 fefa 	bl	8001c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e2c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e30:	f7ff fed0 	bl	8000bd4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	3720      	adds	r7, #32
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40006800 	.word	0x40006800

08000e40 <LL_APB2_GRP1_EnableClock>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4013      	ands	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e64:	68fb      	ldr	r3, [r7, #12]
}
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0); 
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	201a      	movs	r0, #26
 8000e8a:	f000 fae5 	bl	8001458 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn); 
 8000e8e:	201a      	movs	r0, #26
 8000e90:	f000 fafc 	bl	800148c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000e94:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e98:	f7ff ffd2 	bl	8000e40 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e9c:	f107 0208 	add.w	r2, r7, #8
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 fa60 	bl	800336c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000eac:	f002 fa48 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8000eb0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb4:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <HAL_InitTick+0x8c>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	0c9b      	lsrs	r3, r3, #18
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_InitTick+0x90>)
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <HAL_InitTick+0x94>)
 8000ec4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_InitTick+0x90>)
 8000ec8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ecc:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000ece:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_InitTick+0x90>)
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_InitTick+0x90>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_InitTick+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000ee0:	4808      	ldr	r0, [pc, #32]	; (8000f04 <HAL_InitTick+0x90>)
 8000ee2:	f003 f83e 	bl	8003f62 <HAL_TIM_Base_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d104      	bne.n	8000ef6 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_InitTick+0x90>)
 8000eee:	f003 f863 	bl	8003fb8 <HAL_TIM_Base_Start_IT>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3730      	adds	r7, #48	; 0x30
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	431bde83 	.word	0x431bde83
 8000f04:	200004b4 	.word	0x200004b4
 8000f08:	40014800 	.word	0x40014800

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <HardFault_Handler+0x4>

08000f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <MemManage_Handler+0x4>

08000f26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <DMA1_Channel1_IRQHandler+0x14>)
 8000f72:	f000 fd05 	bl	8001980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  DMA_IRQHandler();
 8000f76:	f005 fe0b 	bl	8006b90 <DMA_IRQHandler>
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000013c 	.word	0x2000013c

08000f84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f8a:	f003 f874 	bl	8004076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000474 	.word	0x20000474

08000f98 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000f9e:	f003 f86a 	bl	8004076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  simpleTimer_IRQHandler(&htim17);
 8000fa2:	4802      	ldr	r0, [pc, #8]	; (8000fac <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000fa4:	f006 f9ba 	bl	800731c <simpleTimer_IRQHandler>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200004b4 	.word	0x200004b4

08000fb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  drv_timer_IRQHandler(&htim2);
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <TIM2_IRQHandler+0x14>)
 8000fb6:	f005 ff49 	bl	8006e4c <drv_timer_IRQHandler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fba:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <TIM2_IRQHandler+0x14>)
 8000fbc:	f003 f85b 	bl	8004076 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200001c0 	.word	0x200001c0

08000fc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <USART1_IRQHandler+0x14>)
 8000fce:	f003 ffbd 	bl	8004f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  drv_uart_IRQHandler();
 8000fd2:	f006 f923 	bl	800721c <drv_uart_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000008c 	.word	0x2000008c

08000fe0 <SPI1_IRQHandler>:

/* USER CODE BEGIN 1 */


void SPI1_IRQHandler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  //drv_SPI_IRQHandler();
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <SystemInit+0xa0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <SystemInit+0xa0>)
 8000ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001000:	4a23      	ldr	r2, [pc, #140]	; (8001090 <SystemInit+0xa0>)
 8001002:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001006:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800100a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800101a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800101e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001022:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <SystemInit+0xa4>)
 8001030:	4013      	ands	r3, r2
 8001032:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001040:	f023 0305 	bic.w	r3, r3, #5
 8001044:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800105c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <SystemInit+0xa8>)
 8001062:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <SystemInit+0xa8>)
 800106a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800107c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00
 8001094:	faf6fefb 	.word	0xfaf6fefb
 8001098:	22041000 	.word	0x22041000

0800109c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80010a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	4a47      	ldr	r2, [pc, #284]	; (80011cc <SystemCoreClockUpdate+0x130>)
 80010b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b0c      	cmp	r3, #12
 80010c2:	d867      	bhi.n	8001194 <SystemCoreClockUpdate+0xf8>
 80010c4:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <SystemCoreClockUpdate+0x30>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	08001101 	.word	0x08001101
 80010d0:	08001195 	.word	0x08001195
 80010d4:	08001195 	.word	0x08001195
 80010d8:	08001195 	.word	0x08001195
 80010dc:	08001109 	.word	0x08001109
 80010e0:	08001195 	.word	0x08001195
 80010e4:	08001195 	.word	0x08001195
 80010e8:	08001195 	.word	0x08001195
 80010ec:	08001111 	.word	0x08001111
 80010f0:	08001195 	.word	0x08001195
 80010f4:	08001195 	.word	0x08001195
 80010f8:	08001195 	.word	0x08001195
 80010fc:	08001119 	.word	0x08001119
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001100:	4a33      	ldr	r2, [pc, #204]	; (80011d0 <SystemCoreClockUpdate+0x134>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	6013      	str	r3, [r2, #0]
      break;
 8001106:	e049      	b.n	800119c <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <SystemCoreClockUpdate+0x134>)
 800110a:	4a32      	ldr	r2, [pc, #200]	; (80011d4 <SystemCoreClockUpdate+0x138>)
 800110c:	601a      	str	r2, [r3, #0]
      break;
 800110e:	e045      	b.n	800119c <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <SystemCoreClockUpdate+0x134>)
 8001112:	4a31      	ldr	r2, [pc, #196]	; (80011d8 <SystemCoreClockUpdate+0x13c>)
 8001114:	601a      	str	r2, [r3, #0]
      break;
 8001116:	e041      	b.n	800119c <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	3301      	adds	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d105      	bne.n	8001146 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 800113a:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <SystemCoreClockUpdate+0x138>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e00d      	b.n	8001162 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d105      	bne.n	8001158 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <SystemCoreClockUpdate+0x13c>)
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	fbb2 f3f3 	udiv	r3, r2, r3
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e004      	b.n	8001162 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0f5b      	lsrs	r3, r3, #29
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	3301      	adds	r3, #1
 8001184:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <SystemCoreClockUpdate+0x134>)
 8001190:	6013      	str	r3, [r2, #0]
      break;
 8001192:	e003      	b.n	800119c <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001194:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <SystemCoreClockUpdate+0x134>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	6013      	str	r3, [r2, #0]
      break;
 800119a:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <SystemCoreClockUpdate+0x140>)
 80011aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ae:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <SystemCoreClockUpdate+0x134>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <SystemCoreClockUpdate+0x134>)
 80011bc:	6013      	str	r3, [r2, #0]

}
 80011be:	bf00      	nop
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	08007494 	.word	0x08007494
 80011d0:	20000014 	.word	0x20000014
 80011d4:	00f42400 	.word	0x00f42400
 80011d8:	01e84800 	.word	0x01e84800
 80011dc:	08007434 	.word	0x08007434

080011e0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80011e0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e4:	3304      	adds	r3, #4

080011e6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80011ea:	d3f9      	bcc.n	80011e0 <CopyDataInit>
  bx lr
 80011ec:	4770      	bx	lr

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80011ee:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80011f0:	3004      	adds	r0, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80011f2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>
  bx lr
 80011f6:	4770      	bx	lr

080011f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80011fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <LoopForever+0x8>)
 80011fe:	490d      	ldr	r1, [pc, #52]	; (8001234 <LoopForever+0xc>)
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <LoopForever+0x10>)
 8001202:	2300      	movs	r3, #0
 8001204:	f7ff ffef 	bl	80011e6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <LoopForever+0x14>)
 800120a:	490d      	ldr	r1, [pc, #52]	; (8001240 <LoopForever+0x18>)
 800120c:	2300      	movs	r3, #0
 800120e:	f7ff fff0 	bl	80011f2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001212:	480c      	ldr	r0, [pc, #48]	; (8001244 <LoopForever+0x1c>)
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <LoopForever+0x20>)
 8001216:	2300      	movs	r3, #0
 8001218:	f7ff ffeb 	bl	80011f2 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800121c:	f7ff fee8 	bl	8000ff0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001220:	f006 f8aa 	bl	8007378 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001224:	f7ff f9d9 	bl	80005da <main>

08001228 <LoopForever>:

LoopForever:
  b LoopForever
 8001228:	e7fe      	b.n	8001228 <LoopForever>
 800122a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800122c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001230:	20000004 	.word	0x20000004
 8001234:	20000020 	.word	0x20000020
 8001238:	080074e4 	.word	0x080074e4
  INIT_BSS _sbss, _ebss
 800123c:	20000020 	.word	0x20000020
 8001240:	200004f8 	.word	0x200004f8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001244:	20030000 	.word	0x20030000
 8001248:	20030000 	.word	0x20030000

0800124c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_Init+0x3c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_Init+0x3c>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001266:	2003      	movs	r0, #3
 8001268:	f000 f8eb 	bl	8001442 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff fe01 	bl	8000e74 <HAL_InitTick>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	e001      	b.n	8001282 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127e:	f7ff fcdb 	bl	8000c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001282:	79fb      	ldrb	r3, [r7, #7]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	58004000 	.word	0x58004000

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000001c 	.word	0x2000001c
 80012b4:	200004f4 	.word	0x200004f4

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	200004f4 	.word	0x200004f4

080012d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTickPrio+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000018 	.word	0x20000018

080012e8 <__NVIC_SetPriorityGrouping>:
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001304:	4013      	ands	r3, r2
 8001306:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <__NVIC_SetPriorityGrouping+0x44>)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	60d3      	str	r3, [r2, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_GetPriorityGrouping>:
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__NVIC_GetPriorityGrouping+0x18>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0a1b      	lsrs	r3, r3, #8
 800133a:	f003 0307 	and.w	r3, r3, #7
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_EnableIRQ>:
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db0b      	blt.n	8001376 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 021f 	and.w	r2, r3, #31
 8001364:	4907      	ldr	r1, [pc, #28]	; (8001384 <__NVIC_EnableIRQ+0x38>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	095b      	lsrs	r3, r3, #5
 800136c:	2001      	movs	r0, #1
 800136e:	fa00 f202 	lsl.w	r2, r0, r2
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100

08001388 <__NVIC_SetPriority>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	db0a      	blt.n	80013b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <__NVIC_SetPriority+0x4c>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	0112      	lsls	r2, r2, #4
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	440b      	add	r3, r1
 80013ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013b0:	e00a      	b.n	80013c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <__NVIC_SetPriority+0x50>)
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	3b04      	subs	r3, #4
 80013c0:	0112      	lsls	r2, r2, #4
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	440b      	add	r3, r1
 80013c6:	761a      	strb	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e100 	.word	0xe000e100
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f1c3 0307 	rsb	r3, r3, #7
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	bf28      	it	cs
 80013fa:	2304      	movcs	r3, #4
 80013fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3304      	adds	r3, #4
 8001402:	2b06      	cmp	r3, #6
 8001404:	d902      	bls.n	800140c <NVIC_EncodePriority+0x30>
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3b03      	subs	r3, #3
 800140a:	e000      	b.n	800140e <NVIC_EncodePriority+0x32>
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43da      	mvns	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	401a      	ands	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001424:	f04f 31ff 	mov.w	r1, #4294967295
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	43d9      	mvns	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	4313      	orrs	r3, r2
         );
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff4c 	bl	80012e8 <__NVIC_SetPriorityGrouping>
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001466:	f7ff ff63 	bl	8001330 <__NVIC_GetPriorityGrouping>
 800146a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	6978      	ldr	r0, [r7, #20]
 8001472:	f7ff ffb3 	bl	80013dc <NVIC_EncodePriority>
 8001476:	4602      	mov	r2, r0
 8001478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff82 	bl	8001388 <__NVIC_SetPriority>
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff56 	bl	800134c <__NVIC_EnableIRQ>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e054      	b.n	8001564 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	7f5b      	ldrb	r3, [r3, #29]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff fbbc 	bl	8000c48 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2202      	movs	r2, #2
 80014d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	791b      	ldrb	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a22      	ldr	r2, [pc, #136]	; (800156c <HAL_CRC_Init+0xc4>)
 80014e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0218 	bic.w	r2, r2, #24
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	e00c      	b.n	8001512 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6899      	ldr	r1, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	461a      	mov	r2, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f834 	bl	8001570 <HAL_CRCEx_Polynomial_Set>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e028      	b.n	8001564 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	795b      	ldrb	r3, [r3, #5]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d105      	bne.n	8001526 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f04f 32ff 	mov.w	r2, #4294967295
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	e004      	b.n	8001530 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6912      	ldr	r2, [r2, #16]
 800152e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	04c11db7 	.word	0x04c11db7

08001570 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001580:	231f      	movs	r3, #31
 8001582:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001584:	bf00      	nop
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	613a      	str	r2, [r7, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d009      	beq.n	80015a4 <HAL_CRCEx_Polynomial_Set+0x34>
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b18      	cmp	r3, #24
 80015a8:	d846      	bhi.n	8001638 <HAL_CRCEx_Polynomial_Set+0xc8>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	0800163f 	.word	0x0800163f
 80015b4:	08001639 	.word	0x08001639
 80015b8:	08001639 	.word	0x08001639
 80015bc:	08001639 	.word	0x08001639
 80015c0:	08001639 	.word	0x08001639
 80015c4:	08001639 	.word	0x08001639
 80015c8:	08001639 	.word	0x08001639
 80015cc:	08001639 	.word	0x08001639
 80015d0:	0800162d 	.word	0x0800162d
 80015d4:	08001639 	.word	0x08001639
 80015d8:	08001639 	.word	0x08001639
 80015dc:	08001639 	.word	0x08001639
 80015e0:	08001639 	.word	0x08001639
 80015e4:	08001639 	.word	0x08001639
 80015e8:	08001639 	.word	0x08001639
 80015ec:	08001639 	.word	0x08001639
 80015f0:	08001621 	.word	0x08001621
 80015f4:	08001639 	.word	0x08001639
 80015f8:	08001639 	.word	0x08001639
 80015fc:	08001639 	.word	0x08001639
 8001600:	08001639 	.word	0x08001639
 8001604:	08001639 	.word	0x08001639
 8001608:	08001639 	.word	0x08001639
 800160c:	08001639 	.word	0x08001639
 8001610:	08001615 	.word	0x08001615
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	2b06      	cmp	r3, #6
 8001618:	d913      	bls.n	8001642 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800161e:	e010      	b.n	8001642 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b07      	cmp	r3, #7
 8001624:	d90f      	bls.n	8001646 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800162a:	e00c      	b.n	8001646 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	d90b      	bls.n	800164a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001636:	e008      	b.n	800164a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	75fb      	strb	r3, [r7, #23]
      break;
 800163c:	e006      	b.n	800164c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800163e:	bf00      	nop
 8001640:	e004      	b.n	800164c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001642:	bf00      	nop
 8001644:	e002      	b.n	800164c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001646:	bf00      	nop
 8001648:	e000      	b.n	800164c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800164a:	bf00      	nop
  }
  if (status == HAL_OK)
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10d      	bne.n	800166e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f023 0118 	bic.w	r1, r3, #24
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	430a      	orrs	r2, r1
 800166c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800166e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001670:	4618      	mov	r0, r3
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e08d      	b.n	80017aa <HAL_DMA_Init+0x12e>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	4b47      	ldr	r3, [pc, #284]	; (80017b4 <HAL_DMA_Init+0x138>)
 8001696:	429a      	cmp	r2, r3
 8001698:	d80f      	bhi.n	80016ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <HAL_DMA_Init+0x13c>)
 80016a2:	4413      	add	r3, r2
 80016a4:	4a45      	ldr	r2, [pc, #276]	; (80017bc <HAL_DMA_Init+0x140>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	009a      	lsls	r2, r3, #2
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a42      	ldr	r2, [pc, #264]	; (80017c0 <HAL_DMA_Init+0x144>)
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
 80016b8:	e00e      	b.n	80016d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	4b40      	ldr	r3, [pc, #256]	; (80017c4 <HAL_DMA_Init+0x148>)
 80016c2:	4413      	add	r3, r2
 80016c4:	4a3d      	ldr	r2, [pc, #244]	; (80017bc <HAL_DMA_Init+0x140>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	009a      	lsls	r2, r3, #2
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a3c      	ldr	r2, [pc, #240]	; (80017c8 <HAL_DMA_Init+0x14c>)
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fa16 	bl	8001b5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001738:	d102      	bne.n	8001740 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001754:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d010      	beq.n	8001780 <HAL_DMA_Init+0x104>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b04      	cmp	r3, #4
 8001764:	d80c      	bhi.n	8001780 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fa36 	bl	8001bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	e008      	b.n	8001792 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40020407 	.word	0x40020407
 80017b8:	bffdfff8 	.word	0xbffdfff8
 80017bc:	cccccccd 	.word	0xcccccccd
 80017c0:	40020000 	.word	0x40020000
 80017c4:	bffdfbf8 	.word	0xbffdfbf8
 80017c8:	40020400 	.word	0x40020400

080017cc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_DMA_Start_IT+0x20>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e066      	b.n	80018ba <HAL_DMA_Start_IT+0xee>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d155      	bne.n	80018ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2202      	movs	r2, #2
 8001804:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0201 	bic.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 f95a 	bl	8001ade <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	2b00      	cmp	r3, #0
 8001830:	d008      	beq.n	8001844 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 020e 	orr.w	r2, r2, #14
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	e00f      	b.n	8001864 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0204 	bic.w	r2, r2, #4
 8001852:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 020a 	orr.w	r2, r2, #10
 8001862:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001880:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001898:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0201 	orr.w	r2, r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e005      	b.n	80018b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80018b4:	2302      	movs	r3, #2
 80018b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d005      	beq.n	80018e6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2204      	movs	r2, #4
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e047      	b.n	8001976 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 020e 	bic.w	r2, r2, #14
 80018f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001914:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f003 021c 	and.w	r2, r3, #28
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001932:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00c      	beq.n	8001956 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001946:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800194a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001954:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	4798      	blx	r3
    }
  }
  return status;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	f003 031c 	and.w	r3, r3, #28
 80019a0:	2204      	movs	r2, #4
 80019a2:	409a      	lsls	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d026      	beq.n	80019fa <HAL_DMA_IRQHandler+0x7a>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d021      	beq.n	80019fa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d107      	bne.n	80019d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0204 	bic.w	r2, r2, #4
 80019d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f003 021c 	and.w	r2, r3, #28
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	2104      	movs	r1, #4
 80019e2:	fa01 f202 	lsl.w	r2, r1, r2
 80019e6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d071      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80019f8:	e06c      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f003 031c 	and.w	r3, r3, #28
 8001a02:	2202      	movs	r2, #2
 8001a04:	409a      	lsls	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d02e      	beq.n	8001a6c <HAL_DMA_IRQHandler+0xec>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d029      	beq.n	8001a6c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0320 	and.w	r3, r3, #32
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10b      	bne.n	8001a3e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 020a 	bic.w	r2, r2, #10
 8001a34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f003 021c 	and.w	r2, r3, #28
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d038      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a6a:	e033      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	f003 031c 	and.w	r3, r3, #28
 8001a74:	2208      	movs	r2, #8
 8001a76:	409a      	lsls	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d02a      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x156>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d025      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 020e 	bic.w	r2, r2, #14
 8001a98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f003 021c 	and.w	r2, r3, #28
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d004      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
}
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001af4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b06:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	f003 021c 	and.w	r2, r3, #28
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b10      	cmp	r3, #16
 8001b2a:	d108      	bne.n	8001b3e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b3c:	e007      	b.n	8001b4e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	60da      	str	r2, [r3, #12]
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d80a      	bhi.n	8001b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b7c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6493      	str	r3, [r2, #72]	; 0x48
 8001b84:	e007      	b.n	8001b96 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	009a      	lsls	r2, r3, #2
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b90:	4413      	add	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	3b08      	subs	r3, #8
 8001b9e:	4a0c      	ldr	r2, [pc, #48]	; (8001bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 031c 	and.w	r3, r3, #28
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40020407 	.word	0x40020407
 8001bcc:	4002081c 	.word	0x4002081c
 8001bd0:	cccccccd 	.word	0xcccccccd
 8001bd4:	40020880 	.word	0x40020880

08001bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bfa:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2201      	movs	r2, #1
 8001c06:	409a      	lsls	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	1000823f 	.word	0x1000823f
 8001c1c:	40020940 	.word	0x40020940

08001c20 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2e:	e14c      	b.n	8001eca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2101      	movs	r1, #1
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 813e 	beq.w	8001ec4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d00b      	beq.n	8001c68 <HAL_GPIO_Init+0x48>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d007      	beq.n	8001c68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5c:	2b11      	cmp	r3, #17
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b12      	cmp	r3, #18
 8001c66:	d130      	bne.n	8001cca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f003 0201 	and.w	r2, r3, #1
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0xea>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b12      	cmp	r3, #18
 8001d08:	d123      	bne.n	8001d52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	08da      	lsrs	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3208      	adds	r2, #8
 8001d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	08da      	lsrs	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3208      	adds	r2, #8
 8001d4c:	6939      	ldr	r1, [r7, #16]
 8001d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0203 	and.w	r2, r3, #3
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8098 	beq.w	8001ec4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d94:	4a54      	ldr	r2, [pc, #336]	; (8001ee8 <HAL_GPIO_Init+0x2c8>)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dbe:	d019      	beq.n	8001df4 <HAL_GPIO_Init+0x1d4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a4a      	ldr	r2, [pc, #296]	; (8001eec <HAL_GPIO_Init+0x2cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d013      	beq.n	8001df0 <HAL_GPIO_Init+0x1d0>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a49      	ldr	r2, [pc, #292]	; (8001ef0 <HAL_GPIO_Init+0x2d0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00d      	beq.n	8001dec <HAL_GPIO_Init+0x1cc>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a48      	ldr	r2, [pc, #288]	; (8001ef4 <HAL_GPIO_Init+0x2d4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d007      	beq.n	8001de8 <HAL_GPIO_Init+0x1c8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a47      	ldr	r2, [pc, #284]	; (8001ef8 <HAL_GPIO_Init+0x2d8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d101      	bne.n	8001de4 <HAL_GPIO_Init+0x1c4>
 8001de0:	2304      	movs	r3, #4
 8001de2:	e008      	b.n	8001df6 <HAL_GPIO_Init+0x1d6>
 8001de4:	2307      	movs	r3, #7
 8001de6:	e006      	b.n	8001df6 <HAL_GPIO_Init+0x1d6>
 8001de8:	2303      	movs	r3, #3
 8001dea:	e004      	b.n	8001df6 <HAL_GPIO_Init+0x1d6>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e002      	b.n	8001df6 <HAL_GPIO_Init+0x1d6>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_GPIO_Init+0x1d6>
 8001df4:	2300      	movs	r3, #0
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	f002 0203 	and.w	r2, r2, #3
 8001dfc:	0092      	lsls	r2, r2, #2
 8001dfe:	4093      	lsls	r3, r2
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e06:	4938      	ldr	r1, [pc, #224]	; (8001ee8 <HAL_GPIO_Init+0x2c8>)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e14:	4b39      	ldr	r3, [pc, #228]	; (8001efc <HAL_GPIO_Init+0x2dc>)
 8001e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e3a:	4a30      	ldr	r2, [pc, #192]	; (8001efc <HAL_GPIO_Init+0x2dc>)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001e42:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <HAL_GPIO_Init+0x2dc>)
 8001e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e68:	4a24      	ldr	r2, [pc, #144]	; (8001efc <HAL_GPIO_Init+0x2dc>)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e70:	4b22      	ldr	r3, [pc, #136]	; (8001efc <HAL_GPIO_Init+0x2dc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <HAL_GPIO_Init+0x2dc>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_GPIO_Init+0x2dc>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_GPIO_Init+0x2dc>)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f47f aeab 	bne.w	8001c30 <HAL_GPIO_Init+0x10>
  }
}
 8001eda:	bf00      	nop
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	48000400 	.word	0x48000400
 8001ef0:	48000800 	.word	0x48000800
 8001ef4:	48000c00 	.word	0x48000c00
 8001ef8:	48001000 	.word	0x48001000
 8001efc:	58000800 	.word	0x58000800

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f32:	b08b      	sub	sp, #44	; 0x2c
 8001f34:	af06      	add	r7, sp, #24
 8001f36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0ad      	b.n	800209e <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe ff42 	bl	8000de0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2203      	movs	r2, #3
 8001f60:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 fd97 	bl	8006a9c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
 8001f72:	e035      	b.n	8001fe0 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	015b      	lsls	r3, r3, #5
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3329      	adds	r3, #41	; 0x29
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	015b      	lsls	r3, r3, #5
 8001f88:	4413      	add	r3, r2
 8001f8a:	3328      	adds	r3, #40	; 0x28
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	b291      	uxth	r1, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	015b      	lsls	r3, r3, #5
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3336      	adds	r3, #54	; 0x36
 8001f9e:	460a      	mov	r2, r1
 8001fa0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	015b      	lsls	r3, r3, #5
 8001fa8:	4413      	add	r3, r2
 8001faa:	332b      	adds	r3, #43	; 0x2b
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	015b      	lsls	r3, r3, #5
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3338      	adds	r3, #56	; 0x38
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	015b      	lsls	r3, r3, #5
 8001fc4:	4413      	add	r3, r2
 8001fc6:	333c      	adds	r3, #60	; 0x3c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	015b      	lsls	r3, r3, #5
 8001fd4:	4413      	add	r3, r2
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d3c4      	bcc.n	8001f74 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e031      	b.n	8002054 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	015b      	lsls	r3, r3, #5
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	015b      	lsls	r3, r3, #5
 8002006:	4413      	add	r3, r2
 8002008:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	015b      	lsls	r3, r3, #5
 8002016:	4413      	add	r3, r2
 8002018:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	015b      	lsls	r3, r3, #5
 8002026:	4413      	add	r3, r2
 8002028:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	015b      	lsls	r3, r3, #5
 8002036:	4413      	add	r3, r2
 8002038:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	330a      	adds	r3, #10
 8002046:	015b      	lsls	r3, r3, #5
 8002048:	4413      	add	r3, r2
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	3301      	adds	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	d3c8      	bcc.n	8001ff0 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	687e      	ldr	r6, [r7, #4]
 8002066:	466d      	mov	r5, sp
 8002068:	f106 0410 	add.w	r4, r6, #16
 800206c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	602b      	str	r3, [r5, #0]
 8002074:	1d33      	adds	r3, r6, #4
 8002076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002078:	6838      	ldr	r0, [r7, #0]
 800207a:	f004 fd2c 	bl	8006ad6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d102      	bne.n	800209c <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f805 	bl	80020a6 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020a6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b085      	sub	sp, #20
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	58000400 	.word	0x58000400

0800211c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <HAL_PWREx_GetVoltageRange+0x18>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	58000400 	.word	0x58000400

08002138 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800213c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800214a:	d101      	bne.n	8002150 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_RCC_HSE_EnableBypass>:
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800216a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_RCC_HSE_DisableBypass>:
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_RCC_HSE_Enable>:
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_RCC_HSE_Disable>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_RCC_HSE_IsReady>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021e6:	d101      	bne.n	80021ec <LL_RCC_HSE_IsReady+0x18>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <LL_RCC_HSE_IsReady+0x1a>
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_RCC_HSI_Enable>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80021fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_RCC_HSI_Disable>:
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002228:	6013      	str	r3, [r2, #0]
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_RCC_HSI_IsReady>:
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002246:	d101      	bne.n	800224c <LL_RCC_HSI_IsReady+0x18>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <LL_RCC_HSI_IsReady+0x1a>
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <LL_RCC_HSI48_Enable>:
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800228e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_RCC_HSI48_Disable>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80022a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <LL_RCC_HSI48_IsReady>:
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80022ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d101      	bne.n	80022de <LL_RCC_HSI48_IsReady+0x18>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <LL_RCC_HSI48_IsReady+0x1a>
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_RCC_LSE_Enable>:
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_RCC_LSE_Disable>:
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_RCC_LSE_EnableBypass>:
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_RCC_LSE_DisableBypass>:
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_RCC_LSE_IsReady>:
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d101      	bne.n	800238a <LL_RCC_LSE_IsReady+0x18>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <LL_RCC_LSE_IsReady+0x1a>
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_RCC_LSI1_Enable>:
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_RCC_LSI1_Disable>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_RCC_LSI1_IsReady>:
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80023de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d101      	bne.n	80023f2 <LL_RCC_LSI1_IsReady+0x18>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <LL_RCC_LSI1_IsReady+0x1a>
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_RCC_LSI2_Enable>:
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <LL_RCC_LSI2_Disable>:
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <LL_RCC_LSI2_IsReady>:
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b08      	cmp	r3, #8
 8002454:	d101      	bne.n	800245a <LL_RCC_LSI2_IsReady+0x18>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <LL_RCC_LSI2_IsReady+0x1a>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <LL_RCC_LSI2_SetTrimming>:
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002476:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_RCC_MSI_Enable>:
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_RCC_MSI_Disable>:
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	6013      	str	r3, [r2, #0]
}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_RCC_MSI_IsReady>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80024d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d101      	bne.n	80024e6 <LL_RCC_MSI_IsReady+0x16>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <LL_RCC_MSI_IsReady+0x18>
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_RCC_MSI_SetRange>:
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_RCC_MSI_GetRange>:
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2bb0      	cmp	r3, #176	; 0xb0
 8002530:	d901      	bls.n	8002536 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002532:	23b0      	movs	r3, #176	; 0xb0
 8002534:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002536:	687b      	ldr	r3, [r7, #4]
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800254c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_RCC_SetSysClkSource>:
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 0203 	bic.w	r2, r3, #3
 8002580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_RCC_GetSysClkSource>:
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 030c 	and.w	r3, r3, #12
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_RCC_SetAHBPrescaler>:
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80025b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80025de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_RCC_SetAHB4Prescaler>:
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002612:	f023 020f 	bic.w	r2, r3, #15
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_RCC_SetAPB1Prescaler>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_RCC_SetAPB2Prescaler>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800266a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4313      	orrs	r3, r2
 8002672:	608b      	str	r3, [r1, #8]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_RCC_GetAHBPrescaler>:
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_C2_RCC_GetAHBPrescaler>:
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 800269c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_RCC_GetAHB4Prescaler>:
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <LL_RCC_GetAPB1Prescaler>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_RCC_GetAPB2Prescaler>:
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002710:	6013      	str	r3, [r2, #0]
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800272a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800273e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800274c:	d101      	bne.n	8002752 <LL_RCC_PLL_IsReady+0x18>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <LL_RCC_PLL_IsReady+0x1a>
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800277c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80027ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 0303 	and.w	r3, r3, #3
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d2:	d101      	bne.n	80027d8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027f8:	d101      	bne.n	80027fe <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800280e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002812:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281e:	d101      	bne.n	8002824 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002842:	d101      	bne.n	8002848 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002862:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002866:	d101      	bne.n	800286c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b08d      	sub	sp, #52	; 0x34
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e386      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 808f 	beq.w	80029b6 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002898:	f7ff fe7d 	bl	8002596 <LL_RCC_GetSysClkSource>
 800289c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800289e:	f7ff ff83 	bl	80027a8 <LL_RCC_PLL_GetMainSource>
 80028a2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_RCC_OscConfig+0x3e>
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	2b0c      	cmp	r3, #12
 80028ae:	d149      	bne.n	8002944 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d146      	bne.n	8002944 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028b6:	f7ff fe0b 	bl	80024d0 <LL_RCC_MSI_IsReady>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_OscConfig+0x54>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e365      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80028d0:	f7ff fe23 	bl	800251a <LL_RCC_MSI_GetRange>
 80028d4:	4603      	mov	r3, r0
 80028d6:	429c      	cmp	r4, r3
 80028d8:	d914      	bls.n	8002904 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fd76 	bl	80033d0 <RCC_SetFlashLatencyFromMSIRange>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e354      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fdfd 	bl	80024f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fe21 	bl	8002544 <LL_RCC_MSI_SetCalibTrimming>
 8002902:	e013      	b.n	800292c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fdf2 	bl	80024f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fe16 	bl	8002544 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fd57 	bl	80033d0 <RCC_SetFlashLatencyFromMSIRange>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e335      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800292c:	f7fe fbb6 	bl	800109c <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002930:	4bb4      	ldr	r3, [pc, #720]	; (8002c04 <HAL_RCC_OscConfig+0x38c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fa9d 	bl	8000e74 <HAL_InitTick>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d039      	beq.n	80029b4 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e329      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01e      	beq.n	800298a <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800294c:	f7ff fda2 	bl	8002494 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002950:	f7fe fcb2 	bl	80012b8 <HAL_GetTick>
 8002954:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002958:	f7fe fcae 	bl	80012b8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e316      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 800296a:	f7ff fdb1 	bl	80024d0 <LL_RCC_MSI_IsReady>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f1      	beq.n	8002958 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fdba 	bl	80024f2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fdde 	bl	8002544 <LL_RCC_MSI_SetCalibTrimming>
 8002988:	e015      	b.n	80029b6 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800298a:	f7ff fd92 	bl	80024b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800298e:	f7fe fc93 	bl	80012b8 <HAL_GetTick>
 8002992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002996:	f7fe fc8f 	bl	80012b8 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e2f7      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 80029a8:	f7ff fd92 	bl	80024d0 <LL_RCC_MSI_IsReady>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f1      	bne.n	8002996 <HAL_RCC_OscConfig+0x11e>
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d05a      	beq.n	8002a78 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c2:	f7ff fde8 	bl	8002596 <LL_RCC_GetSysClkSource>
 80029c6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c8:	f7ff feee 	bl	80027a8 <LL_RCC_PLL_GetMainSource>
 80029cc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x168>
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d10d      	bne.n	80029f6 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d10a      	bne.n	80029f6 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	f7ff fbf8 	bl	80021d4 <LL_RCC_HSE_IsReady>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d045      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1fe>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d141      	bne.n	8002a76 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e2d0      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fe:	d102      	bne.n	8002a06 <HAL_RCC_OscConfig+0x18e>
 8002a00:	f7ff fbca 	bl	8002198 <LL_RCC_HSE_Enable>
 8002a04:	e00d      	b.n	8002a22 <HAL_RCC_OscConfig+0x1aa>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a0e:	d104      	bne.n	8002a1a <HAL_RCC_OscConfig+0x1a2>
 8002a10:	f7ff fba4 	bl	800215c <LL_RCC_HSE_EnableBypass>
 8002a14:	f7ff fbc0 	bl	8002198 <LL_RCC_HSE_Enable>
 8002a18:	e003      	b.n	8002a22 <HAL_RCC_OscConfig+0x1aa>
 8002a1a:	f7ff fbcc 	bl	80021b6 <LL_RCC_HSE_Disable>
 8002a1e:	f7ff fbac 	bl	800217a <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d012      	beq.n	8002a50 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fc45 	bl	80012b8 <HAL_GetTick>
 8002a2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a32:	f7fe fc41 	bl	80012b8 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b64      	cmp	r3, #100	; 0x64
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e2a9      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002a44:	f7ff fbc6 	bl	80021d4 <LL_RCC_HSE_IsReady>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f1      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1ba>
 8002a4e:	e013      	b.n	8002a78 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fc32 	bl	80012b8 <HAL_GetTick>
 8002a54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a58:	f7fe fc2e 	bl	80012b8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	; 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e296      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a6a:	f7ff fbb3 	bl	80021d4 <LL_RCC_HSE_IsReady>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f1      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1e0>
 8002a74:	e000      	b.n	8002a78 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a76:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d051      	beq.n	8002b28 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a84:	f7ff fd87 	bl	8002596 <LL_RCC_GetSysClkSource>
 8002a88:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a8a:	f7ff fe8d 	bl	80027a8 <LL_RCC_PLL_GetMainSource>
 8002a8e:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d005      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x22a>
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d113      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d110      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa2:	f7ff fbc7 	bl	8002234 <LL_RCC_HSI_IsReady>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x240>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e26f      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fbcb 	bl	8002258 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac2:	e031      	b.n	8002b28 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d019      	beq.n	8002b00 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002acc:	f7ff fb94 	bl	80021f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fbf2 	bl	80012b8 <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fbee 	bl	80012b8 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e256      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002aea:	f7ff fba3 	bl	8002234 <LL_RCC_HSI_IsReady>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f1      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fbad 	bl	8002258 <LL_RCC_HSI_SetCalibTrimming>
 8002afe:	e013      	b.n	8002b28 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b00:	f7ff fb89 	bl	8002216 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fbd8 	bl	80012b8 <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0c:	f7fe fbd4 	bl	80012b8 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e23c      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b1e:	f7ff fb89 	bl	8002234 <LL_RCC_HSI_IsReady>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f1      	bne.n	8002b0c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a2 	beq.w	8002c86 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d075      	beq.n	8002c36 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d046      	beq.n	8002be4 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002b56:	f7ff fc40 	bl	80023da <LL_RCC_LSI1_IsReady>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d113      	bne.n	8002b88 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002b60:	f7ff fc19 	bl	8002396 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b64:	f7fe fba8 	bl	80012b8 <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b6c:	f7fe fba4 	bl	80012b8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e20c      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002b7e:	f7ff fc2c 	bl	80023da <LL_RCC_LSI1_IsReady>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f1      	beq.n	8002b6c <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002b88:	f7ff fc39 	bl	80023fe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fb94 	bl	80012b8 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002b94:	f7fe fb90 	bl	80012b8 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1f8      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002ba6:	f7ff fc4c 	bl	8002442 <LL_RCC_LSI2_IsReady>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f1      	beq.n	8002b94 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fc56 	bl	8002466 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002bba:	f7ff fbfd 	bl	80023b8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fb7b 	bl	80012b8 <HAL_GetTick>
 8002bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002bc6:	f7fe fb77 	bl	80012b8 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e1df      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002bd8:	f7ff fbff 	bl	80023da <LL_RCC_LSI1_IsReady>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f1      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x34e>
 8002be2:	e050      	b.n	8002c86 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002be4:	f7ff fbd7 	bl	8002396 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe fb66 	bl	80012b8 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002bf0:	f7fe fb62 	bl	80012b8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d904      	bls.n	8002c08 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1ca      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
 8002c02:	bf00      	nop
 8002c04:	20000018 	.word	0x20000018
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002c08:	f7ff fbe7 	bl	80023da <LL_RCC_LSI1_IsReady>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0ee      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002c12:	f7ff fc05 	bl	8002420 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c18:	f7fe fb4e 	bl	80012b8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1b6      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002c2a:	f7ff fc0a 	bl	8002442 <LL_RCC_LSI2_IsReady>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f1      	bne.n	8002c18 <HAL_RCC_OscConfig+0x3a0>
 8002c34:	e027      	b.n	8002c86 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002c36:	f7ff fbf3 	bl	8002420 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fb3d 	bl	80012b8 <HAL_GetTick>
 8002c3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c42:	f7fe fb39 	bl	80012b8 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e1a1      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002c54:	f7ff fbf5 	bl	8002442 <LL_RCC_LSI2_IsReady>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f1      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002c5e:	f7ff fbab 	bl	80023b8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c62:	f7fe fb29 	bl	80012b8 <HAL_GetTick>
 8002c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c6a:	f7fe fb25 	bl	80012b8 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e18d      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002c7c:	f7ff fbad 	bl	80023da <LL_RCC_LSI1_IsReady>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f1      	bne.n	8002c6a <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d05b      	beq.n	8002d4a <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c92:	4bb5      	ldr	r3, [pc, #724]	; (8002f68 <HAL_RCC_OscConfig+0x6f0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d114      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c9e:	f7ff fa2d 	bl	80020fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fb09 	bl	80012b8 <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7fe fb05 	bl	80012b8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e16d      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cbc:	4baa      	ldr	r3, [pc, #680]	; (8002f68 <HAL_RCC_OscConfig+0x6f0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d102      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x45e>
 8002cd0:	f7ff fb0b 	bl	80022ea <LL_RCC_LSE_Enable>
 8002cd4:	e00c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x478>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d104      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x470>
 8002cde:	f7ff fb26 	bl	800232e <LL_RCC_LSE_EnableBypass>
 8002ce2:	f7ff fb02 	bl	80022ea <LL_RCC_LSE_Enable>
 8002ce6:	e003      	b.n	8002cf0 <HAL_RCC_OscConfig+0x478>
 8002ce8:	f7ff fb10 	bl	800230c <LL_RCC_LSE_Disable>
 8002cec:	f7ff fb30 	bl	8002350 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d014      	beq.n	8002d22 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf8:	f7fe fade 	bl	80012b8 <HAL_GetTick>
 8002cfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe fada 	bl	80012b8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e140      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002d16:	f7ff fb2c 	bl	8002372 <LL_RCC_LSE_IsReady>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ef      	beq.n	8002d00 <HAL_RCC_OscConfig+0x488>
 8002d20:	e013      	b.n	8002d4a <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fe fac9 	bl	80012b8 <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d28:	e00a      	b.n	8002d40 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fe fac5 	bl	80012b8 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e12b      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002d40:	f7ff fb17 	bl	8002372 <LL_RCC_LSE_IsReady>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ef      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d014      	beq.n	8002d88 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d5e:	f7ff fa90 	bl	8002282 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d62:	f7fe faa9 	bl	80012b8 <HAL_GetTick>
 8002d66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6a:	f7fe faa5 	bl	80012b8 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e10d      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002d7c:	f7ff faa3 	bl	80022c6 <LL_RCC_HSI48_IsReady>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f1      	beq.n	8002d6a <HAL_RCC_OscConfig+0x4f2>
 8002d86:	e013      	b.n	8002db0 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d88:	f7ff fa8c 	bl	80022a4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fa94 	bl	80012b8 <HAL_GetTick>
 8002d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d94:	f7fe fa90 	bl	80012b8 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0f8      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002da6:	f7ff fa8e 	bl	80022c6 <LL_RCC_HSI48_IsReady>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f1      	bne.n	8002d94 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80ee 	beq.w	8002f96 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dba:	f7ff fbec 	bl	8002596 <LL_RCC_GetSysClkSource>
 8002dbe:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	f040 80af 	bne.w	8002f30 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0203 	and.w	r2, r3, #3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d123      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d11c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d114      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d10d      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d106      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d05d      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d058      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0ab      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e40:	f7ff fc6c 	bl	800271c <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e44:	f7fe fa38 	bl	80012b8 <HAL_GetTick>
 8002e48:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe fa34 	bl	80012b8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e09c      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ef      	bne.n	8002e4c <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <HAL_RCC_OscConfig+0x6f4>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e7e:	4311      	orrs	r1, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e84:	0212      	lsls	r2, r2, #8
 8002e86:	4311      	orrs	r1, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e8c:	4311      	orrs	r1, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e92:	4311      	orrs	r1, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ea2:	f7ff fc2c 	bl	80026fe <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eb6:	f7fe f9ff 	bl	80012b8 <HAL_GetTick>
 8002eba:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7fe f9fb 	bl	80012b8 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e063      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0ef      	beq.n	8002ebe <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ede:	e05a      	b.n	8002f96 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e059      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d151      	bne.n	8002f96 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ef2:	f7ff fc04 	bl	80026fe <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f06:	f7fe f9d7 	bl	80012b8 <HAL_GetTick>
 8002f0a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe f9d3 	bl	80012b8 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e03b      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ef      	beq.n	8002f0e <HAL_RCC_OscConfig+0x696>
 8002f2e:	e032      	b.n	8002f96 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b0c      	cmp	r3, #12
 8002f34:	d02d      	beq.n	8002f92 <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f36:	f7ff fbf1 	bl	800271c <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f44:	f023 0303 	bic.w	r3, r3, #3
 8002f48:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f54:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe f9ab 	bl	80012b8 <HAL_GetTick>
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f64:	e00d      	b.n	8002f82 <HAL_RCC_OscConfig+0x70a>
 8002f66:	bf00      	nop
 8002f68:	58000400 	.word	0x58000400
 8002f6c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe f9a2 	bl	80012b8 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ef      	bne.n	8002f70 <HAL_RCC_OscConfig+0x6f8>
 8002f90:	e001      	b.n	8002f96 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3734      	adds	r7, #52	; 0x34
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd90      	pop	{r4, r7, pc}

08002fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e12a      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b97      	ldr	r3, [pc, #604]	; (8003214 <HAL_RCC_ClockConfig+0x274>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d91b      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b94      	ldr	r3, [pc, #592]	; (8003214 <HAL_RCC_ClockConfig+0x274>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 0207 	bic.w	r2, r3, #7
 8002fca:	4992      	ldr	r1, [pc, #584]	; (8003214 <HAL_RCC_ClockConfig+0x274>)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd2:	f7fe f971 	bl	80012b8 <HAL_GetTick>
 8002fd6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002fda:	f7fe f96d 	bl	80012b8 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e10e      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fec:	4b89      	ldr	r3, [pc, #548]	; (8003214 <HAL_RCC_ClockConfig+0x274>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d1ef      	bne.n	8002fda <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff facf 	bl	80025ae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003010:	f7fe f952 	bl	80012b8 <HAL_GetTick>
 8003014:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003018:	f7fe f94e 	bl	80012b8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0ef      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800302a:	f7ff fbc9 	bl	80027c0 <LL_RCC_IsActiveFlag_HPRE>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f1      	beq.n	8003018 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d016      	beq.n	800306e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fac6 	bl	80025d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800304a:	f7fe f935 	bl	80012b8 <HAL_GetTick>
 800304e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003052:	f7fe f931 	bl	80012b8 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e0d2      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003064:	f7ff fbbe 	bl	80027e4 <LL_RCC_IsActiveFlag_C2HPRE>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f1      	beq.n	8003052 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fabf 	bl	8002602 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003084:	f7fe f918 	bl	80012b8 <HAL_GetTick>
 8003088:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800308c:	f7fe f914 	bl	80012b8 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e0b5      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800309e:	f7ff fbb4 	bl	800280a <LL_RCC_IsActiveFlag_SHDHPRE>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f1      	beq.n	800308c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d016      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fab9 	bl	8002630 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030be:	f7fe f8fb 	bl	80012b8 <HAL_GetTick>
 80030c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030c6:	f7fe f8f7 	bl	80012b8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e098      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030d8:	f7ff fbaa 	bl	8002830 <LL_RCC_IsActiveFlag_PPRE1>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f1      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d017      	beq.n	800311e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff faaf 	bl	8002658 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030fa:	f7fe f8dd 	bl	80012b8 <HAL_GetTick>
 80030fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003102:	f7fe f8d9 	bl	80012b8 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e07a      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003114:	f7ff fb9e 	bl	8002854 <LL_RCC_IsActiveFlag_PPRE2>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f1      	beq.n	8003102 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d043      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d106      	bne.n	8003140 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003132:	f7ff f84f 	bl	80021d4 <LL_RCC_HSE_IsReady>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11e      	bne.n	800317a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e064      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d106      	bne.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003148:	f7ff faf7 	bl	800273a <LL_RCC_PLL_IsReady>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d113      	bne.n	800317a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e059      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800315e:	f7ff f9b7 	bl	80024d0 <LL_RCC_MSI_IsReady>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e04e      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800316c:	f7ff f862 	bl	8002234 <LL_RCC_HSI_IsReady>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e047      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f9f5 	bl	800256e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003184:	f7fe f898 	bl	80012b8 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318c:	f7fe f894 	bl	80012b8 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e033      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	f7ff f9f8 	bl	8002596 <LL_RCC_GetSysClkSource>
 80031a6:	4602      	mov	r2, r0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d1ec      	bne.n	800318c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_RCC_ClockConfig+0x274>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d21b      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <HAL_RCC_ClockConfig+0x274>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 0207 	bic.w	r2, r3, #7
 80031c8:	4912      	ldr	r1, [pc, #72]	; (8003214 <HAL_RCC_ClockConfig+0x274>)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fe f872 	bl	80012b8 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031d8:	f7fe f86e 	bl	80012b8 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e00f      	b.n	800320a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x274>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1ef      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80031f8:	f7fd ff50 	bl	800109c <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80031fc:	f7fe f868 	bl	80012d0 <HAL_GetTickPrio>
 8003200:	4603      	mov	r3, r0
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fe36 	bl	8000e74 <HAL_InitTick>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	58004000 	.word	0x58004000

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800321e:	f7ff f9ba 	bl	8002596 <LL_RCC_GetSysClkSource>
 8003222:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800322a:	f7ff f976 	bl	800251a <LL_RCC_MSI_GetRange>
 800322e:	4603      	mov	r3, r0
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e04a      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d102      	bne.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003246:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e044      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b08      	cmp	r3, #8
 8003250:	d10a      	bne.n	8003268 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003252:	f7fe ff71 	bl	8002138 <LL_RCC_HSE_IsEnabledDiv2>
 8003256:	4603      	mov	r3, r0
 8003258:	2b01      	cmp	r3, #1
 800325a:	d102      	bne.n	8003262 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e039      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003262:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	e036      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003268:	f7ff fa9e 	bl	80027a8 <LL_RCC_PLL_GetMainSource>
 800326c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d002      	beq.n	800327a <HAL_RCC_GetSysClockFreq+0x62>
 8003274:	2b03      	cmp	r3, #3
 8003276:	d003      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x68>
 8003278:	e00d      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800327c:	60bb      	str	r3, [r7, #8]
        break;
 800327e:	e015      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003280:	f7fe ff5a 	bl	8002138 <LL_RCC_HSE_IsEnabledDiv2>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d102      	bne.n	8003290 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800328a:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800328c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800328e:	e00d      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003292:	60bb      	str	r3, [r7, #8]
        break;
 8003294:	e00a      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003296:	f7ff f940 	bl	800251a <LL_RCC_MSI_GetRange>
 800329a:	4603      	mov	r3, r0
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a8:	60bb      	str	r3, [r7, #8]
        break;
 80032aa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80032ac:	f7ff fa57 	bl	800275e <LL_RCC_PLL_GetN>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	fb03 f402 	mul.w	r4, r3, r2
 80032b8:	f7ff fa6a 	bl	8002790 <LL_RCC_PLL_GetDivider>
 80032bc:	4603      	mov	r3, r0
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	3301      	adds	r3, #1
 80032c2:	fbb4 f4f3 	udiv	r4, r4, r3
 80032c6:	f7ff fa57 	bl	8002778 <LL_RCC_PLL_GetR>
 80032ca:	4603      	mov	r3, r0
 80032cc:	0f5b      	lsrs	r3, r3, #29
 80032ce:	3301      	adds	r3, #1
 80032d0:	fbb4 f3f3 	udiv	r3, r4, r3
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80032d6:	68fb      	ldr	r3, [r7, #12]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd90      	pop	{r4, r7, pc}
 80032e0:	08007494 	.word	0x08007494
 80032e4:	00f42400 	.word	0x00f42400
 80032e8:	01e84800 	.word	0x01e84800

080032ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ec:	b598      	push	{r3, r4, r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80032f0:	f7ff ff92 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80032f4:	4604      	mov	r4, r0
 80032f6:	f7ff f9c3 	bl	8002680 <LL_RCC_GetAHBPrescaler>
 80032fa:	4603      	mov	r3, r0
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	4a03      	ldr	r2, [pc, #12]	; (8003310 <HAL_RCC_GetHCLKFreq+0x24>)
 8003304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003308:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd98      	pop	{r3, r4, r7, pc}
 8003310:	08007434 	.word	0x08007434

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b598      	push	{r3, r4, r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003318:	f7ff ffe8 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 800331c:	4604      	mov	r4, r0
 800331e:	f7ff f9d6 	bl	80026ce <LL_RCC_GetAPB1Prescaler>
 8003322:	4603      	mov	r3, r0
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_RCC_GetPCLK1Freq+0x28>)
 800332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003338:	4618      	mov	r0, r3
 800333a:	bd98      	pop	{r3, r4, r7, pc}
 800333c:	08007474 	.word	0x08007474

08003340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003340:	b598      	push	{r3, r4, r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003344:	f7ff ffd2 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8003348:	4604      	mov	r4, r0
 800334a:	f7ff f9cc 	bl	80026e6 <LL_RCC_GetAPB2Prescaler>
 800334e:	4603      	mov	r3, r0
 8003350:	0adb      	lsrs	r3, r3, #11
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd98      	pop	{r3, r4, r7, pc}
 8003368:	08007474 	.word	0x08007474

0800336c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	226f      	movs	r2, #111	; 0x6f
 800337a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800337c:	f7ff f90b 	bl	8002596 <LL_RCC_GetSysClkSource>
 8003380:	4602      	mov	r2, r0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8003386:	f7ff f97b 	bl	8002680 <LL_RCC_GetAHBPrescaler>
 800338a:	4602      	mov	r2, r0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8003390:	f7ff f99d 	bl	80026ce <LL_RCC_GetAPB1Prescaler>
 8003394:	4602      	mov	r2, r0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800339a:	f7ff f9a4 	bl	80026e6 <LL_RCC_GetAPB2Prescaler>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80033a4:	f7ff f978 	bl	8002698 <LL_C2_RCC_GetAHBPrescaler>
 80033a8:	4602      	mov	r2, r0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80033ae:	f7ff f980 	bl	80026b2 <LL_RCC_GetAHB4Prescaler>
 80033b2:	4602      	mov	r2, r0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <HAL_RCC_GetClockConfig+0x60>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0207 	and.w	r2, r3, #7
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	601a      	str	r2, [r3, #0]
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	58004000 	.word	0x58004000

080033d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80033d0:	b590      	push	{r4, r7, lr}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2bb0      	cmp	r3, #176	; 0xb0
 80033dc:	d903      	bls.n	80033e6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	e007      	b.n	80033f6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	4a11      	ldr	r2, [pc, #68]	; (8003434 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80033f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80033f6:	f7ff f95c 	bl	80026b2 <LL_RCC_GetAHB4Prescaler>
 80033fa:	4603      	mov	r3, r0
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	0c9c      	lsrs	r4, r3, #18
 800341a:	f7fe fe7f 	bl	800211c <HAL_PWREx_GetVoltageRange>
 800341e:	4603      	mov	r3, r0
 8003420:	4619      	mov	r1, r3
 8003422:	4620      	mov	r0, r4
 8003424:	f000 f80c 	bl	8003440 <RCC_SetFlashLatency>
 8003428:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bd90      	pop	{r4, r7, pc}
 8003432:	bf00      	nop
 8003434:	08007494 	.word	0x08007494
 8003438:	08007434 	.word	0x08007434
 800343c:	431bde83 	.word	0x431bde83

08003440 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b093      	sub	sp, #76	; 0x4c
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800344a:	4b39      	ldr	r3, [pc, #228]	; (8003530 <RCC_SetFlashLatency+0xf0>)
 800344c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003450:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003452:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003456:	4a37      	ldr	r2, [pc, #220]	; (8003534 <RCC_SetFlashLatency+0xf4>)
 8003458:	f107 031c 	add.w	r3, r7, #28
 800345c:	ca07      	ldmia	r2, {r0, r1, r2}
 800345e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003462:	4b35      	ldr	r3, [pc, #212]	; (8003538 <RCC_SetFlashLatency+0xf8>)
 8003464:	f107 040c 	add.w	r4, r7, #12
 8003468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800346a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800346e:	2300      	movs	r3, #0
 8003470:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003478:	d11c      	bne.n	80034b4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800347a:	2300      	movs	r3, #0
 800347c:	643b      	str	r3, [r7, #64]	; 0x40
 800347e:	e015      	b.n	80034ac <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003488:	4413      	add	r3, r2
 800348a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	d808      	bhi.n	80034a6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800349c:	4413      	add	r3, r2
 800349e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80034a2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80034a4:	e022      	b.n	80034ec <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80034a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a8:	3301      	adds	r3, #1
 80034aa:	643b      	str	r3, [r7, #64]	; 0x40
 80034ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d9e6      	bls.n	8003480 <RCC_SetFlashLatency+0x40>
 80034b2:	e01b      	b.n	80034ec <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034b8:	e015      	b.n	80034e6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80034ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80034c2:	4413      	add	r3, r2
 80034c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d808      	bhi.n	80034e0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80034ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80034d6:	4413      	add	r3, r2
 80034d8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80034dc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80034de:	e005      	b.n	80034ec <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80034e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e2:	3301      	adds	r3, #1
 80034e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d9e6      	bls.n	80034ba <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <RCC_SetFlashLatency+0xfc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 0207 	bic.w	r2, r3, #7
 80034f4:	4911      	ldr	r1, [pc, #68]	; (800353c <RCC_SetFlashLatency+0xfc>)
 80034f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034fc:	f7fd fedc 	bl	80012b8 <HAL_GetTick>
 8003500:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003502:	e008      	b.n	8003516 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003504:	f7fd fed8 	bl	80012b8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e007      	b.n	8003526 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <RCC_SetFlashLatency+0xfc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003520:	429a      	cmp	r2, r3
 8003522:	d1ef      	bne.n	8003504 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	374c      	adds	r7, #76	; 0x4c
 800352a:	46bd      	mov	sp, r7
 800352c:	bd90      	pop	{r4, r7, pc}
 800352e:	bf00      	nop
 8003530:	080073e8 	.word	0x080073e8
 8003534:	080073f8 	.word	0x080073f8
 8003538:	08007404 	.word	0x08007404
 800353c:	58004000 	.word	0x58004000

08003540 <LL_RCC_LSE_IsEnabled>:
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <LL_RCC_LSE_IsEnabled+0x18>
 8003554:	2301      	movs	r3, #1
 8003556:	e000      	b.n	800355a <LL_RCC_LSE_IsEnabled+0x1a>
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_RCC_LSE_IsReady>:
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b02      	cmp	r3, #2
 8003576:	d101      	bne.n	800357c <LL_RCC_LSE_IsReady+0x18>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <LL_RCC_LSE_IsReady+0x1a>
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_RCC_SetRFWKPClockSource>:
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003598:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800359c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <LL_RCC_SetSMPSClockSource>:
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80035bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	624b      	str	r3, [r1, #36]	; 0x24
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <LL_RCC_SetSMPSPrescaler>:
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <LL_RCC_SetUSARTClockSource>:
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	f023 0203 	bic.w	r2, r3, #3
 8003618:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <LL_RCC_SetLPUARTClockSource>:
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_RCC_SetI2CClockSource>:
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003668:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003674:	43db      	mvns	r3, r3
 8003676:	401a      	ands	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_RCC_SetLPTIMClockSource>:
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800369e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	041b      	lsls	r3, r3, #16
 80036ac:	43db      	mvns	r3, r3
 80036ae:	401a      	ands	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	041b      	lsls	r3, r3, #16
 80036b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <LL_RCC_SetSAIClockSource>:
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80036d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_RCC_SetRNGClockSource>:
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80036fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800370a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_RCC_SetCLK48ClockSource>:
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800372a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <LL_RCC_SetUSBClockSource>:
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ffe3 	bl	8003722 <LL_RCC_SetCLK48ClockSource>
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <LL_RCC_SetADCClockSource>:
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800376c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_RCC_SetRTCClockSource>:
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_RCC_GetRTCClockSource>:
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_RCC_ForceBackupDomainReset>:
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80037fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <LL_RCC_PLLSAI1_Enable>:
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003828:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800382c:	6013      	str	r3, [r2, #0]
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_RCC_PLLSAI1_Disable>:
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800383c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800384a:	6013      	str	r3, [r2, #0]
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_RCC_PLLSAI1_IsReady>:
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800385a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003868:	d101      	bne.n	800386e <LL_RCC_PLLSAI1_IsReady+0x18>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b088      	sub	sp, #32
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003882:	2300      	movs	r3, #0
 8003884:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003886:	2300      	movs	r3, #0
 8003888:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d033      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800389e:	d00c      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x40>
 80038a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038a4:	d802      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x32>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d010      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038aa:	e017      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x62>
 80038ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038b0:	d017      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80038b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038b6:	d016      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80038b8:	e010      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80038ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80038ca:	e00d      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 f947 	bl	8003b64 <RCCEx_PLLSAI1_ConfigNP>
 80038d6:	4603      	mov	r3, r0
 80038d8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80038da:	e005      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	77fb      	strb	r3, [r7, #31]
        break;
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80038e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e8:	7ffb      	ldrb	r3, [r7, #31]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d105      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fee9 	bl	80036ca <LL_RCC_SetSAIClockSource>
 80038f8:	e001      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fa:	7ffb      	ldrb	r3, [r7, #31]
 80038fc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003906:	2b00      	cmp	r3, #0
 8003908:	d046      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800390a:	f7ff ff57 	bl	80037bc <LL_RCC_GetRTCClockSource>
 800390e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	429a      	cmp	r2, r3
 8003918:	d03c      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800391a:	f7fe fbef 	bl	80020fc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff31 	bl	8003790 <LL_RCC_SetRTCClockSource>
 800392e:	e02e      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800393a:	f7ff ff4c 	bl	80037d6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800393e:	f7ff ff5b 	bl	80037f8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800395a:	f7ff fdf1 	bl	8003540 <LL_RCC_LSE_IsEnabled>
 800395e:	4603      	mov	r3, r0
 8003960:	2b01      	cmp	r3, #1
 8003962:	d114      	bne.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003964:	f7fd fca8 	bl	80012b8 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800396a:	e00b      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396c:	f7fd fca4 	bl	80012b8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d902      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	77fb      	strb	r3, [r7, #31]
              break;
 8003982:	e004      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003984:	f7ff fdee 	bl	8003564 <LL_RCC_LSE_IsReady>
 8003988:	4603      	mov	r3, r0
 800398a:	2b01      	cmp	r3, #1
 800398c:	d1ee      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800398e:	7ffb      	ldrb	r3, [r7, #31]
 8003990:	77bb      	strb	r3, [r7, #30]
 8003992:	e001      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003994:	7ffb      	ldrb	r3, [r7, #31]
 8003996:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fe2b 	bl	8003604 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d004      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fe36 	bl	8003630 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fe5e 	bl	8003696 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fe53 	bl	8003696 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fe2b 	bl	800365c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fe20 	bl	800365c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d022      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff fe8e 	bl	800374e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a54:	d10b      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 f8dd 	bl	8003c1a <RCCEx_PLLSAI1_ConfigNQ>
 8003a60:	4603      	mov	r3, r0
 8003a62:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003a64:	7ffb      	ldrb	r3, [r7, #31]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8003a6a:	7ffb      	ldrb	r3, [r7, #31]
 8003a6c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d02b      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a82:	d008      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d105      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff fe2b 	bl	80036f6 <LL_RCC_SetRNGClockSource>
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	2000      	movs	r0, #0
 8003aae:	f7ff fe22 	bl	80036f6 <LL_RCC_SetRNGClockSource>
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff fe35 	bl	8003722 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ad0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d022      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fe3e 	bl	8003764 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af0:	d107      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b00:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0a:	d10b      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f8dd 	bl	8003cd0 <RCCEx_PLLSAI1_ConfigNR>
 8003b16:	4603      	mov	r3, r0
 8003b18:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003b1a:	7ffb      	ldrb	r3, [r7, #31]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8003b20:	7ffb      	ldrb	r3, [r7, #31]
 8003b22:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d004      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fd27 	bl	8003588 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff fd46 	bl	80035dc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff fd2d 	bl	80035b4 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8003b5a:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003b70:	f7ff fe62 	bl	8003838 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b74:	f7fd fba0 	bl	80012b8 <HAL_GetTick>
 8003b78:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b7a:	e009      	b.n	8003b90 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b7c:	f7fd fb9c 	bl	80012b8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d902      	bls.n	8003b90 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b8e:	e004      	b.n	8003b9a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003b90:	f7ff fe61 	bl	8003856 <LL_RCC_PLLSAI1_IsReady>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d137      	bne.n	8003c10 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003bce:	f7ff fe24 	bl	800381a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd2:	f7fd fb71 	bl	80012b8 <HAL_GetTick>
 8003bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003bd8:	e009      	b.n	8003bee <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bda:	f7fd fb6d 	bl	80012b8 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d902      	bls.n	8003bee <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	73fb      	strb	r3, [r7, #15]
        break;
 8003bec:	e004      	b.n	8003bf8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003bee:	f7ff fe32 	bl	8003856 <LL_RCC_PLLSAI1_IsReady>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d1f0      	bne.n	8003bda <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d108      	bne.n	8003c10 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b084      	sub	sp, #16
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003c26:	f7ff fe07 	bl	8003838 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c2a:	f7fd fb45 	bl	80012b8 <HAL_GetTick>
 8003c2e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c30:	e009      	b.n	8003c46 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c32:	f7fd fb41 	bl	80012b8 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d902      	bls.n	8003c46 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	73fb      	strb	r3, [r7, #15]
      break;
 8003c44:	e004      	b.n	8003c50 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c46:	f7ff fe06 	bl	8003856 <LL_RCC_PLLSAI1_IsReady>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f0      	bne.n	8003c32 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d137      	bne.n	8003cc6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c80:	4313      	orrs	r3, r2
 8003c82:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003c84:	f7ff fdc9 	bl	800381a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c88:	f7fd fb16 	bl	80012b8 <HAL_GetTick>
 8003c8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c8e:	e009      	b.n	8003ca4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c90:	f7fd fb12 	bl	80012b8 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d902      	bls.n	8003ca4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ca2:	e004      	b.n	8003cae <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ca4:	f7ff fdd7 	bl	8003856 <LL_RCC_PLLSAI1_IsReady>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d1f0      	bne.n	8003c90 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d108      	bne.n	8003cc6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003cdc:	f7ff fdac 	bl	8003838 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ce0:	f7fd faea 	bl	80012b8 <HAL_GetTick>
 8003ce4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ce6:	e009      	b.n	8003cfc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ce8:	f7fd fae6 	bl	80012b8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d902      	bls.n	8003cfc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8003cfa:	e004      	b.n	8003d06 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003cfc:	f7ff fdab 	bl	8003856 <LL_RCC_PLLSAI1_IsReady>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d137      	bne.n	8003d7c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d20:	4313      	orrs	r3, r2
 8003d22:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d36:	4313      	orrs	r3, r2
 8003d38:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003d3a:	f7ff fd6e 	bl	800381a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d3e:	f7fd fabb 	bl	80012b8 <HAL_GetTick>
 8003d42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d44:	e009      	b.n	8003d5a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d46:	f7fd fab7 	bl	80012b8 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d902      	bls.n	8003d5a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	73fb      	strb	r3, [r7, #15]
        break;
 8003d58:	e004      	b.n	8003d64 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d5a:	f7ff fd7c 	bl	8003856 <LL_RCC_PLLSAI1_IsReady>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d1f0      	bne.n	8003d46 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d108      	bne.n	8003d7c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e090      	b.n	8003eba <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fc ff5f 	bl	8000c70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	22ca      	movs	r2, #202	; 0xca
 8003dc0:	625a      	str	r2, [r3, #36]	; 0x24
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2253      	movs	r2, #83	; 0x53
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f89f 	bl	8003f0e <RTC_EnterInitMode>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	22ff      	movs	r2, #255	; 0xff
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2204      	movs	r2, #4
 8003de2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e067      	b.n	8003eba <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dfc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6899      	ldr	r1, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68d2      	ldr	r2, [r2, #12]
 8003e24:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6919      	ldr	r1, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	041a      	lsls	r2, r3, #16
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e48:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0203 	bic.w	r2, r2, #3
 8003e58:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d113      	bne.n	8003ea8 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f81e 	bl	8003ec2 <HAL_RTC_WaitForSynchro>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00d      	beq.n	8003ea8 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	22ff      	movs	r2, #255	; 0xff
 8003e92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2204      	movs	r2, #4
 8003e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e008      	b.n	8003eba <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	22ff      	movs	r2, #255	; 0xff
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ed8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003eda:	f7fd f9ed 	bl	80012b8 <HAL_GetTick>
 8003ede:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ee0:	e009      	b.n	8003ef6 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ee2:	f7fd f9e9 	bl	80012b8 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e007      	b.n	8003f06 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ee      	beq.n	8003ee2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d119      	bne.n	8003f58 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003f2e:	f7fd f9c3 	bl	80012b8 <HAL_GetTick>
 8003f32:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f34:	e009      	b.n	8003f4a <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003f36:	f7fd f9bf 	bl	80012b8 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f44:	d901      	bls.n	8003f4a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e007      	b.n	8003f5a <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0ee      	beq.n	8003f36 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e01d      	b.n	8003fb0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fc fe87 	bl	8000c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f000 fae7 	bl	8004574 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <HAL_TIM_Base_Start_IT+0x50>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d00b      	beq.n	8003ffa <HAL_TIM_Base_Start_IT+0x42>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d007      	beq.n	8003ffa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	00010007 	.word	0x00010007

0800400c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e01d      	b.n	800405a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f815 	bl	8004062 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f000 fa92 	bl	8004574 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b02      	cmp	r3, #2
 800408a:	d122      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b02      	cmp	r3, #2
 8004098:	d11b      	bne.n	80040d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0202 	mvn.w	r2, #2
 80040a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 fa3c 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 80040be:	e005      	b.n	80040cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fa2e 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa3f 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d122      	bne.n	8004126 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d11b      	bne.n	8004126 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f06f 0204 	mvn.w	r2, #4
 80040f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fa12 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 8004112:	e005      	b.n	8004120 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fa04 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fa15 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b08      	cmp	r3, #8
 8004132:	d122      	bne.n	800417a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b08      	cmp	r3, #8
 8004140:	d11b      	bne.n	800417a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f06f 0208 	mvn.w	r2, #8
 800414a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2204      	movs	r2, #4
 8004150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f9e8 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 8004166:	e005      	b.n	8004174 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f9da 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f9eb 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b10      	cmp	r3, #16
 8004186:	d122      	bne.n	80041ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	2b10      	cmp	r3, #16
 8004194:	d11b      	bne.n	80041ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f06f 0210 	mvn.w	r2, #16
 800419e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2208      	movs	r2, #8
 80041a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f9be 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
 80041ba:	e005      	b.n	80041c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f9b0 	bl	8004522 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f9c1 	bl	800454a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10e      	bne.n	80041fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d107      	bne.n	80041fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f06f 0201 	mvn.w	r2, #1
 80041f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7fc fc91 	bl	8000b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004204:	2b80      	cmp	r3, #128	; 0x80
 8004206:	d10e      	bne.n	8004226 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d107      	bne.n	8004226 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800421e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fd8f 	bl	8004d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004234:	d10e      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b80      	cmp	r3, #128	; 0x80
 8004242:	d107      	bne.n	8004254 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fd82 	bl	8004d58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426c:	2b40      	cmp	r3, #64	; 0x40
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f96f 	bl	800455e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b20      	cmp	r3, #32
 800428c:	d10e      	bne.n	80042ac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b20      	cmp	r3, #32
 800429a:	d107      	bne.n	80042ac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0220 	mvn.w	r2, #32
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fd42 	bl	8004d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_TIM_OC_ConfigChannel+0x1a>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e06c      	b.n	80043a8 <HAL_TIM_OC_ConfigChannel+0xf4>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2202      	movs	r2, #2
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b14      	cmp	r3, #20
 80042e2:	d857      	bhi.n	8004394 <HAL_TIM_OC_ConfigChannel+0xe0>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <HAL_TIM_OC_ConfigChannel+0x38>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	08004341 	.word	0x08004341
 80042f0:	08004395 	.word	0x08004395
 80042f4:	08004395 	.word	0x08004395
 80042f8:	08004395 	.word	0x08004395
 80042fc:	0800434f 	.word	0x0800434f
 8004300:	08004395 	.word	0x08004395
 8004304:	08004395 	.word	0x08004395
 8004308:	08004395 	.word	0x08004395
 800430c:	0800435d 	.word	0x0800435d
 8004310:	08004395 	.word	0x08004395
 8004314:	08004395 	.word	0x08004395
 8004318:	08004395 	.word	0x08004395
 800431c:	0800436b 	.word	0x0800436b
 8004320:	08004395 	.word	0x08004395
 8004324:	08004395 	.word	0x08004395
 8004328:	08004395 	.word	0x08004395
 800432c:	08004379 	.word	0x08004379
 8004330:	08004395 	.word	0x08004395
 8004334:	08004395 	.word	0x08004395
 8004338:	08004395 	.word	0x08004395
 800433c:	08004387 	.word	0x08004387
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f978 	bl	800463c <TIM_OC1_SetConfig>
      break;
 800434c:	e023      	b.n	8004396 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 f9ed 	bl	8004734 <TIM_OC2_SetConfig>
      break;
 800435a:	e01c      	b.n	8004396 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fa60 	bl	8004828 <TIM_OC3_SetConfig>
      break;
 8004368:	e015      	b.n	8004396 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fad1 	bl	8004918 <TIM_OC4_SetConfig>
      break;
 8004376:	e00e      	b.n	8004396 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fb28 	bl	80049d4 <TIM_OC5_SetConfig>
      break;
 8004384:	e007      	b.n	8004396 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68b9      	ldr	r1, [r7, #8]
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fb79 	bl	8004a84 <TIM_OC6_SetConfig>
      break;
 8004392:	e000      	b.n	8004396 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8004394:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_TIM_ConfigClockSource+0x18>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e0a8      	b.n	800451a <HAL_TIM_ConfigClockSource+0x16a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80043e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d067      	beq.n	80044d4 <HAL_TIM_ConfigClockSource+0x124>
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	d80b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x70>
 8004408:	2b10      	cmp	r3, #16
 800440a:	d073      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0x144>
 800440c:	2b10      	cmp	r3, #16
 800440e:	d802      	bhi.n	8004416 <HAL_TIM_ConfigClockSource+0x66>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d06f      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004414:	e078      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004416:	2b20      	cmp	r3, #32
 8004418:	d06c      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0x144>
 800441a:	2b30      	cmp	r3, #48	; 0x30
 800441c:	d06a      	beq.n	80044f4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800441e:	e073      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004420:	2b70      	cmp	r3, #112	; 0x70
 8004422:	d00d      	beq.n	8004440 <HAL_TIM_ConfigClockSource+0x90>
 8004424:	2b70      	cmp	r3, #112	; 0x70
 8004426:	d804      	bhi.n	8004432 <HAL_TIM_ConfigClockSource+0x82>
 8004428:	2b50      	cmp	r3, #80	; 0x50
 800442a:	d033      	beq.n	8004494 <HAL_TIM_ConfigClockSource+0xe4>
 800442c:	2b60      	cmp	r3, #96	; 0x60
 800442e:	d041      	beq.n	80044b4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004430:	e06a      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004436:	d066      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0x156>
 8004438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443c:	d017      	beq.n	800446e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800443e:	e063      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	6899      	ldr	r1, [r3, #8]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f000 fbee 	bl	8004c30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004462:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	609a      	str	r2, [r3, #8]
      break;
 800446c:	e04c      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6899      	ldr	r1, [r3, #8]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f000 fbd7 	bl	8004c30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004490:	609a      	str	r2, [r3, #8]
      break;
 8004492:	e039      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6859      	ldr	r1, [r3, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	461a      	mov	r2, r3
 80044a2:	f000 fb49 	bl	8004b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2150      	movs	r1, #80	; 0x50
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fba2 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 80044b2:	e029      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	6859      	ldr	r1, [r3, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	461a      	mov	r2, r3
 80044c2:	f000 fb68 	bl	8004b96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2160      	movs	r1, #96	; 0x60
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fb92 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 80044d2:	e019      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	6859      	ldr	r1, [r3, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	461a      	mov	r2, r3
 80044e2:	f000 fb29 	bl	8004b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2140      	movs	r1, #64	; 0x40
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fb82 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 80044f2:	e009      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f000 fb79 	bl	8004bf6 <TIM_ITRx_SetConfig>
      break;
 8004504:	e000      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <TIM_Base_SetConfig+0xbc>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d003      	beq.n	8004594 <TIM_Base_SetConfig+0x20>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004592:	d108      	bne.n	80045a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a21      	ldr	r2, [pc, #132]	; (8004630 <TIM_Base_SetConfig+0xbc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_Base_SetConfig+0x52>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b4:	d007      	beq.n	80045c6 <TIM_Base_SetConfig+0x52>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <TIM_Base_SetConfig+0xc0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_Base_SetConfig+0x52>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <TIM_Base_SetConfig+0xc4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d108      	bne.n	80045d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <TIM_Base_SetConfig+0xbc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <TIM_Base_SetConfig+0xa0>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a0b      	ldr	r2, [pc, #44]	; (8004634 <TIM_Base_SetConfig+0xc0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_Base_SetConfig+0xa0>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a0a      	ldr	r2, [pc, #40]	; (8004638 <TIM_Base_SetConfig+0xc4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d103      	bne.n	800461c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	615a      	str	r2, [r3, #20]
}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40014400 	.word	0x40014400
 8004638:	40014800 	.word	0x40014800

0800463c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f023 0201 	bic.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 0302 	bic.w	r3, r3, #2
 8004688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a24      	ldr	r2, [pc, #144]	; (8004728 <TIM_OC1_SetConfig+0xec>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d007      	beq.n	80046ac <TIM_OC1_SetConfig+0x70>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a23      	ldr	r2, [pc, #140]	; (800472c <TIM_OC1_SetConfig+0xf0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d003      	beq.n	80046ac <TIM_OC1_SetConfig+0x70>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a22      	ldr	r2, [pc, #136]	; (8004730 <TIM_OC1_SetConfig+0xf4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d10c      	bne.n	80046c6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f023 0308 	bic.w	r3, r3, #8
 80046b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 0304 	bic.w	r3, r3, #4
 80046c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a17      	ldr	r2, [pc, #92]	; (8004728 <TIM_OC1_SetConfig+0xec>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC1_SetConfig+0xa2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a17      	ldr	r2, [pc, #92]	; (8004730 <TIM_OC1_SetConfig+0xf4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC1_SetConfig+0xa2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a14      	ldr	r2, [pc, #80]	; (800472c <TIM_OC1_SetConfig+0xf0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d111      	bne.n	8004702 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40014800 	.word	0x40014800
 8004730:	40014400 	.word	0x40014400

08004734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f023 0210 	bic.w	r2, r3, #16
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 0320 	bic.w	r3, r3, #32
 8004782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a22      	ldr	r2, [pc, #136]	; (800481c <TIM_OC2_SetConfig+0xe8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10d      	bne.n	80047b4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800479e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a19      	ldr	r2, [pc, #100]	; (800481c <TIM_OC2_SetConfig+0xe8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_OC2_SetConfig+0x98>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a18      	ldr	r2, [pc, #96]	; (8004820 <TIM_OC2_SetConfig+0xec>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_OC2_SetConfig+0x98>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a17      	ldr	r2, [pc, #92]	; (8004824 <TIM_OC2_SetConfig+0xf0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d113      	bne.n	80047f4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40014400 	.word	0x40014400
 8004824:	40014800 	.word	0x40014800

08004828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a21      	ldr	r2, [pc, #132]	; (800490c <TIM_OC3_SetConfig+0xe4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d10d      	bne.n	80048a6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a18      	ldr	r2, [pc, #96]	; (800490c <TIM_OC3_SetConfig+0xe4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d007      	beq.n	80048be <TIM_OC3_SetConfig+0x96>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a17      	ldr	r2, [pc, #92]	; (8004910 <TIM_OC3_SetConfig+0xe8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d003      	beq.n	80048be <TIM_OC3_SetConfig+0x96>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a16      	ldr	r2, [pc, #88]	; (8004914 <TIM_OC3_SetConfig+0xec>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d113      	bne.n	80048e6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	621a      	str	r2, [r3, #32]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40014400 	.word	0x40014400
 8004914:	40014800 	.word	0x40014800

08004918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	031b      	lsls	r3, r3, #12
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a14      	ldr	r2, [pc, #80]	; (80049c8 <TIM_OC4_SetConfig+0xb0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d007      	beq.n	800498c <TIM_OC4_SetConfig+0x74>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a13      	ldr	r2, [pc, #76]	; (80049cc <TIM_OC4_SetConfig+0xb4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_OC4_SetConfig+0x74>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a12      	ldr	r2, [pc, #72]	; (80049d0 <TIM_OC4_SetConfig+0xb8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d109      	bne.n	80049a0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	019b      	lsls	r3, r3, #6
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40012c00 	.word	0x40012c00
 80049cc:	40014400 	.word	0x40014400
 80049d0:	40014800 	.word	0x40014800

080049d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	041b      	lsls	r3, r3, #16
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a13      	ldr	r2, [pc, #76]	; (8004a78 <TIM_OC5_SetConfig+0xa4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <TIM_OC5_SetConfig+0x6a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a12      	ldr	r2, [pc, #72]	; (8004a7c <TIM_OC5_SetConfig+0xa8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_OC5_SetConfig+0x6a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a11      	ldr	r2, [pc, #68]	; (8004a80 <TIM_OC5_SetConfig+0xac>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d109      	bne.n	8004a52 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40014400 	.word	0x40014400
 8004a80:	40014800 	.word	0x40014800

08004a84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	051b      	lsls	r3, r3, #20
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <TIM_OC6_SetConfig+0xa8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d007      	beq.n	8004af0 <TIM_OC6_SetConfig+0x6c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <TIM_OC6_SetConfig+0xac>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_OC6_SetConfig+0x6c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a12      	ldr	r2, [pc, #72]	; (8004b34 <TIM_OC6_SetConfig+0xb0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d109      	bne.n	8004b04 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	029b      	lsls	r3, r3, #10
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40014400 	.word	0x40014400
 8004b34:	40014800 	.word	0x40014800

08004b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f023 0201 	bic.w	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f023 030a 	bic.w	r3, r3, #10
 8004b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b087      	sub	sp, #28
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f023 0210 	bic.w	r2, r3, #16
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	031b      	lsls	r3, r3, #12
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f043 0307 	orr.w	r3, r3, #7
 8004c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	609a      	str	r2, [r3, #8]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	021a      	lsls	r2, r3, #8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	431a      	orrs	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	609a      	str	r2, [r3, #8]
}
 8004c64:	bf00      	nop
 8004c66:	371c      	adds	r7, #28
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e04a      	b.n	8004d1e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1f      	ldr	r2, [pc, #124]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d108      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf0:	d10c      	bne.n	8004d0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40012c00 	.word	0x40012c00

08004d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <LL_RCC_GetUSARTClockSource>:
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4013      	ands	r3, r2
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <LL_RCC_GetLPUARTClockSource>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4013      	ands	r3, r2
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e042      	b.n	8004e44 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7fb ff8f 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2224      	movs	r2, #36	; 0x24
 8004dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fa4a 	bl	8005288 <UART_SetConfig>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e022      	b.n	8004e44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 faa2 	bl	8006350 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f001 fb29 	bl	8006494 <UART_CheckIdleState>
 8004e42:	4603      	mov	r3, r0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d168      	bne.n	8004f36 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <HAL_UART_Transmit_DMA+0x24>
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e061      	b.n	8004f38 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_UART_Transmit_DMA+0x36>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e05a      	b.n	8004f38 <HAL_UART_Transmit_DMA+0xec>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	88fa      	ldrh	r2, [r7, #6]
 8004e94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2221      	movs	r2, #33	; 0x21
 8004eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d02c      	beq.n	8004f12 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebc:	4a20      	ldr	r2, [pc, #128]	; (8004f40 <HAL_UART_Transmit_DMA+0xf4>)
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <HAL_UART_Transmit_DMA+0xf8>)
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ecc:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <HAL_UART_Transmit_DMA+0xfc>)
 8004ece:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3328      	adds	r3, #40	; 0x28
 8004ee8:	461a      	mov	r2, r3
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	f7fc fc6e 	bl	80017cc <HAL_DMA_Start_IT>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2210      	movs	r2, #16
 8004efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e012      	b.n	8004f38 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2240      	movs	r2, #64	; 0x40
 8004f18:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f30:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e000      	b.n	8004f38 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
  }
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	080066a7 	.word	0x080066a7
 8004f44:	080066fb 	.word	0x080066fb
 8004f48:	08006717 	.word	0x08006717

08004f4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f72:	4013      	ands	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d118      	bne.n	8004fae <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d013      	beq.n	8004fae <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8145 	beq.w	800522e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	4798      	blx	r3
      }
      return;
 8004fac:	e13f      	b.n	800522e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80e8 	beq.w	8005186 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4ba1      	ldr	r3, [pc, #644]	; (8005240 <HAL_UART_IRQHandler+0x2f4>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d105      	bne.n	8004fcc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4ba0      	ldr	r3, [pc, #640]	; (8005244 <HAL_UART_IRQHandler+0x2f8>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 80dd 	beq.w	8005186 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d010      	beq.n	8004ff8 <HAL_UART_IRQHandler+0xac>
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00b      	beq.n	8004ff8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	f043 0201 	orr.w	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d010      	beq.n	8005024 <HAL_UART_IRQHandler+0xd8>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2202      	movs	r2, #2
 8005012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501a:	f043 0204 	orr.w	r2, r3, #4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	d010      	beq.n	8005050 <HAL_UART_IRQHandler+0x104>
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2204      	movs	r2, #4
 800503e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	f043 0202 	orr.w	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d015      	beq.n	8005086 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4b76      	ldr	r3, [pc, #472]	; (8005240 <HAL_UART_IRQHandler+0x2f4>)
 8005068:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2208      	movs	r2, #8
 8005074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507c:	f043 0208 	orr.w	r2, r3, #8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800508c:	2b00      	cmp	r3, #0
 800508e:	d011      	beq.n	80050b4 <HAL_UART_IRQHandler+0x168>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 80b9 	beq.w	8005232 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d011      	beq.n	80050ee <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d104      	bne.n	80050de <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	d004      	beq.n	800510e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800510a:	2b00      	cmp	r3, #0
 800510c:	d031      	beq.n	8005172 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f001 faa6 	bl	8006660 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511e:	2b40      	cmp	r3, #64	; 0x40
 8005120:	d123      	bne.n	800516a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005130:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005136:	2b00      	cmp	r3, #0
 8005138:	d013      	beq.n	8005162 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800513e:	4a42      	ldr	r2, [pc, #264]	; (8005248 <HAL_UART_IRQHandler+0x2fc>)
 8005140:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005146:	4618      	mov	r0, r3
 8005148:	f7fc fbbb 	bl	80018c2 <HAL_DMA_Abort_IT>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d017      	beq.n	8005182 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800515c:	4610      	mov	r0, r2
 800515e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	e00f      	b.n	8005182 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f886 	bl	8005274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005168:	e00b      	b.n	8005182 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f882 	bl	8005274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	e007      	b.n	8005182 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f87e 	bl	8005274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005180:	e057      	b.n	8005232 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005182:	bf00      	nop
    return;
 8005184:	e055      	b.n	8005232 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00d      	beq.n	80051ac <HAL_UART_IRQHandler+0x260>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f001 fb26 	bl	80067f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051aa:	e045      	b.n	8005238 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d012      	beq.n	80051dc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d031      	beq.n	8005236 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3
    }
    return;
 80051da:	e02c      	b.n	8005236 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d008      	beq.n	80051f8 <HAL_UART_IRQHandler+0x2ac>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f001 fae6 	bl	80067c2 <UART_EndTransmit_IT>
    return;
 80051f6:	e01f      	b.n	8005238 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d008      	beq.n	8005214 <HAL_UART_IRQHandler+0x2c8>
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 fb06 	bl	800681e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005212:	e011      	b.n	8005238 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00c      	beq.n	8005238 <HAL_UART_IRQHandler+0x2ec>
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	da09      	bge.n	8005238 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f001 faf0 	bl	800680a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800522a:	bf00      	nop
 800522c:	e004      	b.n	8005238 <HAL_UART_IRQHandler+0x2ec>
      return;
 800522e:	bf00      	nop
 8005230:	e002      	b.n	8005238 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005236:	bf00      	nop
  }
}
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	10000001 	.word	0x10000001
 8005244:	04000120 	.word	0x04000120
 8005248:	08006797 	.word	0x08006797

0800524c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005288:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800528c:	b08a      	sub	sp, #40	; 0x28
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	76fb      	strb	r3, [r7, #27]
#if defined(LPUART1)
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052bc:	4313      	orrs	r3, r2
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4ba4      	ldr	r3, [pc, #656]	; (8005558 <UART_SetConfig+0x2d0>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a99      	ldr	r2, [pc, #612]	; (800555c <UART_SetConfig+0x2d4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d004      	beq.n	8005304 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005300:	4313      	orrs	r3, r2
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800530e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005318:	430b      	orrs	r3, r1
 800531a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	f023 010f 	bic.w	r1, r3, #15
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a8a      	ldr	r2, [pc, #552]	; (8005560 <UART_SetConfig+0x2d8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d126      	bne.n	800538a <UART_SetConfig+0x102>
 800533c:	2003      	movs	r0, #3
 800533e:	f7ff fd15 	bl	8004d6c <LL_RCC_GetUSARTClockSource>
 8005342:	4603      	mov	r3, r0
 8005344:	2b03      	cmp	r3, #3
 8005346:	d81b      	bhi.n	8005380 <UART_SetConfig+0xf8>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <UART_SetConfig+0xc8>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	08005361 	.word	0x08005361
 8005354:	08005371 	.word	0x08005371
 8005358:	08005369 	.word	0x08005369
 800535c:	08005379 	.word	0x08005379
 8005360:	2301      	movs	r3, #1
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005366:	e042      	b.n	80053ee <UART_SetConfig+0x166>
 8005368:	2302      	movs	r3, #2
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536e:	e03e      	b.n	80053ee <UART_SetConfig+0x166>
 8005370:	2304      	movs	r3, #4
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005376:	e03a      	b.n	80053ee <UART_SetConfig+0x166>
 8005378:	2308      	movs	r3, #8
 800537a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537e:	e036      	b.n	80053ee <UART_SetConfig+0x166>
 8005380:	2310      	movs	r3, #16
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005386:	bf00      	nop
 8005388:	e031      	b.n	80053ee <UART_SetConfig+0x166>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a73      	ldr	r2, [pc, #460]	; (800555c <UART_SetConfig+0x2d4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d129      	bne.n	80053e8 <UART_SetConfig+0x160>
 8005394:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005398:	f7ff fcf8 	bl	8004d8c <LL_RCC_GetLPUARTClockSource>
 800539c:	4603      	mov	r3, r0
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a2:	d014      	beq.n	80053ce <UART_SetConfig+0x146>
 80053a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a8:	d802      	bhi.n	80053b0 <UART_SetConfig+0x128>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d007      	beq.n	80053be <UART_SetConfig+0x136>
 80053ae:	e016      	b.n	80053de <UART_SetConfig+0x156>
 80053b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b4:	d007      	beq.n	80053c6 <UART_SetConfig+0x13e>
 80053b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053ba:	d00c      	beq.n	80053d6 <UART_SetConfig+0x14e>
 80053bc:	e00f      	b.n	80053de <UART_SetConfig+0x156>
 80053be:	2300      	movs	r3, #0
 80053c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c4:	e013      	b.n	80053ee <UART_SetConfig+0x166>
 80053c6:	2302      	movs	r3, #2
 80053c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053cc:	e00f      	b.n	80053ee <UART_SetConfig+0x166>
 80053ce:	2304      	movs	r3, #4
 80053d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d4:	e00b      	b.n	80053ee <UART_SetConfig+0x166>
 80053d6:	2308      	movs	r3, #8
 80053d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053dc:	e007      	b.n	80053ee <UART_SetConfig+0x166>
 80053de:	2310      	movs	r3, #16
 80053e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e4:	bf00      	nop
 80053e6:	e002      	b.n	80053ee <UART_SetConfig+0x166>
 80053e8:	2310      	movs	r3, #16
 80053ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a5a      	ldr	r2, [pc, #360]	; (800555c <UART_SetConfig+0x2d4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	f040 8428 	bne.w	8005c4a <UART_SetConfig+0x9c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053fe:	2b08      	cmp	r3, #8
 8005400:	f200 8171 	bhi.w	80056e6 <UART_SetConfig+0x45e>
 8005404:	a201      	add	r2, pc, #4	; (adr r2, 800540c <UART_SetConfig+0x184>)
 8005406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540a:	bf00      	nop
 800540c:	08005431 	.word	0x08005431
 8005410:	080056e7 	.word	0x080056e7
 8005414:	080054d3 	.word	0x080054d3
 8005418:	080056e7 	.word	0x080056e7
 800541c:	08005597 	.word	0x08005597
 8005420:	080056e7 	.word	0x080056e7
 8005424:	080056e7 	.word	0x080056e7
 8005428:	080056e7 	.word	0x080056e7
 800542c:	08005639 	.word	0x08005639
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005430:	f7fd ff70 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8005434:	4602      	mov	r2, r0
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	2b00      	cmp	r3, #0
 800543c:	d044      	beq.n	80054c8 <UART_SetConfig+0x240>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	2b01      	cmp	r3, #1
 8005444:	d03e      	beq.n	80054c4 <UART_SetConfig+0x23c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	2b02      	cmp	r3, #2
 800544c:	d038      	beq.n	80054c0 <UART_SetConfig+0x238>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	2b03      	cmp	r3, #3
 8005454:	d032      	beq.n	80054bc <UART_SetConfig+0x234>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b04      	cmp	r3, #4
 800545c:	d02c      	beq.n	80054b8 <UART_SetConfig+0x230>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	2b05      	cmp	r3, #5
 8005464:	d026      	beq.n	80054b4 <UART_SetConfig+0x22c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	2b06      	cmp	r3, #6
 800546c:	d020      	beq.n	80054b0 <UART_SetConfig+0x228>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	2b07      	cmp	r3, #7
 8005474:	d01a      	beq.n	80054ac <UART_SetConfig+0x224>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	2b08      	cmp	r3, #8
 800547c:	d014      	beq.n	80054a8 <UART_SetConfig+0x220>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	2b09      	cmp	r3, #9
 8005484:	d00e      	beq.n	80054a4 <UART_SetConfig+0x21c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	2b0a      	cmp	r3, #10
 800548c:	d008      	beq.n	80054a0 <UART_SetConfig+0x218>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2b0b      	cmp	r3, #11
 8005494:	d102      	bne.n	800549c <UART_SetConfig+0x214>
 8005496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800549a:	e016      	b.n	80054ca <UART_SetConfig+0x242>
 800549c:	2301      	movs	r3, #1
 800549e:	e014      	b.n	80054ca <UART_SetConfig+0x242>
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	e012      	b.n	80054ca <UART_SetConfig+0x242>
 80054a4:	2340      	movs	r3, #64	; 0x40
 80054a6:	e010      	b.n	80054ca <UART_SetConfig+0x242>
 80054a8:	2320      	movs	r3, #32
 80054aa:	e00e      	b.n	80054ca <UART_SetConfig+0x242>
 80054ac:	2310      	movs	r3, #16
 80054ae:	e00c      	b.n	80054ca <UART_SetConfig+0x242>
 80054b0:	230c      	movs	r3, #12
 80054b2:	e00a      	b.n	80054ca <UART_SetConfig+0x242>
 80054b4:	230a      	movs	r3, #10
 80054b6:	e008      	b.n	80054ca <UART_SetConfig+0x242>
 80054b8:	2308      	movs	r3, #8
 80054ba:	e006      	b.n	80054ca <UART_SetConfig+0x242>
 80054bc:	2306      	movs	r3, #6
 80054be:	e004      	b.n	80054ca <UART_SetConfig+0x242>
 80054c0:	2304      	movs	r3, #4
 80054c2:	e002      	b.n	80054ca <UART_SetConfig+0x242>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e000      	b.n	80054ca <UART_SetConfig+0x242>
 80054c8:	2301      	movs	r3, #1
 80054ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ce:	617b      	str	r3, [r7, #20]
        break;
 80054d0:	e10c      	b.n	80056ec <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d05a      	beq.n	8005590 <UART_SetConfig+0x308>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d054      	beq.n	800558c <UART_SetConfig+0x304>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d04e      	beq.n	8005588 <UART_SetConfig+0x300>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d048      	beq.n	8005584 <UART_SetConfig+0x2fc>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d02c      	beq.n	8005554 <UART_SetConfig+0x2cc>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d026      	beq.n	8005550 <UART_SetConfig+0x2c8>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	2b06      	cmp	r3, #6
 8005508:	d020      	beq.n	800554c <UART_SetConfig+0x2c4>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b07      	cmp	r3, #7
 8005510:	d01a      	beq.n	8005548 <UART_SetConfig+0x2c0>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b08      	cmp	r3, #8
 8005518:	d014      	beq.n	8005544 <UART_SetConfig+0x2bc>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	2b09      	cmp	r3, #9
 8005520:	d00e      	beq.n	8005540 <UART_SetConfig+0x2b8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b0a      	cmp	r3, #10
 8005528:	d008      	beq.n	800553c <UART_SetConfig+0x2b4>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2b0b      	cmp	r3, #11
 8005530:	d102      	bne.n	8005538 <UART_SetConfig+0x2b0>
 8005532:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005536:	e02c      	b.n	8005592 <UART_SetConfig+0x30a>
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <UART_SetConfig+0x2dc>)
 800553a:	e02a      	b.n	8005592 <UART_SetConfig+0x30a>
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <UART_SetConfig+0x2e0>)
 800553e:	e028      	b.n	8005592 <UART_SetConfig+0x30a>
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <UART_SetConfig+0x2e4>)
 8005542:	e026      	b.n	8005592 <UART_SetConfig+0x30a>
 8005544:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <UART_SetConfig+0x2e8>)
 8005546:	e024      	b.n	8005592 <UART_SetConfig+0x30a>
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <UART_SetConfig+0x2ec>)
 800554a:	e022      	b.n	8005592 <UART_SetConfig+0x30a>
 800554c:	4b0a      	ldr	r3, [pc, #40]	; (8005578 <UART_SetConfig+0x2f0>)
 800554e:	e020      	b.n	8005592 <UART_SetConfig+0x30a>
 8005550:	4b0a      	ldr	r3, [pc, #40]	; (800557c <UART_SetConfig+0x2f4>)
 8005552:	e01e      	b.n	8005592 <UART_SetConfig+0x30a>
 8005554:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <UART_SetConfig+0x2f8>)
 8005556:	e01c      	b.n	8005592 <UART_SetConfig+0x30a>
 8005558:	cfff69f3 	.word	0xcfff69f3
 800555c:	40008000 	.word	0x40008000
 8005560:	40013800 	.word	0x40013800
 8005564:	00f42400 	.word	0x00f42400
 8005568:	0001e848 	.word	0x0001e848
 800556c:	0003d090 	.word	0x0003d090
 8005570:	0007a120 	.word	0x0007a120
 8005574:	000f4240 	.word	0x000f4240
 8005578:	00145855 	.word	0x00145855
 800557c:	00186a00 	.word	0x00186a00
 8005580:	001e8480 	.word	0x001e8480
 8005584:	4ba6      	ldr	r3, [pc, #664]	; (8005820 <UART_SetConfig+0x598>)
 8005586:	e004      	b.n	8005592 <UART_SetConfig+0x30a>
 8005588:	4ba6      	ldr	r3, [pc, #664]	; (8005824 <UART_SetConfig+0x59c>)
 800558a:	e002      	b.n	8005592 <UART_SetConfig+0x30a>
 800558c:	4ba6      	ldr	r3, [pc, #664]	; (8005828 <UART_SetConfig+0x5a0>)
 800558e:	e000      	b.n	8005592 <UART_SetConfig+0x30a>
 8005590:	4ba6      	ldr	r3, [pc, #664]	; (800582c <UART_SetConfig+0x5a4>)
 8005592:	617b      	str	r3, [r7, #20]
        break;
 8005594:	e0aa      	b.n	80056ec <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005596:	f7fd fe3f 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 800559a:	4602      	mov	r2, r0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d044      	beq.n	800562e <UART_SetConfig+0x3a6>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d03e      	beq.n	800562a <UART_SetConfig+0x3a2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d038      	beq.n	8005626 <UART_SetConfig+0x39e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d032      	beq.n	8005622 <UART_SetConfig+0x39a>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d02c      	beq.n	800561e <UART_SetConfig+0x396>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	2b05      	cmp	r3, #5
 80055ca:	d026      	beq.n	800561a <UART_SetConfig+0x392>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	2b06      	cmp	r3, #6
 80055d2:	d020      	beq.n	8005616 <UART_SetConfig+0x38e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	2b07      	cmp	r3, #7
 80055da:	d01a      	beq.n	8005612 <UART_SetConfig+0x38a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d014      	beq.n	800560e <UART_SetConfig+0x386>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	2b09      	cmp	r3, #9
 80055ea:	d00e      	beq.n	800560a <UART_SetConfig+0x382>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	2b0a      	cmp	r3, #10
 80055f2:	d008      	beq.n	8005606 <UART_SetConfig+0x37e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	2b0b      	cmp	r3, #11
 80055fa:	d102      	bne.n	8005602 <UART_SetConfig+0x37a>
 80055fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005600:	e016      	b.n	8005630 <UART_SetConfig+0x3a8>
 8005602:	2301      	movs	r3, #1
 8005604:	e014      	b.n	8005630 <UART_SetConfig+0x3a8>
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	e012      	b.n	8005630 <UART_SetConfig+0x3a8>
 800560a:	2340      	movs	r3, #64	; 0x40
 800560c:	e010      	b.n	8005630 <UART_SetConfig+0x3a8>
 800560e:	2320      	movs	r3, #32
 8005610:	e00e      	b.n	8005630 <UART_SetConfig+0x3a8>
 8005612:	2310      	movs	r3, #16
 8005614:	e00c      	b.n	8005630 <UART_SetConfig+0x3a8>
 8005616:	230c      	movs	r3, #12
 8005618:	e00a      	b.n	8005630 <UART_SetConfig+0x3a8>
 800561a:	230a      	movs	r3, #10
 800561c:	e008      	b.n	8005630 <UART_SetConfig+0x3a8>
 800561e:	2308      	movs	r3, #8
 8005620:	e006      	b.n	8005630 <UART_SetConfig+0x3a8>
 8005622:	2306      	movs	r3, #6
 8005624:	e004      	b.n	8005630 <UART_SetConfig+0x3a8>
 8005626:	2304      	movs	r3, #4
 8005628:	e002      	b.n	8005630 <UART_SetConfig+0x3a8>
 800562a:	2302      	movs	r3, #2
 800562c:	e000      	b.n	8005630 <UART_SetConfig+0x3a8>
 800562e:	2301      	movs	r3, #1
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	617b      	str	r3, [r7, #20]
        break;
 8005636:	e059      	b.n	80056ec <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	d04e      	beq.n	80056de <UART_SetConfig+0x456>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	2b01      	cmp	r3, #1
 8005646:	d047      	beq.n	80056d8 <UART_SetConfig+0x450>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b02      	cmp	r3, #2
 800564e:	d040      	beq.n	80056d2 <UART_SetConfig+0x44a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	2b03      	cmp	r3, #3
 8005656:	d039      	beq.n	80056cc <UART_SetConfig+0x444>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	2b04      	cmp	r3, #4
 800565e:	d032      	beq.n	80056c6 <UART_SetConfig+0x43e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2b05      	cmp	r3, #5
 8005666:	d02b      	beq.n	80056c0 <UART_SetConfig+0x438>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	2b06      	cmp	r3, #6
 800566e:	d024      	beq.n	80056ba <UART_SetConfig+0x432>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	2b07      	cmp	r3, #7
 8005676:	d01d      	beq.n	80056b4 <UART_SetConfig+0x42c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	2b08      	cmp	r3, #8
 800567e:	d016      	beq.n	80056ae <UART_SetConfig+0x426>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	2b09      	cmp	r3, #9
 8005686:	d00f      	beq.n	80056a8 <UART_SetConfig+0x420>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	2b0a      	cmp	r3, #10
 800568e:	d008      	beq.n	80056a2 <UART_SetConfig+0x41a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	2b0b      	cmp	r3, #11
 8005696:	d101      	bne.n	800569c <UART_SetConfig+0x414>
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	e022      	b.n	80056e2 <UART_SetConfig+0x45a>
 800569c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056a0:	e01f      	b.n	80056e2 <UART_SetConfig+0x45a>
 80056a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056a6:	e01c      	b.n	80056e2 <UART_SetConfig+0x45a>
 80056a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ac:	e019      	b.n	80056e2 <UART_SetConfig+0x45a>
 80056ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056b2:	e016      	b.n	80056e2 <UART_SetConfig+0x45a>
 80056b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056b8:	e013      	b.n	80056e2 <UART_SetConfig+0x45a>
 80056ba:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80056be:	e010      	b.n	80056e2 <UART_SetConfig+0x45a>
 80056c0:	f640 43cc 	movw	r3, #3276	; 0xccc
 80056c4:	e00d      	b.n	80056e2 <UART_SetConfig+0x45a>
 80056c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ca:	e00a      	b.n	80056e2 <UART_SetConfig+0x45a>
 80056cc:	f241 5355 	movw	r3, #5461	; 0x1555
 80056d0:	e007      	b.n	80056e2 <UART_SetConfig+0x45a>
 80056d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056d6:	e004      	b.n	80056e2 <UART_SetConfig+0x45a>
 80056d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056dc:	e001      	b.n	80056e2 <UART_SetConfig+0x45a>
 80056de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e2:	617b      	str	r3, [r7, #20]
        break;
 80056e4:	e002      	b.n	80056ec <UART_SetConfig+0x464>
      default:
        ret = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	76fb      	strb	r3, [r7, #27]
        break;
 80056ea:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 8604 	beq.w	80062fc <UART_SetConfig+0x1074>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	4413      	add	r3, r2
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	429a      	cmp	r2, r3
 8005702:	d305      	bcc.n	8005710 <UART_SetConfig+0x488>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	429a      	cmp	r2, r3
 800570e:	d903      	bls.n	8005718 <UART_SetConfig+0x490>
      {
        ret = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	76fb      	strb	r3, [r7, #27]
 8005714:	f000 bdf2 	b.w	80062fc <UART_SetConfig+0x1074>
      }
      else
      {
        switch (clocksource)
 8005718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800571c:	2b08      	cmp	r3, #8
 800571e:	f200 8281 	bhi.w	8005c24 <UART_SetConfig+0x99c>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <UART_SetConfig+0x4a0>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	0800574d 	.word	0x0800574d
 800572c:	08005c25 	.word	0x08005c25
 8005730:	0800589d 	.word	0x0800589d
 8005734:	08005c25 	.word	0x08005c25
 8005738:	08005993 	.word	0x08005993
 800573c:	08005c25 	.word	0x08005c25
 8005740:	08005c25 	.word	0x08005c25
 8005744:	08005c25 	.word	0x08005c25
 8005748:	08005ad1 	.word	0x08005ad1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800574c:	f7fd fde2 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8005750:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4618      	mov	r0, r3
 8005756:	f04f 0100 	mov.w	r1, #0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d070      	beq.n	8005844 <UART_SetConfig+0x5bc>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	2b01      	cmp	r3, #1
 8005768:	d067      	beq.n	800583a <UART_SetConfig+0x5b2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	2b02      	cmp	r3, #2
 8005770:	d05e      	beq.n	8005830 <UART_SetConfig+0x5a8>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b03      	cmp	r3, #3
 8005778:	d04c      	beq.n	8005814 <UART_SetConfig+0x58c>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	2b04      	cmp	r3, #4
 8005780:	d043      	beq.n	800580a <UART_SetConfig+0x582>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	2b05      	cmp	r3, #5
 8005788:	d03a      	beq.n	8005800 <UART_SetConfig+0x578>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	2b06      	cmp	r3, #6
 8005790:	d031      	beq.n	80057f6 <UART_SetConfig+0x56e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	2b07      	cmp	r3, #7
 8005798:	d028      	beq.n	80057ec <UART_SetConfig+0x564>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d01f      	beq.n	80057e2 <UART_SetConfig+0x55a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2b09      	cmp	r3, #9
 80057a8:	d016      	beq.n	80057d8 <UART_SetConfig+0x550>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	2b0a      	cmp	r3, #10
 80057b0:	d00d      	beq.n	80057ce <UART_SetConfig+0x546>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	2b0b      	cmp	r3, #11
 80057b8:	d104      	bne.n	80057c4 <UART_SetConfig+0x53c>
 80057ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057be:	f04f 0400 	mov.w	r4, #0
 80057c2:	e043      	b.n	800584c <UART_SetConfig+0x5c4>
 80057c4:	f04f 0301 	mov.w	r3, #1
 80057c8:	f04f 0400 	mov.w	r4, #0
 80057cc:	e03e      	b.n	800584c <UART_SetConfig+0x5c4>
 80057ce:	f04f 0380 	mov.w	r3, #128	; 0x80
 80057d2:	f04f 0400 	mov.w	r4, #0
 80057d6:	e039      	b.n	800584c <UART_SetConfig+0x5c4>
 80057d8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80057dc:	f04f 0400 	mov.w	r4, #0
 80057e0:	e034      	b.n	800584c <UART_SetConfig+0x5c4>
 80057e2:	f04f 0320 	mov.w	r3, #32
 80057e6:	f04f 0400 	mov.w	r4, #0
 80057ea:	e02f      	b.n	800584c <UART_SetConfig+0x5c4>
 80057ec:	f04f 0310 	mov.w	r3, #16
 80057f0:	f04f 0400 	mov.w	r4, #0
 80057f4:	e02a      	b.n	800584c <UART_SetConfig+0x5c4>
 80057f6:	f04f 030c 	mov.w	r3, #12
 80057fa:	f04f 0400 	mov.w	r4, #0
 80057fe:	e025      	b.n	800584c <UART_SetConfig+0x5c4>
 8005800:	f04f 030a 	mov.w	r3, #10
 8005804:	f04f 0400 	mov.w	r4, #0
 8005808:	e020      	b.n	800584c <UART_SetConfig+0x5c4>
 800580a:	f04f 0308 	mov.w	r3, #8
 800580e:	f04f 0400 	mov.w	r4, #0
 8005812:	e01b      	b.n	800584c <UART_SetConfig+0x5c4>
 8005814:	f04f 0306 	mov.w	r3, #6
 8005818:	f04f 0400 	mov.w	r4, #0
 800581c:	e016      	b.n	800584c <UART_SetConfig+0x5c4>
 800581e:	bf00      	nop
 8005820:	0028b0aa 	.word	0x0028b0aa
 8005824:	003d0900 	.word	0x003d0900
 8005828:	007a1200 	.word	0x007a1200
 800582c:	00f42400 	.word	0x00f42400
 8005830:	f04f 0304 	mov.w	r3, #4
 8005834:	f04f 0400 	mov.w	r4, #0
 8005838:	e008      	b.n	800584c <UART_SetConfig+0x5c4>
 800583a:	f04f 0302 	mov.w	r3, #2
 800583e:	f04f 0400 	mov.w	r4, #0
 8005842:	e003      	b.n	800584c <UART_SetConfig+0x5c4>
 8005844:	f04f 0301 	mov.w	r3, #1
 8005848:	f04f 0400 	mov.w	r4, #0
 800584c:	461a      	mov	r2, r3
 800584e:	4623      	mov	r3, r4
 8005850:	f7fa fc96 	bl	8000180 <__aeabi_uldivmod>
 8005854:	4603      	mov	r3, r0
 8005856:	460c      	mov	r4, r1
 8005858:	4619      	mov	r1, r3
 800585a:	4622      	mov	r2, r4
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	f04f 0400 	mov.w	r4, #0
 8005864:	0214      	lsls	r4, r2, #8
 8005866:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800586a:	020b      	lsls	r3, r1, #8
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6852      	ldr	r2, [r2, #4]
 8005870:	0852      	lsrs	r2, r2, #1
 8005872:	4611      	mov	r1, r2
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	eb13 0b01 	adds.w	fp, r3, r1
 800587c:	eb44 0c02 	adc.w	ip, r4, r2
 8005880:	4658      	mov	r0, fp
 8005882:	4661      	mov	r1, ip
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f04f 0400 	mov.w	r4, #0
 800588c:	461a      	mov	r2, r3
 800588e:	4623      	mov	r3, r4
 8005890:	f7fa fc76 	bl	8000180 <__aeabi_uldivmod>
 8005894:	4603      	mov	r3, r0
 8005896:	460c      	mov	r4, r1
 8005898:	61fb      	str	r3, [r7, #28]
            break;
 800589a:	e1c6      	b.n	8005c2a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d05b      	beq.n	800595c <UART_SetConfig+0x6d4>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d053      	beq.n	8005954 <UART_SetConfig+0x6cc>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d04b      	beq.n	800594c <UART_SetConfig+0x6c4>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d043      	beq.n	8005944 <UART_SetConfig+0x6bc>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d03b      	beq.n	800593c <UART_SetConfig+0x6b4>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	d033      	beq.n	8005934 <UART_SetConfig+0x6ac>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	2b06      	cmp	r3, #6
 80058d2:	d02b      	beq.n	800592c <UART_SetConfig+0x6a4>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	2b07      	cmp	r3, #7
 80058da:	d023      	beq.n	8005924 <UART_SetConfig+0x69c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d01b      	beq.n	800591c <UART_SetConfig+0x694>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	2b09      	cmp	r3, #9
 80058ea:	d013      	beq.n	8005914 <UART_SetConfig+0x68c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2b0a      	cmp	r3, #10
 80058f2:	d00b      	beq.n	800590c <UART_SetConfig+0x684>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2b0b      	cmp	r3, #11
 80058fa:	d103      	bne.n	8005904 <UART_SetConfig+0x67c>
 80058fc:	4bae      	ldr	r3, [pc, #696]	; (8005bb8 <UART_SetConfig+0x930>)
 80058fe:	f04f 0400 	mov.w	r4, #0
 8005902:	e02e      	b.n	8005962 <UART_SetConfig+0x6da>
 8005904:	4bad      	ldr	r3, [pc, #692]	; (8005bbc <UART_SetConfig+0x934>)
 8005906:	f04f 0400 	mov.w	r4, #0
 800590a:	e02a      	b.n	8005962 <UART_SetConfig+0x6da>
 800590c:	4bac      	ldr	r3, [pc, #688]	; (8005bc0 <UART_SetConfig+0x938>)
 800590e:	f04f 0400 	mov.w	r4, #0
 8005912:	e026      	b.n	8005962 <UART_SetConfig+0x6da>
 8005914:	4bab      	ldr	r3, [pc, #684]	; (8005bc4 <UART_SetConfig+0x93c>)
 8005916:	f04f 0400 	mov.w	r4, #0
 800591a:	e022      	b.n	8005962 <UART_SetConfig+0x6da>
 800591c:	4baa      	ldr	r3, [pc, #680]	; (8005bc8 <UART_SetConfig+0x940>)
 800591e:	f04f 0400 	mov.w	r4, #0
 8005922:	e01e      	b.n	8005962 <UART_SetConfig+0x6da>
 8005924:	4ba9      	ldr	r3, [pc, #676]	; (8005bcc <UART_SetConfig+0x944>)
 8005926:	f04f 0400 	mov.w	r4, #0
 800592a:	e01a      	b.n	8005962 <UART_SetConfig+0x6da>
 800592c:	a49e      	add	r4, pc, #632	; (adr r4, 8005ba8 <UART_SetConfig+0x920>)
 800592e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005932:	e016      	b.n	8005962 <UART_SetConfig+0x6da>
 8005934:	4ba6      	ldr	r3, [pc, #664]	; (8005bd0 <UART_SetConfig+0x948>)
 8005936:	f04f 0400 	mov.w	r4, #0
 800593a:	e012      	b.n	8005962 <UART_SetConfig+0x6da>
 800593c:	4ba5      	ldr	r3, [pc, #660]	; (8005bd4 <UART_SetConfig+0x94c>)
 800593e:	f04f 0400 	mov.w	r4, #0
 8005942:	e00e      	b.n	8005962 <UART_SetConfig+0x6da>
 8005944:	a49a      	add	r4, pc, #616	; (adr r4, 8005bb0 <UART_SetConfig+0x928>)
 8005946:	e9d4 3400 	ldrd	r3, r4, [r4]
 800594a:	e00a      	b.n	8005962 <UART_SetConfig+0x6da>
 800594c:	4ba2      	ldr	r3, [pc, #648]	; (8005bd8 <UART_SetConfig+0x950>)
 800594e:	f04f 0400 	mov.w	r4, #0
 8005952:	e006      	b.n	8005962 <UART_SetConfig+0x6da>
 8005954:	4ba1      	ldr	r3, [pc, #644]	; (8005bdc <UART_SetConfig+0x954>)
 8005956:	f04f 0400 	mov.w	r4, #0
 800595a:	e002      	b.n	8005962 <UART_SetConfig+0x6da>
 800595c:	4b97      	ldr	r3, [pc, #604]	; (8005bbc <UART_SetConfig+0x934>)
 800595e:	f04f 0400 	mov.w	r4, #0
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6852      	ldr	r2, [r2, #4]
 8005966:	0852      	lsrs	r2, r2, #1
 8005968:	4611      	mov	r1, r2
 800596a:	f04f 0200 	mov.w	r2, #0
 800596e:	eb13 0b01 	adds.w	fp, r3, r1
 8005972:	eb44 0c02 	adc.w	ip, r4, r2
 8005976:	4658      	mov	r0, fp
 8005978:	4661      	mov	r1, ip
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f04f 0400 	mov.w	r4, #0
 8005982:	461a      	mov	r2, r3
 8005984:	4623      	mov	r3, r4
 8005986:	f7fa fbfb 	bl	8000180 <__aeabi_uldivmod>
 800598a:	4603      	mov	r3, r0
 800598c:	460c      	mov	r4, r1
 800598e:	61fb      	str	r3, [r7, #28]
            break;
 8005990:	e14b      	b.n	8005c2a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005992:	f7fd fc41 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8005996:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4618      	mov	r0, r3
 800599c:	f04f 0100 	mov.w	r1, #0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d067      	beq.n	8005a78 <UART_SetConfig+0x7f0>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d05e      	beq.n	8005a6e <UART_SetConfig+0x7e6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d055      	beq.n	8005a64 <UART_SetConfig+0x7dc>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d04c      	beq.n	8005a5a <UART_SetConfig+0x7d2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d043      	beq.n	8005a50 <UART_SetConfig+0x7c8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	2b05      	cmp	r3, #5
 80059ce:	d03a      	beq.n	8005a46 <UART_SetConfig+0x7be>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	2b06      	cmp	r3, #6
 80059d6:	d031      	beq.n	8005a3c <UART_SetConfig+0x7b4>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2b07      	cmp	r3, #7
 80059de:	d028      	beq.n	8005a32 <UART_SetConfig+0x7aa>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d01f      	beq.n	8005a28 <UART_SetConfig+0x7a0>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	2b09      	cmp	r3, #9
 80059ee:	d016      	beq.n	8005a1e <UART_SetConfig+0x796>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	2b0a      	cmp	r3, #10
 80059f6:	d00d      	beq.n	8005a14 <UART_SetConfig+0x78c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	2b0b      	cmp	r3, #11
 80059fe:	d104      	bne.n	8005a0a <UART_SetConfig+0x782>
 8005a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a04:	f04f 0400 	mov.w	r4, #0
 8005a08:	e03a      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a0a:	f04f 0301 	mov.w	r3, #1
 8005a0e:	f04f 0400 	mov.w	r4, #0
 8005a12:	e035      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a14:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005a18:	f04f 0400 	mov.w	r4, #0
 8005a1c:	e030      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005a22:	f04f 0400 	mov.w	r4, #0
 8005a26:	e02b      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a28:	f04f 0320 	mov.w	r3, #32
 8005a2c:	f04f 0400 	mov.w	r4, #0
 8005a30:	e026      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a32:	f04f 0310 	mov.w	r3, #16
 8005a36:	f04f 0400 	mov.w	r4, #0
 8005a3a:	e021      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a3c:	f04f 030c 	mov.w	r3, #12
 8005a40:	f04f 0400 	mov.w	r4, #0
 8005a44:	e01c      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a46:	f04f 030a 	mov.w	r3, #10
 8005a4a:	f04f 0400 	mov.w	r4, #0
 8005a4e:	e017      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a50:	f04f 0308 	mov.w	r3, #8
 8005a54:	f04f 0400 	mov.w	r4, #0
 8005a58:	e012      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a5a:	f04f 0306 	mov.w	r3, #6
 8005a5e:	f04f 0400 	mov.w	r4, #0
 8005a62:	e00d      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a64:	f04f 0304 	mov.w	r3, #4
 8005a68:	f04f 0400 	mov.w	r4, #0
 8005a6c:	e008      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a6e:	f04f 0302 	mov.w	r3, #2
 8005a72:	f04f 0400 	mov.w	r4, #0
 8005a76:	e003      	b.n	8005a80 <UART_SetConfig+0x7f8>
 8005a78:	f04f 0301 	mov.w	r3, #1
 8005a7c:	f04f 0400 	mov.w	r4, #0
 8005a80:	461a      	mov	r2, r3
 8005a82:	4623      	mov	r3, r4
 8005a84:	f7fa fb7c 	bl	8000180 <__aeabi_uldivmod>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4622      	mov	r2, r4
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	f04f 0400 	mov.w	r4, #0
 8005a98:	0214      	lsls	r4, r2, #8
 8005a9a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005a9e:	020b      	lsls	r3, r1, #8
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6852      	ldr	r2, [r2, #4]
 8005aa4:	0852      	lsrs	r2, r2, #1
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	eb13 0b01 	adds.w	fp, r3, r1
 8005ab0:	eb44 0c02 	adc.w	ip, r4, r2
 8005ab4:	4658      	mov	r0, fp
 8005ab6:	4661      	mov	r1, ip
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f04f 0400 	mov.w	r4, #0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4623      	mov	r3, r4
 8005ac4:	f7fa fb5c 	bl	8000180 <__aeabi_uldivmod>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	61fb      	str	r3, [r7, #28]
            break;
 8005ace:	e0ac      	b.n	8005c2a <UART_SetConfig+0x9a2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8089 	beq.w	8005bec <UART_SetConfig+0x964>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d05b      	beq.n	8005b9a <UART_SetConfig+0x912>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d052      	beq.n	8005b90 <UART_SetConfig+0x908>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d04a      	beq.n	8005b88 <UART_SetConfig+0x900>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d041      	beq.n	8005b7e <UART_SetConfig+0x8f6>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	2b05      	cmp	r3, #5
 8005b00:	d039      	beq.n	8005b76 <UART_SetConfig+0x8ee>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	2b06      	cmp	r3, #6
 8005b08:	d031      	beq.n	8005b6e <UART_SetConfig+0x8e6>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	2b07      	cmp	r3, #7
 8005b10:	d028      	beq.n	8005b64 <UART_SetConfig+0x8dc>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d01f      	beq.n	8005b5a <UART_SetConfig+0x8d2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	2b09      	cmp	r3, #9
 8005b20:	d016      	beq.n	8005b50 <UART_SetConfig+0x8c8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	2b0a      	cmp	r3, #10
 8005b28:	d00d      	beq.n	8005b46 <UART_SetConfig+0x8be>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	2b0b      	cmp	r3, #11
 8005b30:	d104      	bne.n	8005b3c <UART_SetConfig+0x8b4>
 8005b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b36:	f04f 0400 	mov.w	r4, #0
 8005b3a:	e05b      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005b3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b40:	f04f 0400 	mov.w	r4, #0
 8005b44:	e056      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b4a:	f04f 0400 	mov.w	r4, #0
 8005b4e:	e051      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b54:	f04f 0400 	mov.w	r4, #0
 8005b58:	e04c      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005b5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b5e:	f04f 0400 	mov.w	r4, #0
 8005b62:	e047      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005b64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b68:	f04f 0400 	mov.w	r4, #0
 8005b6c:	e042      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005b6e:	4b1c      	ldr	r3, [pc, #112]	; (8005be0 <UART_SetConfig+0x958>)
 8005b70:	f04f 0400 	mov.w	r4, #0
 8005b74:	e03e      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005b76:	4b1b      	ldr	r3, [pc, #108]	; (8005be4 <UART_SetConfig+0x95c>)
 8005b78:	f04f 0400 	mov.w	r4, #0
 8005b7c:	e03a      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005b7e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b82:	f04f 0400 	mov.w	r4, #0
 8005b86:	e035      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005b88:	4b17      	ldr	r3, [pc, #92]	; (8005be8 <UART_SetConfig+0x960>)
 8005b8a:	f04f 0400 	mov.w	r4, #0
 8005b8e:	e031      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005b90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b94:	f04f 0400 	mov.w	r4, #0
 8005b98:	e02c      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b9e:	f04f 0400 	mov.w	r4, #0
 8005ba2:	e027      	b.n	8005bf4 <UART_SetConfig+0x96c>
 8005ba4:	f3af 8000 	nop.w
 8005ba8:	14585500 	.word	0x14585500
 8005bac:	00000000 	.word	0x00000000
 8005bb0:	28b0aa00 	.word	0x28b0aa00
 8005bb4:	00000000 	.word	0x00000000
 8005bb8:	00f42400 	.word	0x00f42400
 8005bbc:	f4240000 	.word	0xf4240000
 8005bc0:	01e84800 	.word	0x01e84800
 8005bc4:	03d09000 	.word	0x03d09000
 8005bc8:	07a12000 	.word	0x07a12000
 8005bcc:	0f424000 	.word	0x0f424000
 8005bd0:	186a0000 	.word	0x186a0000
 8005bd4:	1e848000 	.word	0x1e848000
 8005bd8:	3d090000 	.word	0x3d090000
 8005bdc:	7a120000 	.word	0x7a120000
 8005be0:	000aaa00 	.word	0x000aaa00
 8005be4:	000ccc00 	.word	0x000ccc00
 8005be8:	00155500 	.word	0x00155500
 8005bec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005bf0:	f04f 0400 	mov.w	r4, #0
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6852      	ldr	r2, [r2, #4]
 8005bf8:	0852      	lsrs	r2, r2, #1
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	eb13 0b01 	adds.w	fp, r3, r1
 8005c04:	eb44 0c02 	adc.w	ip, r4, r2
 8005c08:	4658      	mov	r0, fp
 8005c0a:	4661      	mov	r1, ip
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f04f 0400 	mov.w	r4, #0
 8005c14:	461a      	mov	r2, r3
 8005c16:	4623      	mov	r3, r4
 8005c18:	f7fa fab2 	bl	8000180 <__aeabi_uldivmod>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	61fb      	str	r3, [r7, #28]
            break;
 8005c22:	e002      	b.n	8005c2a <UART_SetConfig+0x9a2>
          default:
            ret = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	76fb      	strb	r3, [r7, #27]
            break;
 8005c28:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c30:	d308      	bcc.n	8005c44 <UART_SetConfig+0x9bc>
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c38:	d204      	bcs.n	8005c44 <UART_SetConfig+0x9bc>
        {
          huart->Instance->BRR = usartdiv;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	e35b      	b.n	80062fc <UART_SetConfig+0x1074>
        }
        else
        {
          ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	76fb      	strb	r3, [r7, #27]
 8005c48:	e358      	b.n	80062fc <UART_SetConfig+0x1074>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c52:	f040 81a6 	bne.w	8005fa2 <UART_SetConfig+0xd1a>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	2b07      	cmp	r3, #7
 8005c5e:	f200 8180 	bhi.w	8005f62 <UART_SetConfig+0xcda>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0x9e0>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005c89 	.word	0x08005c89
 8005c6c:	08005d41 	.word	0x08005d41
 8005c70:	08005f63 	.word	0x08005f63
 8005c74:	08005de9 	.word	0x08005de9
 8005c78:	08005f63 	.word	0x08005f63
 8005c7c:	08005f63 	.word	0x08005f63
 8005c80:	08005f63 	.word	0x08005f63
 8005c84:	08005ea1 	.word	0x08005ea1
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c88:	f7fd fb5a 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8005c8c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d044      	beq.n	8005d20 <UART_SetConfig+0xa98>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d03e      	beq.n	8005d1c <UART_SetConfig+0xa94>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d038      	beq.n	8005d18 <UART_SetConfig+0xa90>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d032      	beq.n	8005d14 <UART_SetConfig+0xa8c>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d02c      	beq.n	8005d10 <UART_SetConfig+0xa88>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d026      	beq.n	8005d0c <UART_SetConfig+0xa84>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	2b06      	cmp	r3, #6
 8005cc4:	d020      	beq.n	8005d08 <UART_SetConfig+0xa80>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	2b07      	cmp	r3, #7
 8005ccc:	d01a      	beq.n	8005d04 <UART_SetConfig+0xa7c>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d014      	beq.n	8005d00 <UART_SetConfig+0xa78>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b09      	cmp	r3, #9
 8005cdc:	d00e      	beq.n	8005cfc <UART_SetConfig+0xa74>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	2b0a      	cmp	r3, #10
 8005ce4:	d008      	beq.n	8005cf8 <UART_SetConfig+0xa70>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b0b      	cmp	r3, #11
 8005cec:	d102      	bne.n	8005cf4 <UART_SetConfig+0xa6c>
 8005cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cf2:	e016      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e014      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005cf8:	2380      	movs	r3, #128	; 0x80
 8005cfa:	e012      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005cfc:	2340      	movs	r3, #64	; 0x40
 8005cfe:	e010      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005d00:	2320      	movs	r3, #32
 8005d02:	e00e      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005d04:	2310      	movs	r3, #16
 8005d06:	e00c      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005d08:	230c      	movs	r3, #12
 8005d0a:	e00a      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005d0c:	230a      	movs	r3, #10
 8005d0e:	e008      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005d10:	2308      	movs	r3, #8
 8005d12:	e006      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005d14:	2306      	movs	r3, #6
 8005d16:	e004      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	e002      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e000      	b.n	8005d22 <UART_SetConfig+0xa9a>
 8005d20:	2301      	movs	r3, #1
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d28:	005a      	lsls	r2, r3, #1
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	441a      	add	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	61fb      	str	r3, [r7, #28]
        break;
 8005d3e:	e113      	b.n	8005f68 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d043      	beq.n	8005dd0 <UART_SetConfig+0xb48>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d03d      	beq.n	8005dcc <UART_SetConfig+0xb44>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d037      	beq.n	8005dc8 <UART_SetConfig+0xb40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d031      	beq.n	8005dc4 <UART_SetConfig+0xb3c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	2b04      	cmp	r3, #4
 8005d66:	d02b      	beq.n	8005dc0 <UART_SetConfig+0xb38>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	2b05      	cmp	r3, #5
 8005d6e:	d025      	beq.n	8005dbc <UART_SetConfig+0xb34>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	2b06      	cmp	r3, #6
 8005d76:	d01f      	beq.n	8005db8 <UART_SetConfig+0xb30>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	2b07      	cmp	r3, #7
 8005d7e:	d019      	beq.n	8005db4 <UART_SetConfig+0xb2c>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d013      	beq.n	8005db0 <UART_SetConfig+0xb28>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2b09      	cmp	r3, #9
 8005d8e:	d00d      	beq.n	8005dac <UART_SetConfig+0xb24>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	2b0a      	cmp	r3, #10
 8005d96:	d007      	beq.n	8005da8 <UART_SetConfig+0xb20>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	2b0b      	cmp	r3, #11
 8005d9e:	d101      	bne.n	8005da4 <UART_SetConfig+0xb1c>
 8005da0:	4b8c      	ldr	r3, [pc, #560]	; (8005fd4 <UART_SetConfig+0xd4c>)
 8005da2:	e016      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005da4:	4b8c      	ldr	r3, [pc, #560]	; (8005fd8 <UART_SetConfig+0xd50>)
 8005da6:	e014      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005da8:	4b8c      	ldr	r3, [pc, #560]	; (8005fdc <UART_SetConfig+0xd54>)
 8005daa:	e012      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005dac:	4b8c      	ldr	r3, [pc, #560]	; (8005fe0 <UART_SetConfig+0xd58>)
 8005dae:	e010      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005db0:	4b8c      	ldr	r3, [pc, #560]	; (8005fe4 <UART_SetConfig+0xd5c>)
 8005db2:	e00e      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005db4:	4b8c      	ldr	r3, [pc, #560]	; (8005fe8 <UART_SetConfig+0xd60>)
 8005db6:	e00c      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005db8:	4b8c      	ldr	r3, [pc, #560]	; (8005fec <UART_SetConfig+0xd64>)
 8005dba:	e00a      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005dbc:	4b8c      	ldr	r3, [pc, #560]	; (8005ff0 <UART_SetConfig+0xd68>)
 8005dbe:	e008      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005dc0:	4b8c      	ldr	r3, [pc, #560]	; (8005ff4 <UART_SetConfig+0xd6c>)
 8005dc2:	e006      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005dc4:	4b8c      	ldr	r3, [pc, #560]	; (8005ff8 <UART_SetConfig+0xd70>)
 8005dc6:	e004      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005dc8:	4b8c      	ldr	r3, [pc, #560]	; (8005ffc <UART_SetConfig+0xd74>)
 8005dca:	e002      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005dcc:	4b8c      	ldr	r3, [pc, #560]	; (8006000 <UART_SetConfig+0xd78>)
 8005dce:	e000      	b.n	8005dd2 <UART_SetConfig+0xb4a>
 8005dd0:	4b81      	ldr	r3, [pc, #516]	; (8005fd8 <UART_SetConfig+0xd50>)
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6852      	ldr	r2, [r2, #4]
 8005dd6:	0852      	lsrs	r2, r2, #1
 8005dd8:	441a      	add	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	61fb      	str	r3, [r7, #28]
        break;
 8005de6:	e0bf      	b.n	8005f68 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de8:	f7fd fa16 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8005dec:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d044      	beq.n	8005e80 <UART_SetConfig+0xbf8>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d03e      	beq.n	8005e7c <UART_SetConfig+0xbf4>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d038      	beq.n	8005e78 <UART_SetConfig+0xbf0>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d032      	beq.n	8005e74 <UART_SetConfig+0xbec>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d02c      	beq.n	8005e70 <UART_SetConfig+0xbe8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	2b05      	cmp	r3, #5
 8005e1c:	d026      	beq.n	8005e6c <UART_SetConfig+0xbe4>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	2b06      	cmp	r3, #6
 8005e24:	d020      	beq.n	8005e68 <UART_SetConfig+0xbe0>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	2b07      	cmp	r3, #7
 8005e2c:	d01a      	beq.n	8005e64 <UART_SetConfig+0xbdc>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d014      	beq.n	8005e60 <UART_SetConfig+0xbd8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	2b09      	cmp	r3, #9
 8005e3c:	d00e      	beq.n	8005e5c <UART_SetConfig+0xbd4>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	2b0a      	cmp	r3, #10
 8005e44:	d008      	beq.n	8005e58 <UART_SetConfig+0xbd0>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2b0b      	cmp	r3, #11
 8005e4c:	d102      	bne.n	8005e54 <UART_SetConfig+0xbcc>
 8005e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e52:	e016      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e014      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e58:	2380      	movs	r3, #128	; 0x80
 8005e5a:	e012      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e5c:	2340      	movs	r3, #64	; 0x40
 8005e5e:	e010      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e60:	2320      	movs	r3, #32
 8005e62:	e00e      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e64:	2310      	movs	r3, #16
 8005e66:	e00c      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e68:	230c      	movs	r3, #12
 8005e6a:	e00a      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e6c:	230a      	movs	r3, #10
 8005e6e:	e008      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e70:	2308      	movs	r3, #8
 8005e72:	e006      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e74:	2306      	movs	r3, #6
 8005e76:	e004      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	e002      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e000      	b.n	8005e82 <UART_SetConfig+0xbfa>
 8005e80:	2301      	movs	r3, #1
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	005a      	lsls	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	441a      	add	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	61fb      	str	r3, [r7, #28]
        break;
 8005e9e:	e063      	b.n	8005f68 <UART_SetConfig+0xce0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d04f      	beq.n	8005f48 <UART_SetConfig+0xcc0>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d048      	beq.n	8005f42 <UART_SetConfig+0xcba>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d041      	beq.n	8005f3c <UART_SetConfig+0xcb4>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d03a      	beq.n	8005f36 <UART_SetConfig+0xcae>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d033      	beq.n	8005f30 <UART_SetConfig+0xca8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	2b05      	cmp	r3, #5
 8005ece:	d02c      	beq.n	8005f2a <UART_SetConfig+0xca2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	2b06      	cmp	r3, #6
 8005ed6:	d025      	beq.n	8005f24 <UART_SetConfig+0xc9c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2b07      	cmp	r3, #7
 8005ede:	d01e      	beq.n	8005f1e <UART_SetConfig+0xc96>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d017      	beq.n	8005f18 <UART_SetConfig+0xc90>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	2b09      	cmp	r3, #9
 8005eee:	d010      	beq.n	8005f12 <UART_SetConfig+0xc8a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	2b0a      	cmp	r3, #10
 8005ef6:	d009      	beq.n	8005f0c <UART_SetConfig+0xc84>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	2b0b      	cmp	r3, #11
 8005efe:	d102      	bne.n	8005f06 <UART_SetConfig+0xc7e>
 8005f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f04:	e022      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f0a:	e01f      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f10:	e01c      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f16:	e019      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f1c:	e016      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f22:	e013      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f24:	f241 5354 	movw	r3, #5460	; 0x1554
 8005f28:	e010      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f2a:	f641 1398 	movw	r3, #6552	; 0x1998
 8005f2e:	e00d      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f34:	e00a      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f36:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8005f3a:	e007      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f40:	e004      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f46:	e001      	b.n	8005f4c <UART_SetConfig+0xcc4>
 8005f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6852      	ldr	r2, [r2, #4]
 8005f50:	0852      	lsrs	r2, r2, #1
 8005f52:	441a      	add	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	61fb      	str	r3, [r7, #28]
        break;
 8005f60:	e002      	b.n	8005f68 <UART_SetConfig+0xce0>
      default:
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	76fb      	strb	r3, [r7, #27]
        break;
 8005f66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b0f      	cmp	r3, #15
 8005f6c:	d916      	bls.n	8005f9c <UART_SetConfig+0xd14>
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f74:	d212      	bcs.n	8005f9c <UART_SetConfig+0xd14>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	f023 030f 	bic.w	r3, r3, #15
 8005f7e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	085b      	lsrs	r3, r3, #1
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	89fb      	ldrh	r3, [r7, #14]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	89fa      	ldrh	r2, [r7, #14]
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	e1af      	b.n	80062fc <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	76fb      	strb	r3, [r7, #27]
 8005fa0:	e1ac      	b.n	80062fc <UART_SetConfig+0x1074>
    }
  }
  else
  {
    switch (clocksource)
 8005fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	2b07      	cmp	r3, #7
 8005faa:	f200 8196 	bhi.w	80062da <UART_SetConfig+0x1052>
 8005fae:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <UART_SetConfig+0xd2c>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08006005 	.word	0x08006005
 8005fb8:	080060bb 	.word	0x080060bb
 8005fbc:	080062db 	.word	0x080062db
 8005fc0:	08006165 	.word	0x08006165
 8005fc4:	080062db 	.word	0x080062db
 8005fc8:	080062db 	.word	0x080062db
 8005fcc:	080062db 	.word	0x080062db
 8005fd0:	0800621b 	.word	0x0800621b
 8005fd4:	0001e848 	.word	0x0001e848
 8005fd8:	01e84800 	.word	0x01e84800
 8005fdc:	0003d090 	.word	0x0003d090
 8005fe0:	0007a120 	.word	0x0007a120
 8005fe4:	000f4240 	.word	0x000f4240
 8005fe8:	001e8480 	.word	0x001e8480
 8005fec:	0028b0aa 	.word	0x0028b0aa
 8005ff0:	0030d400 	.word	0x0030d400
 8005ff4:	003d0900 	.word	0x003d0900
 8005ff8:	00516154 	.word	0x00516154
 8005ffc:	007a1200 	.word	0x007a1200
 8006000:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006004:	f7fd f99c 	bl	8003340 <HAL_RCC_GetPCLK2Freq>
 8006008:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d044      	beq.n	800609c <UART_SetConfig+0xe14>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	2b01      	cmp	r3, #1
 8006018:	d03e      	beq.n	8006098 <UART_SetConfig+0xe10>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	2b02      	cmp	r3, #2
 8006020:	d038      	beq.n	8006094 <UART_SetConfig+0xe0c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	2b03      	cmp	r3, #3
 8006028:	d032      	beq.n	8006090 <UART_SetConfig+0xe08>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	2b04      	cmp	r3, #4
 8006030:	d02c      	beq.n	800608c <UART_SetConfig+0xe04>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b05      	cmp	r3, #5
 8006038:	d026      	beq.n	8006088 <UART_SetConfig+0xe00>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b06      	cmp	r3, #6
 8006040:	d020      	beq.n	8006084 <UART_SetConfig+0xdfc>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b07      	cmp	r3, #7
 8006048:	d01a      	beq.n	8006080 <UART_SetConfig+0xdf8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b08      	cmp	r3, #8
 8006050:	d014      	beq.n	800607c <UART_SetConfig+0xdf4>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	2b09      	cmp	r3, #9
 8006058:	d00e      	beq.n	8006078 <UART_SetConfig+0xdf0>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	2b0a      	cmp	r3, #10
 8006060:	d008      	beq.n	8006074 <UART_SetConfig+0xdec>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	2b0b      	cmp	r3, #11
 8006068:	d102      	bne.n	8006070 <UART_SetConfig+0xde8>
 800606a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800606e:	e016      	b.n	800609e <UART_SetConfig+0xe16>
 8006070:	2301      	movs	r3, #1
 8006072:	e014      	b.n	800609e <UART_SetConfig+0xe16>
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	e012      	b.n	800609e <UART_SetConfig+0xe16>
 8006078:	2340      	movs	r3, #64	; 0x40
 800607a:	e010      	b.n	800609e <UART_SetConfig+0xe16>
 800607c:	2320      	movs	r3, #32
 800607e:	e00e      	b.n	800609e <UART_SetConfig+0xe16>
 8006080:	2310      	movs	r3, #16
 8006082:	e00c      	b.n	800609e <UART_SetConfig+0xe16>
 8006084:	230c      	movs	r3, #12
 8006086:	e00a      	b.n	800609e <UART_SetConfig+0xe16>
 8006088:	230a      	movs	r3, #10
 800608a:	e008      	b.n	800609e <UART_SetConfig+0xe16>
 800608c:	2308      	movs	r3, #8
 800608e:	e006      	b.n	800609e <UART_SetConfig+0xe16>
 8006090:	2306      	movs	r3, #6
 8006092:	e004      	b.n	800609e <UART_SetConfig+0xe16>
 8006094:	2304      	movs	r3, #4
 8006096:	e002      	b.n	800609e <UART_SetConfig+0xe16>
 8006098:	2302      	movs	r3, #2
 800609a:	e000      	b.n	800609e <UART_SetConfig+0xe16>
 800609c:	2301      	movs	r3, #1
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	085b      	lsrs	r3, r3, #1
 80060aa:	441a      	add	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	61fb      	str	r3, [r7, #28]
        break;
 80060b8:	e112      	b.n	80062e0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d044      	beq.n	800614c <UART_SetConfig+0xec4>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d03e      	beq.n	8006148 <UART_SetConfig+0xec0>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d038      	beq.n	8006144 <UART_SetConfig+0xebc>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d032      	beq.n	8006140 <UART_SetConfig+0xeb8>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d02c      	beq.n	800613c <UART_SetConfig+0xeb4>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	d026      	beq.n	8006138 <UART_SetConfig+0xeb0>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b06      	cmp	r3, #6
 80060f0:	d020      	beq.n	8006134 <UART_SetConfig+0xeac>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b07      	cmp	r3, #7
 80060f8:	d01a      	beq.n	8006130 <UART_SetConfig+0xea8>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d014      	beq.n	800612c <UART_SetConfig+0xea4>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	2b09      	cmp	r3, #9
 8006108:	d00e      	beq.n	8006128 <UART_SetConfig+0xea0>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b0a      	cmp	r3, #10
 8006110:	d008      	beq.n	8006124 <UART_SetConfig+0xe9c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b0b      	cmp	r3, #11
 8006118:	d102      	bne.n	8006120 <UART_SetConfig+0xe98>
 800611a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800611e:	e016      	b.n	800614e <UART_SetConfig+0xec6>
 8006120:	4b80      	ldr	r3, [pc, #512]	; (8006324 <UART_SetConfig+0x109c>)
 8006122:	e014      	b.n	800614e <UART_SetConfig+0xec6>
 8006124:	4b80      	ldr	r3, [pc, #512]	; (8006328 <UART_SetConfig+0x10a0>)
 8006126:	e012      	b.n	800614e <UART_SetConfig+0xec6>
 8006128:	4b80      	ldr	r3, [pc, #512]	; (800632c <UART_SetConfig+0x10a4>)
 800612a:	e010      	b.n	800614e <UART_SetConfig+0xec6>
 800612c:	4b80      	ldr	r3, [pc, #512]	; (8006330 <UART_SetConfig+0x10a8>)
 800612e:	e00e      	b.n	800614e <UART_SetConfig+0xec6>
 8006130:	4b80      	ldr	r3, [pc, #512]	; (8006334 <UART_SetConfig+0x10ac>)
 8006132:	e00c      	b.n	800614e <UART_SetConfig+0xec6>
 8006134:	4b80      	ldr	r3, [pc, #512]	; (8006338 <UART_SetConfig+0x10b0>)
 8006136:	e00a      	b.n	800614e <UART_SetConfig+0xec6>
 8006138:	4b80      	ldr	r3, [pc, #512]	; (800633c <UART_SetConfig+0x10b4>)
 800613a:	e008      	b.n	800614e <UART_SetConfig+0xec6>
 800613c:	4b80      	ldr	r3, [pc, #512]	; (8006340 <UART_SetConfig+0x10b8>)
 800613e:	e006      	b.n	800614e <UART_SetConfig+0xec6>
 8006140:	4b80      	ldr	r3, [pc, #512]	; (8006344 <UART_SetConfig+0x10bc>)
 8006142:	e004      	b.n	800614e <UART_SetConfig+0xec6>
 8006144:	4b80      	ldr	r3, [pc, #512]	; (8006348 <UART_SetConfig+0x10c0>)
 8006146:	e002      	b.n	800614e <UART_SetConfig+0xec6>
 8006148:	4b80      	ldr	r3, [pc, #512]	; (800634c <UART_SetConfig+0x10c4>)
 800614a:	e000      	b.n	800614e <UART_SetConfig+0xec6>
 800614c:	4b75      	ldr	r3, [pc, #468]	; (8006324 <UART_SetConfig+0x109c>)
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6852      	ldr	r2, [r2, #4]
 8006152:	0852      	lsrs	r2, r2, #1
 8006154:	441a      	add	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	fbb2 f3f3 	udiv	r3, r2, r3
 800615e:	b29b      	uxth	r3, r3
 8006160:	61fb      	str	r3, [r7, #28]
        break;
 8006162:	e0bd      	b.n	80062e0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006164:	f7fd f858 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8006168:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	d044      	beq.n	80061fc <UART_SetConfig+0xf74>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	2b01      	cmp	r3, #1
 8006178:	d03e      	beq.n	80061f8 <UART_SetConfig+0xf70>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b02      	cmp	r3, #2
 8006180:	d038      	beq.n	80061f4 <UART_SetConfig+0xf6c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	2b03      	cmp	r3, #3
 8006188:	d032      	beq.n	80061f0 <UART_SetConfig+0xf68>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2b04      	cmp	r3, #4
 8006190:	d02c      	beq.n	80061ec <UART_SetConfig+0xf64>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b05      	cmp	r3, #5
 8006198:	d026      	beq.n	80061e8 <UART_SetConfig+0xf60>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b06      	cmp	r3, #6
 80061a0:	d020      	beq.n	80061e4 <UART_SetConfig+0xf5c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	2b07      	cmp	r3, #7
 80061a8:	d01a      	beq.n	80061e0 <UART_SetConfig+0xf58>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b08      	cmp	r3, #8
 80061b0:	d014      	beq.n	80061dc <UART_SetConfig+0xf54>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	2b09      	cmp	r3, #9
 80061b8:	d00e      	beq.n	80061d8 <UART_SetConfig+0xf50>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	2b0a      	cmp	r3, #10
 80061c0:	d008      	beq.n	80061d4 <UART_SetConfig+0xf4c>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	2b0b      	cmp	r3, #11
 80061c8:	d102      	bne.n	80061d0 <UART_SetConfig+0xf48>
 80061ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061ce:	e016      	b.n	80061fe <UART_SetConfig+0xf76>
 80061d0:	2301      	movs	r3, #1
 80061d2:	e014      	b.n	80061fe <UART_SetConfig+0xf76>
 80061d4:	2380      	movs	r3, #128	; 0x80
 80061d6:	e012      	b.n	80061fe <UART_SetConfig+0xf76>
 80061d8:	2340      	movs	r3, #64	; 0x40
 80061da:	e010      	b.n	80061fe <UART_SetConfig+0xf76>
 80061dc:	2320      	movs	r3, #32
 80061de:	e00e      	b.n	80061fe <UART_SetConfig+0xf76>
 80061e0:	2310      	movs	r3, #16
 80061e2:	e00c      	b.n	80061fe <UART_SetConfig+0xf76>
 80061e4:	230c      	movs	r3, #12
 80061e6:	e00a      	b.n	80061fe <UART_SetConfig+0xf76>
 80061e8:	230a      	movs	r3, #10
 80061ea:	e008      	b.n	80061fe <UART_SetConfig+0xf76>
 80061ec:	2308      	movs	r3, #8
 80061ee:	e006      	b.n	80061fe <UART_SetConfig+0xf76>
 80061f0:	2306      	movs	r3, #6
 80061f2:	e004      	b.n	80061fe <UART_SetConfig+0xf76>
 80061f4:	2304      	movs	r3, #4
 80061f6:	e002      	b.n	80061fe <UART_SetConfig+0xf76>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e000      	b.n	80061fe <UART_SetConfig+0xf76>
 80061fc:	2301      	movs	r3, #1
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	fbb2 f2f3 	udiv	r2, r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	085b      	lsrs	r3, r3, #1
 800620a:	441a      	add	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	b29b      	uxth	r3, r3
 8006216:	61fb      	str	r3, [r7, #28]
        break;
 8006218:	e062      	b.n	80062e0 <UART_SetConfig+0x1058>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	2b00      	cmp	r3, #0
 8006220:	d04e      	beq.n	80062c0 <UART_SetConfig+0x1038>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b01      	cmp	r3, #1
 8006228:	d047      	beq.n	80062ba <UART_SetConfig+0x1032>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	2b02      	cmp	r3, #2
 8006230:	d040      	beq.n	80062b4 <UART_SetConfig+0x102c>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	2b03      	cmp	r3, #3
 8006238:	d039      	beq.n	80062ae <UART_SetConfig+0x1026>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b04      	cmp	r3, #4
 8006240:	d032      	beq.n	80062a8 <UART_SetConfig+0x1020>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	2b05      	cmp	r3, #5
 8006248:	d02b      	beq.n	80062a2 <UART_SetConfig+0x101a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	2b06      	cmp	r3, #6
 8006250:	d024      	beq.n	800629c <UART_SetConfig+0x1014>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006256:	2b07      	cmp	r3, #7
 8006258:	d01d      	beq.n	8006296 <UART_SetConfig+0x100e>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	2b08      	cmp	r3, #8
 8006260:	d016      	beq.n	8006290 <UART_SetConfig+0x1008>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b09      	cmp	r3, #9
 8006268:	d00f      	beq.n	800628a <UART_SetConfig+0x1002>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2b0a      	cmp	r3, #10
 8006270:	d008      	beq.n	8006284 <UART_SetConfig+0xffc>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	2b0b      	cmp	r3, #11
 8006278:	d101      	bne.n	800627e <UART_SetConfig+0xff6>
 800627a:	2380      	movs	r3, #128	; 0x80
 800627c:	e022      	b.n	80062c4 <UART_SetConfig+0x103c>
 800627e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006282:	e01f      	b.n	80062c4 <UART_SetConfig+0x103c>
 8006284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006288:	e01c      	b.n	80062c4 <UART_SetConfig+0x103c>
 800628a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800628e:	e019      	b.n	80062c4 <UART_SetConfig+0x103c>
 8006290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006294:	e016      	b.n	80062c4 <UART_SetConfig+0x103c>
 8006296:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800629a:	e013      	b.n	80062c4 <UART_SetConfig+0x103c>
 800629c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80062a0:	e010      	b.n	80062c4 <UART_SetConfig+0x103c>
 80062a2:	f640 43cc 	movw	r3, #3276	; 0xccc
 80062a6:	e00d      	b.n	80062c4 <UART_SetConfig+0x103c>
 80062a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062ac:	e00a      	b.n	80062c4 <UART_SetConfig+0x103c>
 80062ae:	f241 5355 	movw	r3, #5461	; 0x1555
 80062b2:	e007      	b.n	80062c4 <UART_SetConfig+0x103c>
 80062b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062b8:	e004      	b.n	80062c4 <UART_SetConfig+0x103c>
 80062ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062be:	e001      	b.n	80062c4 <UART_SetConfig+0x103c>
 80062c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6852      	ldr	r2, [r2, #4]
 80062c8:	0852      	lsrs	r2, r2, #1
 80062ca:	441a      	add	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	61fb      	str	r3, [r7, #28]
        break;
 80062d8:	e002      	b.n	80062e0 <UART_SetConfig+0x1058>
      default:
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	76fb      	strb	r3, [r7, #27]
        break;
 80062de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2b0f      	cmp	r3, #15
 80062e4:	d908      	bls.n	80062f8 <UART_SetConfig+0x1070>
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ec:	d204      	bcs.n	80062f8 <UART_SetConfig+0x1070>
    {
      huart->Instance->BRR = usartdiv;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	60da      	str	r2, [r3, #12]
 80062f6:	e001      	b.n	80062fc <UART_SetConfig+0x1074>
    }
    else
    {
      ret = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006318:	7efb      	ldrb	r3, [r7, #27]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3728      	adds	r7, #40	; 0x28
 800631e:	46bd      	mov	sp, r7
 8006320:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006324:	00f42400 	.word	0x00f42400
 8006328:	0001e848 	.word	0x0001e848
 800632c:	0003d090 	.word	0x0003d090
 8006330:	0007a120 	.word	0x0007a120
 8006334:	000f4240 	.word	0x000f4240
 8006338:	00145855 	.word	0x00145855
 800633c:	00186a00 	.word	0x00186a00
 8006340:	001e8480 	.word	0x001e8480
 8006344:	0028b0aa 	.word	0x0028b0aa
 8006348:	003d0900 	.word	0x003d0900
 800634c:	007a1200 	.word	0x007a1200

08006350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01a      	beq.n	8006466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800644e:	d10a      	bne.n	8006466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	605a      	str	r2, [r3, #4]
  }
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af02      	add	r7, sp, #8
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80064a4:	f7fa ff08 	bl	80012b8 <HAL_GetTick>
 80064a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d10e      	bne.n	80064d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f82c 	bl	8006524 <UART_WaitOnFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e022      	b.n	800651c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d10e      	bne.n	8006502 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f816 	bl	8006524 <UART_WaitOnFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e00c      	b.n	800651c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006534:	e062      	b.n	80065fc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d05e      	beq.n	80065fc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653e:	f7fa febb 	bl	80012b8 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	429a      	cmp	r2, r3
 800654c:	d302      	bcc.n	8006554 <UART_WaitOnFlagUntilTimeout+0x30>
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11d      	bne.n	8006590 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006562:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689a      	ldr	r2, [r3, #8]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0201 	bic.w	r2, r2, #1
 8006572:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e045      	b.n	800661c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b00      	cmp	r3, #0
 800659c:	d02e      	beq.n	80065fc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ac:	d126      	bne.n	80065fc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065b6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e00f      	b.n	800661c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69da      	ldr	r2, [r3, #28]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4013      	ands	r3, r2
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	bf0c      	ite	eq
 800660c:	2301      	moveq	r3, #1
 800660e:	2300      	movne	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	429a      	cmp	r2, r3
 8006618:	d08d      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800663a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800664a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006676:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d114      	bne.n	80066ec <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066d8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066ea:	e002      	b.n	80066f2 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7fe fdad 	bl	800524c <HAL_UART_TxCpltCallback>
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b084      	sub	sp, #16
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006706:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7fe fda9 	bl	8005260 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800670e:	bf00      	nop
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b086      	sub	sp, #24
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800672a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006732:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673e:	2b80      	cmp	r3, #128	; 0x80
 8006740:	d109      	bne.n	8006756 <UART_DMAError+0x40>
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b21      	cmp	r3, #33	; 0x21
 8006746:	d106      	bne.n	8006756 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2200      	movs	r2, #0
 800674c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006750:	6978      	ldr	r0, [r7, #20]
 8006752:	f7ff ff67 	bl	8006624 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d109      	bne.n	8006778 <UART_DMAError+0x62>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b22      	cmp	r3, #34	; 0x22
 8006768:	d106      	bne.n	8006778 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2200      	movs	r2, #0
 800676e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006772:	6978      	ldr	r0, [r7, #20]
 8006774:	f7ff ff74 	bl	8006660 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677e:	f043 0210 	orr.w	r2, r3, #16
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006788:	6978      	ldr	r0, [r7, #20]
 800678a:	f7fe fd73 	bl	8005274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800678e:	bf00      	nop
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7fe fd5d 	bl	8005274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067d8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7fe fd2f 	bl	800524c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ee:	bf00      	nop
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_UARTEx_DisableFifoMode+0x16>
 8006844:	2302      	movs	r3, #2
 8006846:	e027      	b.n	8006898 <HAL_UARTEx_DisableFifoMode+0x66>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2224      	movs	r2, #36	; 0x24
 8006854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006876:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e02d      	b.n	8006918 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2224      	movs	r2, #36	; 0x24
 80068c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0201 	bic.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f84f 	bl	800699c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006934:	2302      	movs	r3, #2
 8006936:	e02d      	b.n	8006994 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2224      	movs	r2, #36	; 0x24
 8006944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f022 0201 	bic.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f811 	bl	800699c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800699c:	b480      	push	{r7}
 800699e:	b089      	sub	sp, #36	; 0x24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80069a4:	4a2f      	ldr	r2, [pc, #188]	; (8006a64 <UARTEx_SetNbDataToProcess+0xc8>)
 80069a6:	f107 0314 	add.w	r3, r7, #20
 80069aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069ae:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80069b2:	4a2d      	ldr	r2, [pc, #180]	; (8006a68 <UARTEx_SetNbDataToProcess+0xcc>)
 80069b4:	f107 030c 	add.w	r3, r7, #12
 80069b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069bc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d108      	bne.n	80069da <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069d8:	e03d      	b.n	8006a56 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069da:	2308      	movs	r3, #8
 80069dc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069de:	2308      	movs	r3, #8
 80069e0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	0e5b      	lsrs	r3, r3, #25
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	0f5b      	lsrs	r3, r3, #29
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006a02:	7fbb      	ldrb	r3, [r7, #30]
 8006a04:	7f3a      	ldrb	r2, [r7, #28]
 8006a06:	f107 0120 	add.w	r1, r7, #32
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
 8006a14:	7f3a      	ldrb	r2, [r7, #28]
 8006a16:	f107 0120 	add.w	r1, r7, #32
 8006a1a:	440a      	add	r2, r1
 8006a1c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006a20:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006a2c:	7ffb      	ldrb	r3, [r7, #31]
 8006a2e:	7f7a      	ldrb	r2, [r7, #29]
 8006a30:	f107 0120 	add.w	r1, r7, #32
 8006a34:	440a      	add	r2, r1
 8006a36:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006a3a:	fb02 f303 	mul.w	r3, r2, r3
 8006a3e:	7f7a      	ldrb	r2, [r7, #29]
 8006a40:	f107 0120 	add.w	r1, r7, #32
 8006a44:	440a      	add	r2, r1
 8006a46:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006a4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a56:	bf00      	nop
 8006a58:	3724      	adds	r7, #36	; 0x24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	08007414 	.word	0x08007414
 8006a68:	0800741c 	.word	0x0800741c

08006a6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a74:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006a78:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	89fb      	ldrh	r3, [r7, #14]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006aa4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006aa8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	b21a      	sxth	r2, r3
 8006ab4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	b21b      	sxth	r3, r3
 8006abc:	4013      	ands	r3, r2
 8006abe:	b21b      	sxth	r3, r3
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	f107 0014 	add.w	r0, r7, #20
 8006ae4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ffaf 	bl	8006a6c <USB_EnableGlobalInt>

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b1a:	b004      	add	sp, #16
 8006b1c:	4770      	bx	lr
	...

08006b20 <drv_DMA_init>:
When a channel transfer error occurs, the EN bit of the DMA_CCRx register is cleared by
hardware. This EN bit cannot be set again by software to reactivate the channel x, until the
TEIFx bit of the DMA_ISR register is set.
 */
void drv_DMA_init(void)
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
  // Enable DMA clock
    RCC->AHB1ENR |= RCC_AHB1ENR_DMAMUX1EN | RCC_AHB1ENR_DMA1EN;
 8006b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b2e:	f043 0305 	orr.w	r3, r3, #5
 8006b32:	6493      	str	r3, [r2, #72]	; 0x48

    // Configure DMA channel for USART Tx
    USARTx_TX_DMA_STREAM->CCR &= ~DMA_CCR_EN;       // Disable DMA channel
 8006b34:	4b14      	ldr	r3, [pc, #80]	; (8006b88 <drv_DMA_init+0x68>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a13      	ldr	r2, [pc, #76]	; (8006b88 <drv_DMA_init+0x68>)
 8006b3a:	f023 0301 	bic.w	r3, r3, #1
 8006b3e:	6013      	str	r3, [r2, #0]
    while (USARTx_TX_DMA_STREAM->CCR & DMA_CCR_EN); // Wait until DMA is disabled
 8006b40:	bf00      	nop
 8006b42:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <drv_DMA_init+0x68>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1f9      	bne.n	8006b42 <drv_DMA_init+0x22>

    // Configure DMA Mux for USART1 TX
     DMAMUX1_Channel0->CCR |= (0x0F << 0);
 8006b4e:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <drv_DMA_init+0x6c>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a0e      	ldr	r2, [pc, #56]	; (8006b8c <drv_DMA_init+0x6c>)
 8006b54:	f043 030f 	orr.w	r3, r3, #15
 8006b58:	6013      	str	r3, [r2, #0]

     USARTx_TX_DMA_STREAM->CCR |= DMA_CCR_DIR;            // Memory-to-peripheral mode
 8006b5a:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <drv_DMA_init+0x68>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a0a      	ldr	r2, [pc, #40]	; (8006b88 <drv_DMA_init+0x68>)
 8006b60:	f043 0310 	orr.w	r3, r3, #16
 8006b64:	6013      	str	r3, [r2, #0]

     USARTx_TX_DMA_STREAM->CCR |= DMA_CCR_MINC;             // Memory increment mode
 8006b66:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <drv_DMA_init+0x68>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a07      	ldr	r2, [pc, #28]	; (8006b88 <drv_DMA_init+0x68>)
 8006b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b70:	6013      	str	r3, [r2, #0]
     USARTx_TX_DMA_STREAM->CCR |= DMA_CCR_TCIE;             // Transfer complete interrupt enable
 8006b72:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <drv_DMA_init+0x68>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a04      	ldr	r2, [pc, #16]	; (8006b88 <drv_DMA_init+0x68>)
 8006b78:	f043 0302 	orr.w	r3, r3, #2
 8006b7c:	6013      	str	r3, [r2, #0]

  /* In circular mode, after the last data transfer, the DMA_CNDTRx register is automatically
reloaded with the initially programmed value. The current internal address registers are
reloaded with the base address values from the DMA_CPARx and DMA_CMARx registers. */
}
 8006b7e:	bf00      	nop
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	40020008 	.word	0x40020008
 8006b8c:	40020800 	.word	0x40020800

08006b90 <DMA_IRQHandler>:
    NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  }

/* Private functions ---------------------------------------------------*/
void DMA_IRQHandler(void)
{
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
  if(DMA1->ISR & DMA_ISR_TCIF3)
 8006b94:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <DMA_IRQHandler+0x28>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <DMA_IRQHandler+0x1c>
    {
      // DMA transfer complete, perform any cleanup or additional actions here
      DMA1->IFCR |= DMA_IFCR_CTCIF3; // Clear transfer complete flag
 8006ba0:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <DMA_IRQHandler+0x28>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	4a04      	ldr	r2, [pc, #16]	; (8006bb8 <DMA_IRQHandler+0x28>)
 8006ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006baa:	6053      	str	r3, [r2, #4]
  }
}
 8006bac:	bf00      	nop
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	40020000 	.word	0x40020000

08006bbc <drv_GPIO_init>:
/* Global variables ---------------------------------------------------*/

/* Public functions ----------------------------------------------------*/

void drv_GPIO_init(GPIO_init_t* pGPIOInit)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  GPIO_TypeDef* GPIOx;

  GPIOx = get_GPIO_port(pGPIOInit);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f8c5 	bl	8006d54 <get_GPIO_port>
 8006bca:	60f8      	str	r0, [r7, #12]
  set_GPIO_mode(pGPIOInit, GPIOx);
 8006bcc:	68f9      	ldr	r1, [r7, #12]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f8e4 	bl	8006d9c <set_GPIO_mode>
  set_GPIO_type(pGPIOInit, GPIOx);
 8006bd4:	68f9      	ldr	r1, [r7, #12]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f892 	bl	8006d00 <set_GPIO_type>
  set_GPIO_speed(pGPIOInit, GPIOx);
 8006bdc:	68f9      	ldr	r1, [r7, #12]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f842 	bl	8006c68 <set_GPIO_speed>
  set_GPIO_pull(pGPIOInit, GPIOx);
 8006be4:	68f9      	ldr	r1, [r7, #12]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f804 	bl	8006bf4 <set_GPIO_pull>

}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <set_GPIO_pull>:
}


/* Private functions ---------------------------------------------------*/
static void set_GPIO_pull(GPIO_init_t* pGPIOPull, GPIO_TypeDef* GPIOx)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  switch(pGPIOPull->gpioPuPd)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	791b      	ldrb	r3, [r3, #4]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d011      	beq.n	8006c2a <set_GPIO_pull+0x36>
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d01b      	beq.n	8006c42 <set_GPIO_pull+0x4e>
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d000      	beq.n	8006c10 <set_GPIO_pull+0x1c>
   {
     case GPIO_NO_PULL:   { GPIOx->PUPDR &= ~(0x01 << (pGPIOPull->u8pinNumber * 2)  ); } break;
     case GPIO_PULLUPP:    { GPIOx->PUPDR |=  (0x01 << (pGPIOPull->u8pinNumber * 2) ); } break;
     case GPIO_PULL_DOWN: { GPIOx->PUPDR |=  (0x02 << (pGPIOPull->u8pinNumber * 2) ); } break;
     default: break;
 8006c0e:	e024      	b.n	8006c5a <set_GPIO_pull+0x66>
     case GPIO_NO_PULL:   { GPIOx->PUPDR &= ~(0x01 << (pGPIOPull->u8pinNumber * 2)  ); } break;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	7952      	ldrb	r2, [r2, #5]
 8006c18:	0052      	lsls	r2, r2, #1
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c20:	43d2      	mvns	r2, r2
 8006c22:	401a      	ands	r2, r3
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	60da      	str	r2, [r3, #12]
 8006c28:	e017      	b.n	8006c5a <set_GPIO_pull+0x66>
     case GPIO_PULLUPP:    { GPIOx->PUPDR |=  (0x01 << (pGPIOPull->u8pinNumber * 2) ); } break;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	7952      	ldrb	r2, [r2, #5]
 8006c32:	0052      	lsls	r2, r2, #1
 8006c34:	2101      	movs	r1, #1
 8006c36:	fa01 f202 	lsl.w	r2, r1, r2
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	60da      	str	r2, [r3, #12]
 8006c40:	e00b      	b.n	8006c5a <set_GPIO_pull+0x66>
     case GPIO_PULL_DOWN: { GPIOx->PUPDR |=  (0x02 << (pGPIOPull->u8pinNumber * 2) ); } break;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	7952      	ldrb	r2, [r2, #5]
 8006c4a:	0052      	lsls	r2, r2, #1
 8006c4c:	2102      	movs	r1, #2
 8006c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8006c52:	431a      	orrs	r2, r3
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	60da      	str	r2, [r3, #12]
 8006c58:	bf00      	nop
   }
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
	...

08006c68 <set_GPIO_speed>:


static void set_GPIO_speed(GPIO_init_t* pGPIOSpeed, GPIO_TypeDef* GPIOx)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  switch(pGPIOSpeed->gpioSpeed)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	78db      	ldrb	r3, [r3, #3]
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d83b      	bhi.n	8006cf2 <set_GPIO_speed+0x8a>
 8006c7a:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <set_GPIO_speed+0x18>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006c91 	.word	0x08006c91
 8006c84:	08006cab 	.word	0x08006cab
 8006c88:	08006cc3 	.word	0x08006cc3
 8006c8c:	08006cdb 	.word	0x08006cdb
   {
     case GPIO_SPEED_LOW:    { GPIOx->OSPEEDR &= ~(0x01 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	7952      	ldrb	r2, [r2, #5]
 8006c98:	0052      	lsls	r2, r2, #1
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8006ca0:	43d2      	mvns	r2, r2
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	609a      	str	r2, [r3, #8]
 8006ca8:	e024      	b.n	8006cf4 <set_GPIO_speed+0x8c>
     case GPIO_SPEED_MEDIUM: { GPIOx->OSPEEDR |=  (0x01 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	7952      	ldrb	r2, [r2, #5]
 8006cb2:	0052      	lsls	r2, r2, #1
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	609a      	str	r2, [r3, #8]
 8006cc0:	e018      	b.n	8006cf4 <set_GPIO_speed+0x8c>
     case GPIO_SPEED_FAST:   { GPIOx->OSPEEDR |=  (0x02 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	7952      	ldrb	r2, [r2, #5]
 8006cca:	0052      	lsls	r2, r2, #1
 8006ccc:	2102      	movs	r1, #2
 8006cce:	fa01 f202 	lsl.w	r2, r1, r2
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	609a      	str	r2, [r3, #8]
 8006cd8:	e00c      	b.n	8006cf4 <set_GPIO_speed+0x8c>
     case GPIO_SPEED_HIGH:   { GPIOx->OSPEEDR |=  (0x03 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	7952      	ldrb	r2, [r2, #5]
 8006ce2:	0052      	lsls	r2, r2, #1
 8006ce4:	2103      	movs	r1, #3
 8006ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8006cea:	431a      	orrs	r2, r3
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	609a      	str	r2, [r3, #8]
 8006cf0:	e000      	b.n	8006cf4 <set_GPIO_speed+0x8c>
     default: break;
 8006cf2:	bf00      	nop
   }
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <set_GPIO_type>:


static void set_GPIO_type(GPIO_init_t* pGPIOType, GPIO_TypeDef* GPIOx)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  switch(pGPIOType->gpioType)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	789b      	ldrb	r3, [r3, #2]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <set_GPIO_type+0x18>
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d00c      	beq.n	8006d30 <set_GPIO_type+0x30>
   {
     case GPIO_TYPE_PUSH_PULL:  { GPIOx->OTYPER &=  ~(0x01 << pGPIOType->u8pinNumber ); } break;
     case GPIO_TYPE_OPEN_DRAIN: { GPIOx->OTYPER |=   (0x01 << pGPIOType->u8pinNumber ); } break;

     default: break;
 8006d16:	e016      	b.n	8006d46 <set_GPIO_type+0x46>
     case GPIO_TYPE_PUSH_PULL:  { GPIOx->OTYPER &=  ~(0x01 << pGPIOType->u8pinNumber ); } break;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	7952      	ldrb	r2, [r2, #5]
 8006d20:	4611      	mov	r1, r2
 8006d22:	2201      	movs	r2, #1
 8006d24:	408a      	lsls	r2, r1
 8006d26:	43d2      	mvns	r2, r2
 8006d28:	401a      	ands	r2, r3
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	605a      	str	r2, [r3, #4]
 8006d2e:	e00a      	b.n	8006d46 <set_GPIO_type+0x46>
     case GPIO_TYPE_OPEN_DRAIN: { GPIOx->OTYPER |=   (0x01 << pGPIOType->u8pinNumber ); } break;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	7952      	ldrb	r2, [r2, #5]
 8006d38:	4611      	mov	r1, r2
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	408a      	lsls	r2, r1
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	605a      	str	r2, [r3, #4]
 8006d44:	bf00      	nop
   }
}
 8006d46:	bf00      	nop
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <get_GPIO_port>:


static GPIO_TypeDef* get_GPIO_port(GPIO_init_t* pGPIOInit)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  GPIO_TypeDef* pretVal = NULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]

  switch(pGPIOInit->gpioPort)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d008      	beq.n	8006d7a <get_GPIO_port+0x26>
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d009      	beq.n	8006d80 <get_GPIO_port+0x2c>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d000      	beq.n	8006d72 <get_GPIO_port+0x1e>
  {
    case GPIO_PORTA : { pretVal = GPIOA; } break;
    case GPIO_PORTB : { pretVal = GPIOB; } break;
    case GPIO_PORTC : { pretVal = GPIOC; } break;

    default: break;
 8006d70:	e009      	b.n	8006d86 <get_GPIO_port+0x32>
    case GPIO_PORTA : { pretVal = GPIOA; } break;
 8006d72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e005      	b.n	8006d86 <get_GPIO_port+0x32>
    case GPIO_PORTB : { pretVal = GPIOB; } break;
 8006d7a:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <get_GPIO_port+0x40>)
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	e002      	b.n	8006d86 <get_GPIO_port+0x32>
    case GPIO_PORTC : { pretVal = GPIOC; } break;
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <get_GPIO_port+0x44>)
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	bf00      	nop
  }

  return pretVal;
 8006d86:	68fb      	ldr	r3, [r7, #12]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	48000400 	.word	0x48000400
 8006d98:	48000800 	.word	0x48000800

08006d9c <set_GPIO_mode>:

static void set_GPIO_mode(GPIO_init_t* pGPIOMode, GPIO_TypeDef* GPIOx)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  switch(pGPIOMode->gpioMode)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d847      	bhi.n	8006e3e <set_GPIO_mode+0xa2>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <set_GPIO_mode+0x18>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006dc5 	.word	0x08006dc5
 8006db8:	08006ddf 	.word	0x08006ddf
 8006dbc:	08006e0f 	.word	0x08006e0f
 8006dc0:	08006e3f 	.word	0x08006e3f
  {
     case GPIO_MODE_INPUTT  : {  GPIOx->MODER &= ~(0x01 << ((pGPIOMode->u8pinNumber * 2))); } break;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	7952      	ldrb	r2, [r2, #5]
 8006dcc:	0052      	lsls	r2, r2, #1
 8006dce:	2101      	movs	r1, #1
 8006dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8006dd4:	43d2      	mvns	r2, r2
 8006dd6:	401a      	ands	r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	e030      	b.n	8006e40 <set_GPIO_mode+0xa4>
     case GPIO_MODER_OUTPUT :
     {
       GPIOx->MODER &= ~(0x03 << ((pGPIOMode->u8pinNumber * 2))); /* Clear the reset value */
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	7952      	ldrb	r2, [r2, #5]
 8006de6:	0052      	lsls	r2, r2, #1
 8006de8:	2103      	movs	r1, #3
 8006dea:	fa01 f202 	lsl.w	r2, r1, r2
 8006dee:	43d2      	mvns	r2, r2
 8006df0:	401a      	ands	r2, r3
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	601a      	str	r2, [r3, #0]
       GPIOx->MODER |=  (0x01 << ((pGPIOMode->u8pinNumber * 2)));
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	7952      	ldrb	r2, [r2, #5]
 8006dfe:	0052      	lsls	r2, r2, #1
 8006e00:	2101      	movs	r1, #1
 8006e02:	fa01 f202 	lsl.w	r2, r1, r2
 8006e06:	431a      	orrs	r2, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	601a      	str	r2, [r3, #0]
     } break;
 8006e0c:	e018      	b.n	8006e40 <set_GPIO_mode+0xa4>
     case GPIO_MODER_ALTERNATE 	:
       {
	 GPIOx->MODER &= ~(0x03 << ((pGPIOMode->u8pinNumber * 2))); /* Clear the reset value */
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	7952      	ldrb	r2, [r2, #5]
 8006e16:	0052      	lsls	r2, r2, #1
 8006e18:	2103      	movs	r1, #3
 8006e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e1e:	43d2      	mvns	r2, r2
 8006e20:	401a      	ands	r2, r3
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	601a      	str	r2, [r3, #0]
	 GPIOx->MODER |=  (0x02 << ((pGPIOMode->u8pinNumber * 2)));
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	7952      	ldrb	r2, [r2, #5]
 8006e2e:	0052      	lsls	r2, r2, #1
 8006e30:	2102      	movs	r1, #2
 8006e32:	fa01 f202 	lsl.w	r2, r1, r2
 8006e36:	431a      	orrs	r2, r3
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	601a      	str	r2, [r3, #0]
       } break;
 8006e3c:	e000      	b.n	8006e40 <set_GPIO_mode+0xa4>
     case GPIO_MODER_ANALOG 	: { } break;

     default: break;
 8006e3e:	bf00      	nop
   }
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <drv_timer_IRQHandler>:
 against the UIF flag status
 */
static volatile uint32_t u32CCR1_CNT;
static volatile uint32_t u32CCR2_CNT;
void drv_timer_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e5c:	d135      	bne.n	8006eca <drv_timer_IRQHandler+0x7e>
  {
    if((TIM2->SR & TIM_SR_CC1IF) && (TIM2->DIER & TIM_DIER_CC1IE))
 8006e5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d013      	beq.n	8006e94 <drv_timer_IRQHandler+0x48>
 8006e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00c      	beq.n	8006e94 <drv_timer_IRQHandler+0x48>
    {
      TIM2->SR &= ~TIM_SR_CC1IF;
 8006e7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006e84:	f023 0302 	bic.w	r3, r3, #2
 8006e88:	6113      	str	r3, [r2, #16]
      u32CCR1_CNT++;
 8006e8a:	4b13      	ldr	r3, [pc, #76]	; (8006ed8 <drv_timer_IRQHandler+0x8c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	4a11      	ldr	r2, [pc, #68]	; (8006ed8 <drv_timer_IRQHandler+0x8c>)
 8006e92:	6013      	str	r3, [r2, #0]
    }

    if((TIM2->SR & TIM_SR_CC2IF) && (TIM2->DIER & TIM_DIER_CC2IE))
 8006e94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d013      	beq.n	8006eca <drv_timer_IRQHandler+0x7e>
 8006ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00c      	beq.n	8006eca <drv_timer_IRQHandler+0x7e>
    {
      TIM2->SR &= ~TIM_SR_CC2IF;
 8006eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006eba:	f023 0304 	bic.w	r3, r3, #4
 8006ebe:	6113      	str	r3, [r2, #16]
      u32CCR2_CNT++;
 8006ec0:	4b06      	ldr	r3, [pc, #24]	; (8006edc <drv_timer_IRQHandler+0x90>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	4a05      	ldr	r2, [pc, #20]	; (8006edc <drv_timer_IRQHandler+0x90>)
 8006ec8:	6013      	str	r3, [r2, #0]
    }
  }
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	2000003c 	.word	0x2000003c
 8006edc:	20000040 	.word	0x20000040

08006ee0 <__NVIC_EnableIRQ>:
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	db0b      	blt.n	8006f0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	f003 021f 	and.w	r2, r3, #31
 8006ef8:	4907      	ldr	r1, [pc, #28]	; (8006f18 <__NVIC_EnableIRQ+0x38>)
 8006efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	2001      	movs	r0, #1
 8006f02:	fa00 f202 	lsl.w	r2, r0, r2
 8006f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	e000e100 	.word	0xe000e100

08006f1c <__NVIC_SetPriority>:
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	6039      	str	r1, [r7, #0]
 8006f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	db0a      	blt.n	8006f46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	490c      	ldr	r1, [pc, #48]	; (8006f68 <__NVIC_SetPriority+0x4c>)
 8006f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f3a:	0112      	lsls	r2, r2, #4
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	440b      	add	r3, r1
 8006f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f44:	e00a      	b.n	8006f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	4908      	ldr	r1, [pc, #32]	; (8006f6c <__NVIC_SetPriority+0x50>)
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	3b04      	subs	r3, #4
 8006f54:	0112      	lsls	r2, r2, #4
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	440b      	add	r3, r1
 8006f5a:	761a      	strb	r2, [r3, #24]
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	e000e100 	.word	0xe000e100
 8006f6c:	e000ed00 	.word	0xe000ed00

08006f70 <drv_uart_init>:
static uint8_t au8TxBuf[TX_BUFFER_SIZE];
static uint8_t au8RxBuf[RX_BUFFER_SIZE];

/* Public functions ----------------------------------------------------*/
void drv_uart_init(UART_init_t* pUARTInit)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  ringBuffer_init(&uartTxBuffer, au8TxBuf, TX_BUFFER_SIZE);
 8006f78:	2210      	movs	r2, #16
 8006f7a:	4941      	ldr	r1, [pc, #260]	; (8007080 <drv_uart_init+0x110>)
 8006f7c:	4841      	ldr	r0, [pc, #260]	; (8007084 <drv_uart_init+0x114>)
 8006f7e:	f000 f973 	bl	8007268 <ringBuffer_init>
  ringBuffer_init(&uartRxBuffer, au8RxBuf, RX_BUFFER_SIZE);
 8006f82:	2210      	movs	r2, #16
 8006f84:	4940      	ldr	r1, [pc, #256]	; (8007088 <drv_uart_init+0x118>)
 8006f86:	4841      	ldr	r0, [pc, #260]	; (800708c <drv_uart_init+0x11c>)
 8006f88:	f000 f96e 	bl	8007268 <ringBuffer_init>

  RCC->APB2ENR |= RCC_APB2ENR_USART1EN; /* CPU1 USART1 clocks enable */
 8006f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f9a:	6613      	str	r3, [r2, #96]	; 0x60
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8006f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fa6:	f043 0302 	orr.w	r3, r3, #2
 8006faa:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* https://www.st.com/resource/en/datasheet/stm32wb55cc.pdf  AF7  USART1 PB6 -> USART1_ TX PB7 -> USART1_ RX
  GPIOx_AFRL 0111: AF7*/
  GPIOB->AFR[0] |= (0x07 << GPIO_AFRL_AFSEL7_Pos);
 8006fac:	4b38      	ldr	r3, [pc, #224]	; (8007090 <drv_uart_init+0x120>)
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	4a37      	ldr	r2, [pc, #220]	; (8007090 <drv_uart_init+0x120>)
 8006fb2:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8006fb6:	6213      	str	r3, [r2, #32]
  GPIOB->AFR[0] |= (0x07 << GPIO_AFRL_AFSEL6_Pos);
 8006fb8:	4b35      	ldr	r3, [pc, #212]	; (8007090 <drv_uart_init+0x120>)
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	4a34      	ldr	r2, [pc, #208]	; (8007090 <drv_uart_init+0x120>)
 8006fbe:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006fc2:	6213      	str	r3, [r2, #32]

  GPIO_init_t USART_GPIO_PB5 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 8006fc4:	4a33      	ldr	r2, [pc, #204]	; (8007094 <drv_uart_init+0x124>)
 8006fc6:	f107 0310 	add.w	r3, r7, #16
 8006fca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fce:	6018      	str	r0, [r3, #0]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	8019      	strh	r1, [r3, #0]
			         .gpioSpeed = GPIO_SPEED_HIGH,
			         .gpioPort = GPIO_PORTB,
				 .gpioPuPd = GPIO_NO_PULL,
				 .u8pinNumber = 7                 };

  GPIO_init_t USART_GPIO_PB6 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 8006fd4:	4a30      	ldr	r2, [pc, #192]	; (8007098 <drv_uart_init+0x128>)
 8006fd6:	f107 0308 	add.w	r3, r7, #8
 8006fda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fde:	6018      	str	r0, [r3, #0]
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	8019      	strh	r1, [r3, #0]
  			         .gpioSpeed = GPIO_SPEED_HIGH,
  			         .gpioPort = GPIO_PORTB,
  				 .gpioPuPd = GPIO_NO_PULL,
  			         .u8pinNumber = 6	          };

  drv_GPIO_init(&USART_GPIO_PB5);
 8006fe4:	f107 0310 	add.w	r3, r7, #16
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7ff fde7 	bl	8006bbc <drv_GPIO_init>
  drv_GPIO_init(&USART_GPIO_PB6);
 8006fee:	f107 0308 	add.w	r3, r7, #8
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff fde2 	bl	8006bbc <drv_GPIO_init>

  // Disable USART
   USART1->CR1 &= ~USART_CR1_UE;
 8006ff8:	4b28      	ldr	r3, [pc, #160]	; (800709c <drv_uart_init+0x12c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a27      	ldr	r2, [pc, #156]	; (800709c <drv_uart_init+0x12c>)
 8006ffe:	f023 0301 	bic.w	r3, r3, #1
 8007002:	6013      	str	r3, [r2, #0]
   // Clear interrupt flags
    USART1->ICR = USART_ICR_TCCF;
 8007004:	4b25      	ldr	r3, [pc, #148]	; (800709c <drv_uart_init+0x12c>)
 8007006:	2240      	movs	r2, #64	; 0x40
 8007008:	621a      	str	r2, [r3, #32]

   /* In asynchronous mode, the following bits must be kept cleared: LINEN and CLKEN bits in the USART_CR2 register */
  USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800700a:	4b24      	ldr	r3, [pc, #144]	; (800709c <drv_uart_init+0x12c>)
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	4a23      	ldr	r2, [pc, #140]	; (800709c <drv_uart_init+0x12c>)
 8007010:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007014:	6053      	str	r3, [r2, #4]
  USART1->CR3 &= ~((USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007016:	4b21      	ldr	r3, [pc, #132]	; (800709c <drv_uart_init+0x12c>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	4a20      	ldr	r2, [pc, #128]	; (800709c <drv_uart_init+0x12c>)
 800701c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007020:	6093      	str	r3, [r2, #8]

  set_UART_stopBits(pUARTInit);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f83c 	bl	80070a0 <set_UART_stopBits>
  set_UART_wordLength(pUARTInit);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f861 	bl	80070f0 <set_UART_wordLength>
  set_UART_baudRate(pUARTInit);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f884 	bl	800713c <set_UART_baudRate>
  set_UART_parity(pUARTInit);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f8ab 	bl	8007190 <set_UART_parity>

  /* Oversampling */
  USART1->CR1 &= ~USART_CR1_OVER8; /* 16 */
 800703a:	4b18      	ldr	r3, [pc, #96]	; (800709c <drv_uart_init+0x12c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a17      	ldr	r2, [pc, #92]	; (800709c <drv_uart_init+0x12c>)
 8007040:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007044:	6013      	str	r3, [r2, #0]

  /* CR2 Bit 19 MSBFIRST: Most significant bit first */
  // Enable USART1, transmitter, and receiver
  USART1->CR3 |= USART_CR3_DMAT;
 8007046:	4b15      	ldr	r3, [pc, #84]	; (800709c <drv_uart_init+0x12c>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	4a14      	ldr	r2, [pc, #80]	; (800709c <drv_uart_init+0x12c>)
 800704c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007050:	6093      	str	r3, [r2, #8]
    USART1->CR1 |= USART_CR1_TE | USART_CR1_UE | USART_CR1_RE;
 8007052:	4b12      	ldr	r3, [pc, #72]	; (800709c <drv_uart_init+0x12c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a11      	ldr	r2, [pc, #68]	; (800709c <drv_uart_init+0x12c>)
 8007058:	f043 030d 	orr.w	r3, r3, #13
 800705c:	6013      	str	r3, [r2, #0]

    // Enable TXE and TC interrupts if needed
    USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 800705e:	4b0f      	ldr	r3, [pc, #60]	; (800709c <drv_uart_init+0x12c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a0e      	ldr	r2, [pc, #56]	; (800709c <drv_uart_init+0x12c>)
 8007064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007068:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART1_IRQn, 0);			// Set Priority to 1
 800706a:	2100      	movs	r1, #0
 800706c:	2024      	movs	r0, #36	; 0x24
 800706e:	f7ff ff55 	bl	8006f1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);				// Enable interrupt of USART1 peripheral
 8007072:	2024      	movs	r0, #36	; 0x24
 8007074:	f7ff ff34 	bl	8006ee0 <__NVIC_EnableIRQ>
}
 8007078:	bf00      	nop
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20000064 	.word	0x20000064
 8007084:	20000044 	.word	0x20000044
 8007088:	20000074 	.word	0x20000074
 800708c:	20000054 	.word	0x20000054
 8007090:	48000400 	.word	0x48000400
 8007094:	08007424 	.word	0x08007424
 8007098:	0800742c 	.word	0x0800742c
 800709c:	40013800 	.word	0x40013800

080070a0 <set_UART_stopBits>:
}


/* Private functions ---------------------------------------------------*/
static void set_UART_stopBits(UART_init_t* pUARTInit)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartStopBits)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <set_UART_stopBits+0x16>
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d00d      	beq.n	80070d0 <set_UART_stopBits+0x30>

    case UART_STOP_BITS_2:
      USART1->CR2 |= (0x2UL << USART_CR2_STOP_Pos) ;
      break;

    default: break;
 80070b4:	e013      	b.n	80070de <set_UART_stopBits+0x3e>
      USART1->CR2 &= ~(0x01UL << USART_CR2_STOP_Pos);
 80070b6:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <set_UART_stopBits+0x4c>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	4a0c      	ldr	r2, [pc, #48]	; (80070ec <set_UART_stopBits+0x4c>)
 80070bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070c0:	6053      	str	r3, [r2, #4]
      USART1->CR2 &= ~(0x01UL << (USART_CR2_STOP_Pos + 1U));
 80070c2:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <set_UART_stopBits+0x4c>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	4a09      	ldr	r2, [pc, #36]	; (80070ec <set_UART_stopBits+0x4c>)
 80070c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070cc:	6053      	str	r3, [r2, #4]
      break;
 80070ce:	e006      	b.n	80070de <set_UART_stopBits+0x3e>
      USART1->CR2 |= (0x2UL << USART_CR2_STOP_Pos) ;
 80070d0:	4b06      	ldr	r3, [pc, #24]	; (80070ec <set_UART_stopBits+0x4c>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4a05      	ldr	r2, [pc, #20]	; (80070ec <set_UART_stopBits+0x4c>)
 80070d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070da:	6053      	str	r3, [r2, #4]
      break;
 80070dc:	bf00      	nop
  }
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40013800 	.word	0x40013800

080070f0 <set_UART_wordLength>:

static void set_UART_wordLength(UART_init_t* pUARTInit)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartWordLength)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	78db      	ldrb	r3, [r3, #3]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d011      	beq.n	8007124 <set_UART_wordLength+0x34>
 8007100:	2b02      	cmp	r3, #2
 8007102:	d011      	beq.n	8007128 <set_UART_wordLength+0x38>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d000      	beq.n	800710a <set_UART_wordLength+0x1a>
       USART1->CR1 &= ~USART_CR1_M0;
     } break;

     case UART_WORD_LEGTH_7_BITS: break;
     case UART_WORD_LEGTH_9_BITS: break;
     default: break;
 8007108:	e00f      	b.n	800712a <set_UART_wordLength+0x3a>
       USART1->CR1 &= ~USART_CR1_M1;
 800710a:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <set_UART_wordLength+0x48>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a0a      	ldr	r2, [pc, #40]	; (8007138 <set_UART_wordLength+0x48>)
 8007110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007114:	6013      	str	r3, [r2, #0]
       USART1->CR1 &= ~USART_CR1_M0;
 8007116:	4b08      	ldr	r3, [pc, #32]	; (8007138 <set_UART_wordLength+0x48>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a07      	ldr	r2, [pc, #28]	; (8007138 <set_UART_wordLength+0x48>)
 800711c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007120:	6013      	str	r3, [r2, #0]
     } break;
 8007122:	e002      	b.n	800712a <set_UART_wordLength+0x3a>
     case UART_WORD_LEGTH_7_BITS: break;
 8007124:	bf00      	nop
 8007126:	e000      	b.n	800712a <set_UART_wordLength+0x3a>
     case UART_WORD_LEGTH_9_BITS: break;
 8007128:	bf00      	nop
   }
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40013800 	.word	0x40013800

0800713c <set_UART_baudRate>:

static void set_UART_baudRate(UART_init_t* pUARTInit)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t baudValue = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]
  switch (pUARTInit->uartBaud)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d00a      	beq.n	8007166 <set_UART_baudRate+0x2a>
 8007150:	2b02      	cmp	r3, #2
 8007152:	d00e      	beq.n	8007172 <set_UART_baudRate+0x36>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d000      	beq.n	800715a <set_UART_baudRate+0x1e>
  {
    case UART_BAUD_9600:  { baudValue = calculateBaudRateValue(9600);  } break;
    case UART_BAUD_38400: { baudValue = calculateBaudRateValue(38400); } break;
    case UART_BAUD_115200: { baudValue = calculateBaudRateValue(115200);} break;
    default: break;
 8007158:	e011      	b.n	800717e <set_UART_baudRate+0x42>
    case UART_BAUD_9600:  { baudValue = calculateBaudRateValue(9600);  } break;
 800715a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800715e:	f000 f847 	bl	80071f0 <calculateBaudRateValue>
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	e00b      	b.n	800717e <set_UART_baudRate+0x42>
    case UART_BAUD_38400: { baudValue = calculateBaudRateValue(38400); } break;
 8007166:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 800716a:	f000 f841 	bl	80071f0 <calculateBaudRateValue>
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	e005      	b.n	800717e <set_UART_baudRate+0x42>
    case UART_BAUD_115200: { baudValue = calculateBaudRateValue(115200);} break;
 8007172:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8007176:	f000 f83b 	bl	80071f0 <calculateBaudRateValue>
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	bf00      	nop
  }
   USART1->BRR = baudValue;
 800717e:	4a03      	ldr	r2, [pc, #12]	; (800718c <set_UART_baudRate+0x50>)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	60d3      	str	r3, [r2, #12]
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40013800 	.word	0x40013800

08007190 <set_UART_parity>:

static void set_UART_parity(UART_init_t* pUARTInit)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartParity)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	789b      	ldrb	r3, [r3, #2]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d00b      	beq.n	80071b8 <set_UART_parity+0x28>
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d016      	beq.n	80071d2 <set_UART_parity+0x42>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d000      	beq.n	80071aa <set_UART_parity+0x1a>
      USART1->CR1 |= USART_CR1_PCE;
      USART1->CR1 &= ~USART_CR1_PS;
    } break;

    case UARTT_PARITY_ODD: { USART1->CR1 |= USART_CR1_PCE | USART_CR1_PS; } break;
    default: break;
 80071a8:	e01a      	b.n	80071e0 <set_UART_parity+0x50>
    case UARTT_PARITY_NONE: { USART1->CR1 &= ~USART_CR1_PCE; } break;
 80071aa:	4b10      	ldr	r3, [pc, #64]	; (80071ec <set_UART_parity+0x5c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a0f      	ldr	r2, [pc, #60]	; (80071ec <set_UART_parity+0x5c>)
 80071b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	e013      	b.n	80071e0 <set_UART_parity+0x50>
      USART1->CR1 |= USART_CR1_PCE;
 80071b8:	4b0c      	ldr	r3, [pc, #48]	; (80071ec <set_UART_parity+0x5c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a0b      	ldr	r2, [pc, #44]	; (80071ec <set_UART_parity+0x5c>)
 80071be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071c2:	6013      	str	r3, [r2, #0]
      USART1->CR1 &= ~USART_CR1_PS;
 80071c4:	4b09      	ldr	r3, [pc, #36]	; (80071ec <set_UART_parity+0x5c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a08      	ldr	r2, [pc, #32]	; (80071ec <set_UART_parity+0x5c>)
 80071ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071ce:	6013      	str	r3, [r2, #0]
    } break;
 80071d0:	e006      	b.n	80071e0 <set_UART_parity+0x50>
    case UARTT_PARITY_ODD: { USART1->CR1 |= USART_CR1_PCE | USART_CR1_PS; } break;
 80071d2:	4b06      	ldr	r3, [pc, #24]	; (80071ec <set_UART_parity+0x5c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a05      	ldr	r2, [pc, #20]	; (80071ec <set_UART_parity+0x5c>)
 80071d8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	bf00      	nop
  }
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	40013800 	.word	0x40013800

080071f0 <calculateBaudRateValue>:

int((104.1875 * 16) + 0.5) = 1667 = 0x683

Personally I've been using BRR = APBCLK / BAUD for 13+ years, it is simpler to explain/compute. */
static uint32_t calculateBaudRateValue(uint32_t u32baudrate)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t APBCLK = 64000000;
 80071f8:	4b07      	ldr	r3, [pc, #28]	; (8007218 <calculateBaudRateValue+0x28>)
 80071fa:	60fb      	str	r3, [r7, #12]
  uint32_t u32res = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60bb      	str	r3, [r7, #8]

  u32res = (APBCLK / u32baudrate );
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	fbb2 f3f3 	udiv	r3, r2, r3
 8007208:	60bb      	str	r3, [r7, #8]

  return u32res;
 800720a:	68bb      	ldr	r3, [r7, #8]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	03d09000 	.word	0x03d09000

0800721c <drv_uart_IRQHandler>:
transmission corrupts the data on the TX pin as the baud rate counters get frozen. The
current data being transmitted are then lost.
An idle frame is sent when the TE bit is enabled. */

void drv_uart_IRQHandler(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	af00      	add	r7, sp, #0
  if (USART1->ISR & USART_ISR_TC) /* If a transfer is complete, byte by byte */
 8007220:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <drv_uart_IRQHandler+0x44>)
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007228:	2b00      	cmp	r3, #0
 800722a:	d017      	beq.n	800725c <drv_uart_IRQHandler+0x40>
  {
    if (uartTxBuffer.u16elementsInBuffer > 0) /* Do we have anything to send */
 800722c:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <drv_uart_IRQHandler+0x48>)
 800722e:	891b      	ldrh	r3, [r3, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00d      	beq.n	8007250 <drv_uart_IRQHandler+0x34>
    {
      USART1->TDR = ringBuffer_get(&uartTxBuffer);
 8007234:	480b      	ldr	r0, [pc, #44]	; (8007264 <drv_uart_IRQHandler+0x48>)
 8007236:	f000 f836 	bl	80072a6 <ringBuffer_get>
 800723a:	4603      	mov	r3, r0
 800723c:	461a      	mov	r2, r3
 800723e:	4b08      	ldr	r3, [pc, #32]	; (8007260 <drv_uart_IRQHandler+0x44>)
 8007240:	629a      	str	r2, [r3, #40]	; 0x28
      while(!(USART1->ISR & USART_ISR_TC));  /* Wait here until the transfer is complete */
 8007242:	bf00      	nop
 8007244:	4b06      	ldr	r3, [pc, #24]	; (8007260 <drv_uart_IRQHandler+0x44>)
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0f9      	beq.n	8007244 <drv_uart_IRQHandler+0x28>
    }

    USART1->CR1 &= ~(USART_CR1_TXEIE); /* Disable the transmission buffer empty interrupt, we will enable this once we have something to send */
 8007250:	4b03      	ldr	r3, [pc, #12]	; (8007260 <drv_uart_IRQHandler+0x44>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a02      	ldr	r2, [pc, #8]	; (8007260 <drv_uart_IRQHandler+0x44>)
 8007256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800725a:	6013      	str	r3, [r2, #0]
  }
}
 800725c:	bf00      	nop
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40013800 	.word	0x40013800
 8007264:	20000044 	.word	0x20000044

08007268 <ringBuffer_init>:

/* Global variables ---------------------------------------------------*/

/* Public functions ----------------------------------------------------*/
void ringBuffer_init(sRingbuf_t* pRingBuffer, uint8_t* pu8buffer, uint16_t u16bufferSizeBytes)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
  pRingBuffer->au8buffer 	    = &pu8buffer[0];
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	601a      	str	r2, [r3, #0]
  pRingBuffer->u16bufferMaxCapacity = u16bufferSizeBytes;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	88fa      	ldrh	r2, [r7, #6]
 8007280:	815a      	strh	r2, [r3, #10]
  pRingBuffer->u16elementsInBuffer  = 0;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	811a      	strh	r2, [r3, #8]
  pRingBuffer->u16getIndex  	    = 0;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	80da      	strh	r2, [r3, #6]
  pRingBuffer->u16putIndex          = 0;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	809a      	strh	r2, [r3, #4]
  pRingBuffer->eRingBufStatus       = RINGBUF_EMPTY;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	731a      	strb	r2, [r3, #12]
}
 800729a:	bf00      	nop
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <ringBuffer_get>:
  return bStatus;
}


uint8_t ringBuffer_get(sRingbuf_t* pRingBuffer)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80072ae:	b672      	cpsid	i
  __disable_irq();

  uint8_t u8returnValue = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]

  if(    (pRingBuffer->eRingBufStatus != RINGBUF_EMPTY        )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	7b1b      	ldrb	r3, [r3, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d026      	beq.n	800730a <ringBuffer_get+0x64>
      && (pRingBuffer->u16getIndex != pRingBuffer->u16putIndex)  )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	88da      	ldrh	r2, [r3, #6]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	889b      	ldrh	r3, [r3, #4]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d020      	beq.n	800730a <ringBuffer_get+0x64>
  {
    u8returnValue = pRingBuffer->au8buffer[pRingBuffer->u16getIndex];
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	88d2      	ldrh	r2, [r2, #6]
 80072d0:	4413      	add	r3, r2
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	73fb      	strb	r3, [r7, #15]
    pRingBuffer->au8buffer[pRingBuffer->u16getIndex] = 0;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	88d2      	ldrh	r2, [r2, #6]
 80072de:	4413      	add	r3, r2
 80072e0:	2200      	movs	r2, #0
 80072e2:	701a      	strb	r2, [r3, #0]
    pRingBuffer->u16elementsInBuffer--;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	891b      	ldrh	r3, [r3, #8]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	811a      	strh	r2, [r3, #8]
    pRingBuffer->u16getIndex = (pRingBuffer->u16getIndex + 1) % (pRingBuffer->u16bufferMaxCapacity);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	88db      	ldrh	r3, [r3, #6]
 80072f4:	3301      	adds	r3, #1
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	8952      	ldrh	r2, [r2, #10]
 80072fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80072fe:	fb02 f201 	mul.w	r2, r2, r1
 8007302:	1a9b      	subs	r3, r3, r2
 8007304:	b29a      	uxth	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	80da      	strh	r2, [r3, #6]
  __ASM volatile ("cpsie i" : : : "memory");
 800730a:	b662      	cpsie	i

  }
  __enable_irq();
  return u8returnValue;
 800730c:	7bfb      	ldrb	r3, [r7, #15]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
	...

0800731c <simpleTimer_IRQHandler>:

/* Public functions ----------------------------------------------------*/


void simpleTimer_IRQHandler(TIM_HandleTypeDef *htim)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM17)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a0f      	ldr	r2, [pc, #60]	; (8007368 <simpleTimer_IRQHandler+0x4c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d116      	bne.n	800735c <simpleTimer_IRQHandler+0x40>
  {
    ++u32elapsedTicks;
 800732e:	4b0f      	ldr	r3, [pc, #60]	; (800736c <simpleTimer_IRQHandler+0x50>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3301      	adds	r3, #1
 8007334:	4a0d      	ldr	r2, [pc, #52]	; (800736c <simpleTimer_IRQHandler+0x50>)
 8007336:	6013      	str	r3, [r2, #0]

    if((u32elapsedTicks % 1000) == 0)
 8007338:	4b0c      	ldr	r3, [pc, #48]	; (800736c <simpleTimer_IRQHandler+0x50>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <simpleTimer_IRQHandler+0x54>)
 800733e:	fba3 1302 	umull	r1, r3, r3, r2
 8007342:	099b      	lsrs	r3, r3, #6
 8007344:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d104      	bne.n	800735c <simpleTimer_IRQHandler+0x40>
    {
      ++u32elapsedSeconds;
 8007352:	4b08      	ldr	r3, [pc, #32]	; (8007374 <simpleTimer_IRQHandler+0x58>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3301      	adds	r3, #1
 8007358:	4a06      	ldr	r2, [pc, #24]	; (8007374 <simpleTimer_IRQHandler+0x58>)
 800735a:	6013      	str	r3, [r2, #0]
    }
  }
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	40014800 	.word	0x40014800
 800736c:	20000084 	.word	0x20000084
 8007370:	10624dd3 	.word	0x10624dd3
 8007374:	20000088 	.word	0x20000088

08007378 <__libc_init_array>:
 8007378:	b570      	push	{r4, r5, r6, lr}
 800737a:	4e0d      	ldr	r6, [pc, #52]	; (80073b0 <__libc_init_array+0x38>)
 800737c:	4c0d      	ldr	r4, [pc, #52]	; (80073b4 <__libc_init_array+0x3c>)
 800737e:	1ba4      	subs	r4, r4, r6
 8007380:	10a4      	asrs	r4, r4, #2
 8007382:	2500      	movs	r5, #0
 8007384:	42a5      	cmp	r5, r4
 8007386:	d109      	bne.n	800739c <__libc_init_array+0x24>
 8007388:	4e0b      	ldr	r6, [pc, #44]	; (80073b8 <__libc_init_array+0x40>)
 800738a:	4c0c      	ldr	r4, [pc, #48]	; (80073bc <__libc_init_array+0x44>)
 800738c:	f000 f820 	bl	80073d0 <_init>
 8007390:	1ba4      	subs	r4, r4, r6
 8007392:	10a4      	asrs	r4, r4, #2
 8007394:	2500      	movs	r5, #0
 8007396:	42a5      	cmp	r5, r4
 8007398:	d105      	bne.n	80073a6 <__libc_init_array+0x2e>
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073a0:	4798      	blx	r3
 80073a2:	3501      	adds	r5, #1
 80073a4:	e7ee      	b.n	8007384 <__libc_init_array+0xc>
 80073a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073aa:	4798      	blx	r3
 80073ac:	3501      	adds	r5, #1
 80073ae:	e7f2      	b.n	8007396 <__libc_init_array+0x1e>
 80073b0:	080074dc 	.word	0x080074dc
 80073b4:	080074dc 	.word	0x080074dc
 80073b8:	080074dc 	.word	0x080074dc
 80073bc:	080074e0 	.word	0x080074e0

080073c0 <memset>:
 80073c0:	4402      	add	r2, r0
 80073c2:	4603      	mov	r3, r0
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d100      	bne.n	80073ca <memset+0xa>
 80073c8:	4770      	bx	lr
 80073ca:	f803 1b01 	strb.w	r1, [r3], #1
 80073ce:	e7f9      	b.n	80073c4 <memset+0x4>

080073d0 <_init>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr

080073dc <_fini>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr
