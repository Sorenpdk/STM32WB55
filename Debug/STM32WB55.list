
STM32WB55.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000004  080047e0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003bc  20000010  080047ec  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200003cc  080047ec  000203cc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c591  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000036f1  00000000  00000000  0003c5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000019f8  00000000  00000000  0003fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001860  00000000  00000000  000416c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024b89  00000000  00000000  00042f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001290d  00000000  00000000  00067aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e412e  00000000  00000000  0007a3b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0015e4e4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006b94  00000000  00000000  0015e560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080046f4 	.word	0x080046f4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080046f4 	.word	0x080046f4

0800017c <app_main_init>:
  * @retval none
  */


void app_main_init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  drv_timer_init();
 8000180:	f004 f930 	bl	80043e4 <drv_timer_init>


  acc_init();
#endif

}
 8000184:	bf00      	nop
 8000186:	bd80      	pop	{r7, pc}

08000188 <app_main_idle>:
static unsigned char acmsg[] = "Hello from STM";
static float temp;
static float Z_mg;
#endif
void app_main_idle(void)
{
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0





}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000194:	4770      	bx	lr
	...

08000198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	4603      	mov	r3, r0
 80001a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	db0b      	blt.n	80001c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	f003 021f 	and.w	r2, r3, #31
 80001b0:	4907      	ldr	r1, [pc, #28]	; (80001d0 <__NVIC_EnableIRQ+0x38>)
 80001b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b6:	095b      	lsrs	r3, r3, #5
 80001b8:	2001      	movs	r0, #1
 80001ba:	fa00 f202 	lsl.w	r2, r0, r2
 80001be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001c2:	bf00      	nop
 80001c4:	370c      	adds	r7, #12
 80001c6:	46bd      	mov	sp, r7
 80001c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100

080001d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	6039      	str	r1, [r7, #0]
 80001de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	db0a      	blt.n	80001fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e8:	683b      	ldr	r3, [r7, #0]
 80001ea:	b2da      	uxtb	r2, r3
 80001ec:	490c      	ldr	r1, [pc, #48]	; (8000220 <__NVIC_SetPriority+0x4c>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	0112      	lsls	r2, r2, #4
 80001f4:	b2d2      	uxtb	r2, r2
 80001f6:	440b      	add	r3, r1
 80001f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001fc:	e00a      	b.n	8000214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4908      	ldr	r1, [pc, #32]	; (8000224 <__NVIC_SetPriority+0x50>)
 8000204:	79fb      	ldrb	r3, [r7, #7]
 8000206:	f003 030f 	and.w	r3, r3, #15
 800020a:	3b04      	subs	r3, #4
 800020c:	0112      	lsls	r2, r2, #4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	440b      	add	r3, r1
 8000212:	761a      	strb	r2, [r3, #24]
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	e000e100 	.word	0xe000e100
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <LL_RCC_HSE_EnableDiv2>:
  * @brief  Enable HSE sysclk and pll prescaler division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_EnableDiv2
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableDiv2(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 800022c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800023a:	6013      	str	r3, [r2, #0]
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr

08000246 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000246:	b480      	push	{r7}
 8000248:	b085      	sub	sp, #20
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800024e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4313      	orrs	r3, r2
 800025c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800025e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4013      	ands	r3, r2
 8000268:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800026a:	68fb      	ldr	r3, [r7, #12]
}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 fd6a 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f812 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f9e0 	bl	8000648 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000288:	f000 f9b6 	bl	80005f8 <MX_USB_PCD_Init>
  MX_CRC_Init();
 800028c:	f000 f8aa 	bl	80003e4 <MX_CRC_Init>
  MX_RTC_Init();
 8000290:	f000 f8ca 	bl	8000428 <MX_RTC_Init>
  MX_TIM2_Init();
 8000294:	f000 f8f0 	bl	8000478 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000298:	f000 f988 	bl	80005ac <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 800029c:	f7ff ff6e 	bl	800017c <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    app_main_idle();
 80002a0:	f7ff ff72 	bl	8000188 <app_main_idle>
 80002a4:	e7fc      	b.n	80002a0 <main+0x28>
	...

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b0ae      	sub	sp, #184	; 0xb8
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002b2:	2248      	movs	r2, #72	; 0x48
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f004 fa14 	bl	80046e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
 80002cc:	615a      	str	r2, [r3, #20]
 80002ce:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2250      	movs	r2, #80	; 0x50
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f004 fa04 	bl	80046e4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002dc:	4b40      	ldr	r3, [pc, #256]	; (80003e0 <SystemClock_Config+0x138>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80002e4:	4a3e      	ldr	r2, [pc, #248]	; (80003e0 <SystemClock_Config+0x138>)
 80002e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	4b3c      	ldr	r3, [pc, #240]	; (80003e0 <SystemClock_Config+0x138>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80002f4:	603b      	str	r3, [r7, #0]
 80002f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80002f8:	230b      	movs	r3, #11
 80002fa:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000300:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000306:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000308:	2340      	movs	r3, #64	; 0x40
 800030a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800030e:	2305      	movs	r3, #5
 8000310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	2302      	movs	r3, #2
 8000316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031a:	2303      	movs	r3, #3
 800031c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000320:	2310      	movs	r3, #16
 8000322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000326:	2320      	movs	r3, #32
 8000328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800032c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000334:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800033c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000344:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000348:	4618      	mov	r0, r3
 800034a:	f001 fd45 	bl	8001dd8 <HAL_RCC_OscConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000354:	f000 f9fe 	bl	8000754 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000358:	236f      	movs	r3, #111	; 0x6f
 800035a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035c:	2303      	movs	r3, #3
 800035e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800036c:	2380      	movs	r3, #128	; 0x80
 800036e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000374:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000378:	2103      	movs	r1, #3
 800037a:	4618      	mov	r0, r3
 800037c:	f002 f8c0 	bl	8002500 <HAL_RCC_ClockConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000386:	f000 f9e5 	bl	8000754 <Error_Handler>
  }
  /** Enable the HSE Prescaler 
  */
  __HAL_RCC_HSE_DIV2_ENABLE();
 800038a:	f7ff ff4d 	bl	8000228 <LL_RCC_HSE_EnableDiv2>
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RTC
 800038e:	f44f 5324 	mov.w	r3, #10496	; 0x2900
 8000392:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000394:	2318      	movs	r3, #24
 8000396:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800039c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV4;
 800039e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80003a2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80003a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80003a8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80003aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003ae:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80003b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80003b4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003ba:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80003bc:	2300      	movs	r3, #0
 80003be:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 fcf1 	bl	8002dae <HAL_RCCEx_PeriphCLKConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80003d2:	f000 f9bf 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80003d6:	bf00      	nop
 80003d8:	37b8      	adds	r7, #184	; 0xb8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	58000400 	.word	0x58000400

080003e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <MX_CRC_Init+0x3c>)
 80003ea:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <MX_CRC_Init+0x40>)
 80003ec:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80003ee:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_CRC_Init+0x3c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <MX_CRC_Init+0x3c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_CRC_Init+0x3c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000400:	4b07      	ldr	r3, [pc, #28]	; (8000420 <MX_CRC_Init+0x3c>)
 8000402:	2200      	movs	r2, #0
 8000404:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_CRC_Init+0x3c>)
 8000408:	2201      	movs	r2, #1
 800040a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <MX_CRC_Init+0x3c>)
 800040e:	f000 fdcd 	bl	8000fac <HAL_CRC_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000418:	f000 f99c 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000004c 	.word	0x2000004c
 8000424:	40023000 	.word	0x40023000

08000428 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800042c:	4b10      	ldr	r3, [pc, #64]	; (8000470 <MX_RTC_Init+0x48>)
 800042e:	4a11      	ldr	r2, [pc, #68]	; (8000474 <MX_RTC_Init+0x4c>)
 8000430:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_RTC_Init+0x48>)
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <MX_RTC_Init+0x48>)
 800043a:	227f      	movs	r2, #127	; 0x7f
 800043c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_RTC_Init+0x48>)
 8000440:	22ff      	movs	r2, #255	; 0xff
 8000442:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <MX_RTC_Init+0x48>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_RTC_Init+0x48>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <MX_RTC_Init+0x48>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_RTC_Init+0x48>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800045c:	4804      	ldr	r0, [pc, #16]	; (8000470 <MX_RTC_Init+0x48>)
 800045e:	f002 ff2c 	bl	80032ba <HAL_RTC_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000468:	f000 f974 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000070 	.word	0x20000070
 8000474:	40002800 	.word	0x40002800

08000478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08e      	sub	sp, #56	; 0x38
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800047e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048c:	f107 031c 	add.w	r3, r7, #28
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000498:	463b      	mov	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004aa:	4b3f      	ldr	r3, [pc, #252]	; (80005a8 <MX_TIM2_Init+0x130>)
 80004ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 80004b2:	4b3d      	ldr	r3, [pc, #244]	; (80005a8 <MX_TIM2_Init+0x130>)
 80004b4:	2240      	movs	r2, #64	; 0x40
 80004b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b8:	4b3b      	ldr	r3, [pc, #236]	; (80005a8 <MX_TIM2_Init+0x130>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x0000FFFF;
 80004be:	4b3a      	ldr	r3, [pc, #232]	; (80005a8 <MX_TIM2_Init+0x130>)
 80004c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c6:	4b38      	ldr	r3, [pc, #224]	; (80005a8 <MX_TIM2_Init+0x130>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004cc:	4b36      	ldr	r3, [pc, #216]	; (80005a8 <MX_TIM2_Init+0x130>)
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004d2:	4835      	ldr	r0, [pc, #212]	; (80005a8 <MX_TIM2_Init+0x130>)
 80004d4:	f002 ffdf 	bl	8003496 <HAL_TIM_Base_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80004de:	f000 f939 	bl	8000754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ec:	4619      	mov	r1, r3
 80004ee:	482e      	ldr	r0, [pc, #184]	; (80005a8 <MX_TIM2_Init+0x130>)
 80004f0:	f003 f9f8 	bl	80038e4 <HAL_TIM_ConfigClockSource>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80004fa:	f000 f92b 	bl	8000754 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80004fe:	482a      	ldr	r0, [pc, #168]	; (80005a8 <MX_TIM2_Init+0x130>)
 8000500:	f003 f81e 	bl	8003540 <HAL_TIM_OC_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800050a:	f000 f923 	bl	8000754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000512:	2300      	movs	r3, #0
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	4619      	mov	r1, r3
 800051c:	4822      	ldr	r0, [pc, #136]	; (80005a8 <MX_TIM2_Init+0x130>)
 800051e:	f003 fe41 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000528:	f000 f914 	bl	8000754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800052c:	2300      	movs	r3, #0
 800052e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000530:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000534:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	2200      	movs	r2, #0
 8000542:	4619      	mov	r1, r3
 8000544:	4818      	ldr	r0, [pc, #96]	; (80005a8 <MX_TIM2_Init+0x130>)
 8000546:	f003 f94f 	bl	80037e8 <HAL_TIM_OC_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000550:	f000 f900 	bl	8000754 <Error_Handler>
  }
  sConfigOC.Pulse = 10000;
 8000554:	f242 7310 	movw	r3, #10000	; 0x2710
 8000558:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	2204      	movs	r2, #4
 800055e:	4619      	mov	r1, r3
 8000560:	4811      	ldr	r0, [pc, #68]	; (80005a8 <MX_TIM2_Init+0x130>)
 8000562:	f003 f941 	bl	80037e8 <HAL_TIM_OC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 800056c:	f000 f8f2 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->EGR |= TIM_EGR_UG;
 8000570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6153      	str	r3, [r2, #20]

  TIM2->CR1 |= TIM_CR1_CEN;
 8000580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6013      	str	r3, [r2, #0]


  // Enable the NVIC for TIM2
  NVIC_SetPriority(TIM2_IRQn, 0); // Set your desired priority
 8000590:	2100      	movs	r1, #0
 8000592:	201c      	movs	r0, #28
 8000594:	f7ff fe1e 	bl	80001d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000598:	201c      	movs	r0, #28
 800059a:	f7ff fdfd 	bl	8000198 <__NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	3738      	adds	r7, #56	; 0x38
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000094 	.word	0x20000094

080005ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_TIM16_Init+0x44>)
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <MX_TIM16_Init+0x48>)
 80005b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_TIM16_Init+0x44>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_TIM16_Init+0x44>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 0;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_TIM16_Init+0x44>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_TIM16_Init+0x44>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_TIM16_Init+0x44>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_TIM16_Init+0x44>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_TIM16_Init+0x44>)
 80005dc:	f002 ff5b 	bl	8003496 <HAL_TIM_Base_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80005e6:	f000 f8b5 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000348 	.word	0x20000348
 80005f4:	40014400 	.word	0x40014400

080005f8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_USB_PCD_Init+0x48>)
 80005fe:	4a11      	ldr	r2, [pc, #68]	; (8000644 <MX_USB_PCD_Init+0x4c>)
 8000600:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_USB_PCD_Init+0x48>)
 8000604:	2208      	movs	r2, #8
 8000606:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <MX_USB_PCD_Init+0x48>)
 800060a:	2202      	movs	r2, #2
 800060c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USB_PCD_Init+0x48>)
 8000610:	2202      	movs	r2, #2
 8000612:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_USB_PCD_Init+0x48>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USB_PCD_Init+0x48>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_USB_PCD_Init+0x48>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USB_PCD_Init+0x48>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_USB_PCD_Init+0x48>)
 800062e:	f000 ff2f 	bl	8001490 <HAL_PCD_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000638:	f000 f88c 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200000d4 	.word	0x200000d4
 8000644:	40006800 	.word	0x40006800

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065c:	2004      	movs	r0, #4
 800065e:	f7ff fdf2 	bl	8000246 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	2002      	movs	r0, #2
 8000664:	f7ff fdef 	bl	8000246 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	2001      	movs	r0, #1
 800066a:	f7ff fdec 	bl	8000246 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	2008      	movs	r0, #8
 8000670:	f7ff fde9 	bl	8000246 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2123      	movs	r1, #35	; 0x23
 8000678:	482a      	ldr	r0, [pc, #168]	; (8000724 <MX_GPIO_Init+0xdc>)
 800067a:	f000 fef1 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	2310      	movs	r3, #16
 8000680:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4619      	mov	r1, r3
 800068e:	4826      	ldr	r0, [pc, #152]	; (8000728 <MX_GPIO_Init+0xe0>)
 8000690:	f000 fd76 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000694:	2301      	movs	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	481e      	ldr	r0, [pc, #120]	; (8000724 <MX_GPIO_Init+0xdc>)
 80006aa:	f000 fd69 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD1_Pin;
 80006ae:	2322      	movs	r3, #34	; 0x22
 80006b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <MX_GPIO_Init+0xdc>)
 80006c4:	f000 fd5c 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80006c8:	2303      	movs	r3, #3
 80006ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4814      	ldr	r0, [pc, #80]	; (800072c <MX_GPIO_Init+0xe4>)
 80006da:	f000 fd51 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin;
 80006de:	2340      	movs	r3, #64	; 0x40
 80006e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006ee:	2307      	movs	r3, #7
 80006f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_GPIO_Init+0xdc>)
 80006f8:	f000 fd42 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	2302      	movs	r3, #2
 8000702:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800070c:	2307      	movs	r3, #7
 800070e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4619      	mov	r1, r3
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <MX_GPIO_Init+0xdc>)
 8000716:	f000 fd33 	bl	8001180 <HAL_GPIO_Init>

}
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	48000400 	.word	0x48000400
 8000728:	48000800 	.word	0x48000800
 800072c:	48000c00 	.word	0x48000c00

08000730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d101      	bne.n	8000746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000742:	f000 fb27 	bl	8000d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40014800 	.word	0x40014800

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800076a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800076e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <LL_AHB1_GRP1_EnableClock>:
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800078c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800079c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4013      	ands	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a8:	68fb      	ldr	r3, [r7, #12]
}
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <LL_AHB2_GRP1_EnableClock>:
{
 80007b6:	b480      	push	{r7}
 80007b8:	b085      	sub	sp, #20
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000804:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4013      	ands	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800081a:	b480      	push	{r7}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4313      	orrs	r3, r2
 8000830:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4013      	ands	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <HAL_CRC_MspInit+0x24>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d103      	bne.n	8000876 <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800086e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000872:	f7ff ff87 	bl	8000784 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023000 	.word	0x40023000

08000884 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <HAL_RTC_MspInit+0x28>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d105      	bne.n	80008a2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000896:	f7ff ff64 	bl	8000762 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800089a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800089e:	f7ff ffa3 	bl	80007e8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40002800 	.word	0x40002800

080008b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008c0:	d10b      	bne.n	80008da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008c2:	2001      	movs	r0, #1
 80008c4:	f7ff ff90 	bl	80007e8 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	201c      	movs	r0, #28
 80008ce:	f000 fb45 	bl	8000f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008d2:	201c      	movs	r0, #28
 80008d4:	f000 fb5c 	bl	8000f90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80008d8:	e010      	b.n	80008fc <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM16)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a09      	ldr	r2, [pc, #36]	; (8000904 <HAL_TIM_Base_MspInit+0x54>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d10b      	bne.n	80008fc <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80008e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80008e8:	f7ff ff97 	bl	800081a <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	2019      	movs	r0, #25
 80008f2:	f000 fb33 	bl	8000f5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008f6:	2019      	movs	r0, #25
 80008f8:	f000 fb4a 	bl	8000f90 <HAL_NVIC_EnableIRQ>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40014400 	.word	0x40014400

08000908 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0f      	ldr	r2, [pc, #60]	; (8000964 <HAL_PCD_MspInit+0x5c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d118      	bne.n	800095c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff ff43 	bl	80007b6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000930:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000934:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000942:	230a      	movs	r3, #10
 8000944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f000 fc16 	bl	8001180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000954:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000958:	f7ff ff46 	bl	80007e8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40006800 	.word	0x40006800

08000968 <LL_APB2_GRP1_EnableClock>:
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000974:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4313      	orrs	r3, r2
 800097e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4013      	ands	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098c:	68fb      	ldr	r3, [r7, #12]
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0); 
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	201a      	movs	r0, #26
 80009b2:	f000 fad3 	bl	8000f5c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn); 
 80009b6:	201a      	movs	r0, #26
 80009b8:	f000 faea 	bl	8000f90 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80009bc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80009c0:	f7ff ffd2 	bl	8000968 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c4:	f107 0208 	add.w	r2, r7, #8
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 ff66 	bl	80028a0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009d4:	f001 ff4e 	bl	8002874 <HAL_RCC_GetPCLK2Freq>
 80009d8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80009da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009dc:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <HAL_InitTick+0x8c>)
 80009de:	fba2 2303 	umull	r2, r3, r2, r3
 80009e2:	0c9b      	lsrs	r3, r3, #18
 80009e4:	3b01      	subs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_InitTick+0x90>)
 80009ea:	4a11      	ldr	r2, [pc, #68]	; (8000a30 <HAL_InitTick+0x94>)
 80009ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_InitTick+0x90>)
 80009f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f4:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80009f6:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <HAL_InitTick+0x90>)
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_InitTick+0x90>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_InitTick+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000a08:	4808      	ldr	r0, [pc, #32]	; (8000a2c <HAL_InitTick+0x90>)
 8000a0a:	f002 fd44 	bl	8003496 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d104      	bne.n	8000a1e <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_InitTick+0x90>)
 8000a16:	f002 fd69 	bl	80034ec <HAL_TIM_Base_Start_IT>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	e000      	b.n	8000a20 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3730      	adds	r7, #48	; 0x30
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	431bde83 	.word	0x431bde83
 8000a2c:	20000388 	.word	0x20000388
 8000a30:	40014800 	.word	0x40014800

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a9a:	f002 fd86 	bl	80035aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000348 	.word	0x20000348

08000aa8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000aae:	f002 fd7c 	bl	80035aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  simpleTimer_IRQHandler(&htim17);
 8000ab2:	4802      	ldr	r0, [pc, #8]	; (8000abc <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000ab4:	f003 fdc4 	bl	8004640 <simpleTimer_IRQHandler>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000388 	.word	0x20000388

08000ac0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  drv_timer_IRQHandler(&htim2);
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <TIM2_IRQHandler+0x14>)
 8000ac6:	f003 fd11 	bl	80044ec <drv_timer_IRQHandler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aca:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <TIM2_IRQHandler+0x14>)
 8000acc:	f002 fd6d 	bl	80035aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000094 	.word	0x20000094

08000ad8 <USART1_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  drv_uart_IRQHandler();
 8000adc:	f003 fd50 	bl	8004580 <drv_uart_IRQHandler>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  //drv_SPI_IRQHandler();
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <SystemInit+0xa0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <SystemInit+0xa0>)
 8000b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b04:	4a23      	ldr	r2, [pc, #140]	; (8000b94 <SystemInit+0xa0>)
 8000b06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b22:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000b26:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <SystemInit+0xa4>)
 8000b34:	4013      	ands	r3, r2
 8000b36:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b44:	f023 0305 	bic.w	r3, r3, #5
 8000b48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b58:	f023 0301 	bic.w	r3, r3, #1
 8000b5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <SystemInit+0xa8>)
 8000b66:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <SystemInit+0xa8>)
 8000b6e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00
 8000b98:	faf6fefb 	.word	0xfaf6fefb
 8000b9c:	22041000 	.word	0x22041000

08000ba0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <SystemCoreClockUpdate+0x130>)
 8000bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b0c      	cmp	r3, #12
 8000bc6:	d867      	bhi.n	8000c98 <SystemCoreClockUpdate+0xf8>
 8000bc8:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <SystemCoreClockUpdate+0x30>)
 8000bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bce:	bf00      	nop
 8000bd0:	08000c05 	.word	0x08000c05
 8000bd4:	08000c99 	.word	0x08000c99
 8000bd8:	08000c99 	.word	0x08000c99
 8000bdc:	08000c99 	.word	0x08000c99
 8000be0:	08000c0d 	.word	0x08000c0d
 8000be4:	08000c99 	.word	0x08000c99
 8000be8:	08000c99 	.word	0x08000c99
 8000bec:	08000c99 	.word	0x08000c99
 8000bf0:	08000c15 	.word	0x08000c15
 8000bf4:	08000c99 	.word	0x08000c99
 8000bf8:	08000c99 	.word	0x08000c99
 8000bfc:	08000c99 	.word	0x08000c99
 8000c00:	08000c1d 	.word	0x08000c1d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000c04:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <SystemCoreClockUpdate+0x134>)
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	6013      	str	r3, [r2, #0]
      break;
 8000c0a:	e049      	b.n	8000ca0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000c0c:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <SystemCoreClockUpdate+0x134>)
 8000c0e:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <SystemCoreClockUpdate+0x138>)
 8000c10:	601a      	str	r2, [r3, #0]
      break;
 8000c12:	e045      	b.n	8000ca0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <SystemCoreClockUpdate+0x134>)
 8000c16:	4a31      	ldr	r2, [pc, #196]	; (8000cdc <SystemCoreClockUpdate+0x13c>)
 8000c18:	601a      	str	r2, [r3, #0]
      break;
 8000c1a:	e041      	b.n	8000ca0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	091b      	lsrs	r3, r3, #4
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	3301      	adds	r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d105      	bne.n	8000c4a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000c3e:	4a26      	ldr	r2, [pc, #152]	; (8000cd8 <SystemCoreClockUpdate+0x138>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e00d      	b.n	8000c66 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d105      	bne.n	8000c5c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000c50:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <SystemCoreClockUpdate+0x13c>)
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	e004      	b.n	8000c66 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c64:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fb02 f303 	mul.w	r3, r2, r3
 8000c78:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0f5b      	lsrs	r3, r3, #29
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	3301      	adds	r3, #1
 8000c88:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <SystemCoreClockUpdate+0x134>)
 8000c94:	6013      	str	r3, [r2, #0]
      break;
 8000c96:	e003      	b.n	8000ca0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000c98:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <SystemCoreClockUpdate+0x134>)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	6013      	str	r3, [r2, #0]
      break;
 8000c9e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	091b      	lsrs	r3, r3, #4
 8000ca8:	f003 030f 	and.w	r3, r3, #15
 8000cac:	4a0c      	ldr	r2, [pc, #48]	; (8000ce0 <SystemCoreClockUpdate+0x140>)
 8000cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <SystemCoreClockUpdate+0x134>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemCoreClockUpdate+0x134>)
 8000cc0:	6013      	str	r3, [r2, #0]

}
 8000cc2:	bf00      	nop
 8000cc4:	371c      	adds	r7, #28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	08004798 	.word	0x08004798
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	00f42400 	.word	0x00f42400
 8000cdc:	01e84800 	.word	0x01e84800
 8000ce0:	08004738 	.word	0x08004738

08000ce4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ce4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce8:	3304      	adds	r3, #4

08000cea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cec:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000cee:	d3f9      	bcc.n	8000ce4 <CopyDataInit>
  bx lr
 8000cf0:	4770      	bx	lr

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000cf2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000cf4:	3004      	adds	r0, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000cf6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>
  bx lr
 8000cfa:	4770      	bx	lr

08000cfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000cfe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <LoopForever+0x8>)
 8000d02:	490d      	ldr	r1, [pc, #52]	; (8000d38 <LoopForever+0xc>)
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <LoopForever+0x10>)
 8000d06:	2300      	movs	r3, #0
 8000d08:	f7ff ffef 	bl	8000cea <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <LoopForever+0x14>)
 8000d0e:	490d      	ldr	r1, [pc, #52]	; (8000d44 <LoopForever+0x18>)
 8000d10:	2300      	movs	r3, #0
 8000d12:	f7ff fff0 	bl	8000cf6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <LoopForever+0x1c>)
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <LoopForever+0x20>)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f7ff ffeb 	bl	8000cf6 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d20:	f7ff fee8 	bl	8000af4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d24:	f003 fcba 	bl	800469c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000d28:	f7ff faa6 	bl	8000278 <main>

08000d2c <LoopForever>:

LoopForever:
  b LoopForever
 8000d2c:	e7fe      	b.n	8000d2c <LoopForever>
 8000d2e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000d30:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000d34:	20000004 	.word	0x20000004
 8000d38:	20000010 	.word	0x20000010
 8000d3c:	080047e0 	.word	0x080047e0
  INIT_BSS _sbss, _ebss
 8000d40:	20000010 	.word	0x20000010
 8000d44:	200003cc 	.word	0x200003cc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000d48:	20030000 	.word	0x20030000
 8000d4c:	20030000 	.word	0x20030000

08000d50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_Init+0x3c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <HAL_Init+0x3c>)
 8000d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f8eb 	bl	8000f46 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d70:	2000      	movs	r0, #0
 8000d72:	f7ff fe13 	bl	800099c <HAL_InitTick>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	e001      	b.n	8000d86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d82:	f7ff fd63 	bl	800084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	58004000 	.word	0x58004000

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	2000000c 	.word	0x2000000c
 8000db8:	200003c8 	.word	0x200003c8

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200003c8 	.word	0x200003c8

08000dd4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTickPrio+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008

08000dec <__NVIC_SetPriorityGrouping>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <__NVIC_EnableIRQ+0x38>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff4c 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6a:	f7ff ff63 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000f6e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	6978      	ldr	r0, [r7, #20]
 8000f76:	f7ff ffb3 	bl	8000ee0 <NVIC_EncodePriority>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff82 	bl	8000e8c <__NVIC_SetPriority>
}
 8000f88:	bf00      	nop
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff56 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e054      	b.n	8001068 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7f5b      	ldrb	r3, [r3, #29]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d105      	bne.n	8000fd4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fc44 	bl	800085c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	791b      	ldrb	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10c      	bne.n	8000ffc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a22      	ldr	r2, [pc, #136]	; (8001070 <HAL_CRC_Init+0xc4>)
 8000fe8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0218 	bic.w	r2, r2, #24
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	e00c      	b.n	8001016 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6899      	ldr	r1, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	461a      	mov	r2, r3
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 f834 	bl	8001074 <HAL_CRCEx_Polynomial_Set>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e028      	b.n	8001068 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	795b      	ldrb	r3, [r3, #5]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d105      	bne.n	800102a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f04f 32ff 	mov.w	r2, #4294967295
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	e004      	b.n	8001034 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	6912      	ldr	r2, [r2, #16]
 8001032:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699a      	ldr	r2, [r3, #24]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	04c11db7 	.word	0x04c11db7

08001074 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001084:	231f      	movs	r3, #31
 8001086:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001088:	bf00      	nop
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1e5a      	subs	r2, r3, #1
 800108e:	613a      	str	r2, [r7, #16]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d009      	beq.n	80010a8 <HAL_CRCEx_Polynomial_Set+0x34>
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f0      	beq.n	800108a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b18      	cmp	r3, #24
 80010ac:	d846      	bhi.n	800113c <HAL_CRCEx_Polynomial_Set+0xc8>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	08001143 	.word	0x08001143
 80010b8:	0800113d 	.word	0x0800113d
 80010bc:	0800113d 	.word	0x0800113d
 80010c0:	0800113d 	.word	0x0800113d
 80010c4:	0800113d 	.word	0x0800113d
 80010c8:	0800113d 	.word	0x0800113d
 80010cc:	0800113d 	.word	0x0800113d
 80010d0:	0800113d 	.word	0x0800113d
 80010d4:	08001131 	.word	0x08001131
 80010d8:	0800113d 	.word	0x0800113d
 80010dc:	0800113d 	.word	0x0800113d
 80010e0:	0800113d 	.word	0x0800113d
 80010e4:	0800113d 	.word	0x0800113d
 80010e8:	0800113d 	.word	0x0800113d
 80010ec:	0800113d 	.word	0x0800113d
 80010f0:	0800113d 	.word	0x0800113d
 80010f4:	08001125 	.word	0x08001125
 80010f8:	0800113d 	.word	0x0800113d
 80010fc:	0800113d 	.word	0x0800113d
 8001100:	0800113d 	.word	0x0800113d
 8001104:	0800113d 	.word	0x0800113d
 8001108:	0800113d 	.word	0x0800113d
 800110c:	0800113d 	.word	0x0800113d
 8001110:	0800113d 	.word	0x0800113d
 8001114:	08001119 	.word	0x08001119
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	2b06      	cmp	r3, #6
 800111c:	d913      	bls.n	8001146 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001122:	e010      	b.n	8001146 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	2b07      	cmp	r3, #7
 8001128:	d90f      	bls.n	800114a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800112e:	e00c      	b.n	800114a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	d90b      	bls.n	800114e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800113a:	e008      	b.n	800114e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	75fb      	strb	r3, [r7, #23]
      break;
 8001140:	e006      	b.n	8001150 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001142:	bf00      	nop
 8001144:	e004      	b.n	8001150 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001146:	bf00      	nop
 8001148:	e002      	b.n	8001150 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800114a:	bf00      	nop
 800114c:	e000      	b.n	8001150 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800114e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001150:	7dfb      	ldrb	r3, [r7, #23]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10d      	bne.n	8001172 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 0118 	bic.w	r1, r3, #24
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	430a      	orrs	r2, r1
 8001170:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001172:	7dfb      	ldrb	r3, [r7, #23]
}
 8001174:	4618      	mov	r0, r3
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118e:	e14c      	b.n	800142a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	4013      	ands	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 813e 	beq.w	8001424 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d00b      	beq.n	80011c8 <HAL_GPIO_Init+0x48>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d007      	beq.n	80011c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011bc:	2b11      	cmp	r3, #17
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b12      	cmp	r3, #18
 80011c6:	d130      	bne.n	800122a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fe:	2201      	movs	r2, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 0201 	and.w	r2, r3, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0xea>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b12      	cmp	r3, #18
 8001268:	d123      	bne.n	80012b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	6939      	ldr	r1, [r7, #16]
 80012ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0203 	and.w	r2, r3, #3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8098 	beq.w	8001424 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80012f4:	4a54      	ldr	r2, [pc, #336]	; (8001448 <HAL_GPIO_Init+0x2c8>)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	3302      	adds	r3, #2
 80012fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800131e:	d019      	beq.n	8001354 <HAL_GPIO_Init+0x1d4>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a4a      	ldr	r2, [pc, #296]	; (800144c <HAL_GPIO_Init+0x2cc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d013      	beq.n	8001350 <HAL_GPIO_Init+0x1d0>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a49      	ldr	r2, [pc, #292]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d00d      	beq.n	800134c <HAL_GPIO_Init+0x1cc>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a48      	ldr	r2, [pc, #288]	; (8001454 <HAL_GPIO_Init+0x2d4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d007      	beq.n	8001348 <HAL_GPIO_Init+0x1c8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a47      	ldr	r2, [pc, #284]	; (8001458 <HAL_GPIO_Init+0x2d8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d101      	bne.n	8001344 <HAL_GPIO_Init+0x1c4>
 8001340:	2304      	movs	r3, #4
 8001342:	e008      	b.n	8001356 <HAL_GPIO_Init+0x1d6>
 8001344:	2307      	movs	r3, #7
 8001346:	e006      	b.n	8001356 <HAL_GPIO_Init+0x1d6>
 8001348:	2303      	movs	r3, #3
 800134a:	e004      	b.n	8001356 <HAL_GPIO_Init+0x1d6>
 800134c:	2302      	movs	r3, #2
 800134e:	e002      	b.n	8001356 <HAL_GPIO_Init+0x1d6>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <HAL_GPIO_Init+0x1d6>
 8001354:	2300      	movs	r3, #0
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	f002 0203 	and.w	r2, r2, #3
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	4093      	lsls	r3, r2
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001366:	4938      	ldr	r1, [pc, #224]	; (8001448 <HAL_GPIO_Init+0x2c8>)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_GPIO_Init+0x2dc>)
 8001376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800137a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	43db      	mvns	r3, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800139a:	4a30      	ldr	r2, [pc, #192]	; (800145c <HAL_GPIO_Init+0x2dc>)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <HAL_GPIO_Init+0x2dc>)
 80013a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013c8:	4a24      	ldr	r2, [pc, #144]	; (800145c <HAL_GPIO_Init+0x2dc>)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <HAL_GPIO_Init+0x2dc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f4:	4a19      	ldr	r2, [pc, #100]	; (800145c <HAL_GPIO_Init+0x2dc>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_GPIO_Init+0x2dc>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <HAL_GPIO_Init+0x2dc>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	f47f aeab 	bne.w	8001190 <HAL_GPIO_Init+0x10>
  }
}
 800143a:	bf00      	nop
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40010000 	.word	0x40010000
 800144c:	48000400 	.word	0x48000400
 8001450:	48000800 	.word	0x48000800
 8001454:	48000c00 	.word	0x48000c00
 8001458:	48001000 	.word	0x48001000
 800145c:	58000800 	.word	0x58000800

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147c:	e002      	b.n	8001484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	b08b      	sub	sp, #44	; 0x2c
 8001494:	af06      	add	r7, sp, #24
 8001496:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0ad      	b.n	80015fe <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff fa26 	bl	8000908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 ff01 	bl	80042d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	e035      	b.n	8001540 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	015b      	lsls	r3, r3, #5
 80014da:	4413      	add	r3, r2
 80014dc:	3329      	adds	r3, #41	; 0x29
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	4413      	add	r3, r2
 80014ea:	3328      	adds	r3, #40	; 0x28
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	b291      	uxth	r1, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	015b      	lsls	r3, r3, #5
 80014fa:	4413      	add	r3, r2
 80014fc:	3336      	adds	r3, #54	; 0x36
 80014fe:	460a      	mov	r2, r1
 8001500:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	015b      	lsls	r3, r3, #5
 8001508:	4413      	add	r3, r2
 800150a:	332b      	adds	r3, #43	; 0x2b
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	015b      	lsls	r3, r3, #5
 8001516:	4413      	add	r3, r2
 8001518:	3338      	adds	r3, #56	; 0x38
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	015b      	lsls	r3, r3, #5
 8001524:	4413      	add	r3, r2
 8001526:	333c      	adds	r3, #60	; 0x3c
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	3302      	adds	r3, #2
 8001532:	015b      	lsls	r3, r3, #5
 8001534:	4413      	add	r3, r2
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	3301      	adds	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3c4      	bcc.n	80014d4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e031      	b.n	80015b4 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	015b      	lsls	r3, r3, #5
 8001556:	4413      	add	r3, r2
 8001558:	f203 1329 	addw	r3, r3, #297	; 0x129
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	015b      	lsls	r3, r3, #5
 8001566:	4413      	add	r3, r2
 8001568:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	015b      	lsls	r3, r3, #5
 8001576:	4413      	add	r3, r2
 8001578:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	015b      	lsls	r3, r3, #5
 8001586:	4413      	add	r3, r2
 8001588:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	4413      	add	r3, r2
 8001598:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	330a      	adds	r3, #10
 80015a6:	015b      	lsls	r3, r3, #5
 80015a8:	4413      	add	r3, r2
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	3301      	adds	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3c8      	bcc.n	8001550 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	687e      	ldr	r6, [r7, #4]
 80015c6:	466d      	mov	r5, sp
 80015c8:	f106 0410 	add.w	r4, r6, #16
 80015cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	602b      	str	r3, [r5, #0]
 80015d4:	1d33      	adds	r3, r6, #4
 80015d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015d8:	6838      	ldr	r0, [r7, #0]
 80015da:	f002 fe96 	bl	800430a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d102      	bne.n	80015fc <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f805 	bl	8001606 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001606 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800162a:	b29b      	uxth	r3, r3
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	b29a      	uxth	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800163e:	b29b      	uxth	r3, r3
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a04      	ldr	r2, [pc, #16]	; (8001678 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	58000400 	.word	0x58000400

0800167c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_PWREx_GetVoltageRange+0x18>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	58000400 	.word	0x58000400

08001698 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016aa:	d101      	bne.n	80016b0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_RCC_HSE_EnableBypass>:
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_RCC_HSE_DisableBypass>:
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80016de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_RCC_HSE_Enable>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80016fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_RCC_HSE_Disable>:
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_RCC_HSE_IsReady>:
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001746:	d101      	bne.n	800174c <LL_RCC_HSE_IsReady+0x18>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <LL_RCC_HSE_IsReady+0x1a>
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_RCC_HSI_Enable>:
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_RCC_HSI_Disable>:
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800177a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001788:	6013      	str	r3, [r2, #0]
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_RCC_HSI_IsReady>:
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a6:	d101      	bne.n	80017ac <LL_RCC_HSI_IsReady+0x18>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <LL_RCC_HSI_IsReady+0x1a>
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80017c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <LL_RCC_HSI48_Enable>:
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80017e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_RCC_HSI48_Disable>:
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_RCC_HSI48_IsReady>:
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800182a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b02      	cmp	r3, #2
 8001838:	d101      	bne.n	800183e <LL_RCC_HSI48_IsReady+0x18>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <LL_RCC_HSI48_IsReady+0x1a>
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LL_RCC_LSE_Enable>:
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_RCC_LSE_Disable>:
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_RCC_LSE_EnableBypass>:
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_RCC_LSE_DisableBypass>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_RCC_LSE_IsReady>:
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80018d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d101      	bne.n	80018ea <LL_RCC_LSE_IsReady+0x18>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <LL_RCC_LSE_IsReady+0x1a>
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_RCC_LSI1_Enable>:
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001902:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_RCC_LSI1_Disable>:
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_RCC_LSI1_IsReady>:
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b02      	cmp	r3, #2
 800194c:	d101      	bne.n	8001952 <LL_RCC_LSI1_IsReady+0x18>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_RCC_LSI1_IsReady+0x1a>
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_RCC_LSI2_Enable>:
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_RCC_LSI2_Disable>:
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_RCC_LSI2_IsReady>:
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d101      	bne.n	80019ba <LL_RCC_LSI2_IsReady+0x18>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <LL_RCC_LSI2_IsReady+0x1a>
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_RCC_LSI2_SetTrimming>:
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019e2:	4313      	orrs	r3, r2
 80019e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_RCC_MSI_Enable>:
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_RCC_MSI_Disable>:
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6013      	str	r3, [r2, #0]
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_RCC_MSI_IsReady>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d101      	bne.n	8001a46 <LL_RCC_MSI_IsReady+0x16>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_RCC_MSI_IsReady+0x18>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_RCC_MSI_SetRange>:
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_RCC_MSI_GetRange>:
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a8a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2bb0      	cmp	r3, #176	; 0xb0
 8001a90:	d901      	bls.n	8001a96 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001a92:	23b0      	movs	r3, #176	; 0xb0
 8001a94:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001a96:	687b      	ldr	r3, [r7, #4]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_RCC_SetSysClkSource>:
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 0203 	bic.w	r2, r3, #3
 8001ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_GetSysClkSource>:
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_RCC_SetAHBPrescaler>:
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_RCC_SetAHB4Prescaler>:
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b72:	f023 020f 	bic.w	r2, r3, #15
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_RCC_SetAPB1Prescaler>:
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_RCC_SetAPB2Prescaler>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_RCC_GetAHBPrescaler>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_C2_RCC_GetAHBPrescaler>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_RCC_GetAHB4Prescaler>:
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_RCC_GetAPB1Prescaler>:
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_RCC_GetAPB2Prescaler>:
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c70:	6013      	str	r3, [r2, #0]
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cac:	d101      	bne.n	8001cb2 <LL_RCC_PLL_IsReady+0x18>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <LL_RCC_PLL_IsReady+0x1a>
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f003 0303 	and.w	r3, r3, #3
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	d101      	bne.n	8001d38 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d58:	d101      	bne.n	8001d5e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7e:	d101      	bne.n	8001d84 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001da2:	d101      	bne.n	8001da8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dc6:	d101      	bne.n	8001dcc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b08d      	sub	sp, #52	; 0x34
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e386      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 808f 	beq.w	8001f16 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df8:	f7ff fe7d 	bl	8001af6 <LL_RCC_GetSysClkSource>
 8001dfc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dfe:	f7ff ff83 	bl	8001d08 <LL_RCC_PLL_GetMainSource>
 8001e02:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_RCC_OscConfig+0x3e>
 8001e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d149      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d146      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e16:	f7ff fe0b 	bl	8001a30 <LL_RCC_MSI_IsReady>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_OscConfig+0x54>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e365      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001e30:	f7ff fe23 	bl	8001a7a <LL_RCC_MSI_GetRange>
 8001e34:	4603      	mov	r3, r0
 8001e36:	429c      	cmp	r4, r3
 8001e38:	d914      	bls.n	8001e64 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fd60 	bl	8002904 <RCC_SetFlashLatencyFromMSIRange>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e354      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fdfd 	bl	8001a52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fe21 	bl	8001aa4 <LL_RCC_MSI_SetCalibTrimming>
 8001e62:	e013      	b.n	8001e8c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fdf2 	bl	8001a52 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fe16 	bl	8001aa4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fd41 	bl	8002904 <RCC_SetFlashLatencyFromMSIRange>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e335      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8001e8c:	f7fe fe88 	bl	8000ba0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e90:	4bb4      	ldr	r3, [pc, #720]	; (8002164 <HAL_RCC_OscConfig+0x38c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fd81 	bl	800099c <HAL_InitTick>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d039      	beq.n	8001f14 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e329      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01e      	beq.n	8001eea <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eac:	f7ff fda2 	bl	80019f4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ff84 	bl	8000dbc <HAL_GetTick>
 8001eb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eb8:	f7fe ff80 	bl	8000dbc <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e316      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001eca:	f7ff fdb1 	bl	8001a30 <LL_RCC_MSI_IsReady>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f1      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fdba 	bl	8001a52 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fdde 	bl	8001aa4 <LL_RCC_MSI_SetCalibTrimming>
 8001ee8:	e015      	b.n	8001f16 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eea:	f7ff fd92 	bl	8001a12 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eee:	f7fe ff65 	bl	8000dbc <HAL_GetTick>
 8001ef2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef6:	f7fe ff61 	bl	8000dbc <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e2f7      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f08:	f7ff fd92 	bl	8001a30 <LL_RCC_MSI_IsReady>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f1      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x11e>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d05a      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f22:	f7ff fde8 	bl	8001af6 <LL_RCC_GetSysClkSource>
 8001f26:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f28:	f7ff feee 	bl	8001d08 <LL_RCC_PLL_GetMainSource>
 8001f2c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_OscConfig+0x168>
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d10d      	bne.n	8001f56 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d10a      	bne.n	8001f56 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	f7ff fbf8 	bl	8001734 <LL_RCC_HSE_IsReady>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d045      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1fe>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d141      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e2d0      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_OscConfig+0x18e>
 8001f60:	f7ff fbca 	bl	80016f8 <LL_RCC_HSE_Enable>
 8001f64:	e00d      	b.n	8001f82 <HAL_RCC_OscConfig+0x1aa>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f6e:	d104      	bne.n	8001f7a <HAL_RCC_OscConfig+0x1a2>
 8001f70:	f7ff fba4 	bl	80016bc <LL_RCC_HSE_EnableBypass>
 8001f74:	f7ff fbc0 	bl	80016f8 <LL_RCC_HSE_Enable>
 8001f78:	e003      	b.n	8001f82 <HAL_RCC_OscConfig+0x1aa>
 8001f7a:	f7ff fbcc 	bl	8001716 <LL_RCC_HSE_Disable>
 8001f7e:	f7ff fbac 	bl	80016da <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7fe ff17 	bl	8000dbc <HAL_GetTick>
 8001f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f92:	f7fe ff13 	bl	8000dbc <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b64      	cmp	r3, #100	; 0x64
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e2a9      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001fa4:	f7ff fbc6 	bl	8001734 <LL_RCC_HSE_IsReady>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f1      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1ba>
 8001fae:	e013      	b.n	8001fd8 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ff04 	bl	8000dbc <HAL_GetTick>
 8001fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7fe ff00 	bl	8000dbc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e296      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001fca:	f7ff fbb3 	bl	8001734 <LL_RCC_HSE_IsReady>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1f1      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1e0>
 8001fd4:	e000      	b.n	8001fd8 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d051      	beq.n	8002088 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe4:	f7ff fd87 	bl	8001af6 <LL_RCC_GetSysClkSource>
 8001fe8:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fea:	f7ff fe8d 	bl	8001d08 <LL_RCC_PLL_GetMainSource>
 8001fee:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d005      	beq.n	8002002 <HAL_RCC_OscConfig+0x22a>
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d113      	bne.n	8002024 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d110      	bne.n	8002024 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002002:	f7ff fbc7 	bl	8001794 <LL_RCC_HSI_IsReady>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_OscConfig+0x240>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e26f      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fbcb 	bl	80017b8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002022:	e031      	b.n	8002088 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d019      	beq.n	8002060 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202c:	f7ff fb94 	bl	8001758 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7fe fec4 	bl	8000dbc <HAL_GetTick>
 8002034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002038:	f7fe fec0 	bl	8000dbc <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e256      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 800204a:	f7ff fba3 	bl	8001794 <LL_RCC_HSI_IsReady>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f1      	beq.n	8002038 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fbad 	bl	80017b8 <LL_RCC_HSI_SetCalibTrimming>
 800205e:	e013      	b.n	8002088 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002060:	f7ff fb89 	bl	8001776 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe feaa 	bl	8000dbc <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206c:	f7fe fea6 	bl	8000dbc <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e23c      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 800207e:	f7ff fb89 	bl	8001794 <LL_RCC_HSI_IsReady>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f1      	bne.n	800206c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80a2 	beq.w	80021e6 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d075      	beq.n	8002196 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d046      	beq.n	8002144 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80020b6:	f7ff fc40 	bl	800193a <LL_RCC_LSI1_IsReady>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d113      	bne.n	80020e8 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80020c0:	f7ff fc19 	bl	80018f6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020c4:	f7fe fe7a 	bl	8000dbc <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020cc:	f7fe fe76 	bl	8000dbc <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e20c      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80020de:	f7ff fc2c 	bl	800193a <LL_RCC_LSI1_IsReady>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f1      	beq.n	80020cc <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80020e8:	f7ff fc39 	bl	800195e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7fe fe66 	bl	8000dbc <HAL_GetTick>
 80020f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80020f4:	f7fe fe62 	bl	8000dbc <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e1f8      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002106:	f7ff fc4c 	bl	80019a2 <LL_RCC_LSI2_IsReady>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f1      	beq.n	80020f4 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fc56 	bl	80019c6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800211a:	f7ff fbfd 	bl	8001918 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7fe fe4d 	bl	8000dbc <HAL_GetTick>
 8002122:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002126:	f7fe fe49 	bl	8000dbc <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e1df      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002138:	f7ff fbff 	bl	800193a <LL_RCC_LSI1_IsReady>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f1      	bne.n	8002126 <HAL_RCC_OscConfig+0x34e>
 8002142:	e050      	b.n	80021e6 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002144:	f7ff fbd7 	bl	80018f6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe fe38 	bl	8000dbc <HAL_GetTick>
 800214c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002150:	f7fe fe34 	bl	8000dbc <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d904      	bls.n	8002168 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1ca      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002168:	f7ff fbe7 	bl	800193a <LL_RCC_LSI1_IsReady>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0ee      	beq.n	8002150 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002172:	f7ff fc05 	bl	8001980 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002178:	f7fe fe20 	bl	8000dbc <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b03      	cmp	r3, #3
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1b6      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800218a:	f7ff fc0a 	bl	80019a2 <LL_RCC_LSI2_IsReady>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f1      	bne.n	8002178 <HAL_RCC_OscConfig+0x3a0>
 8002194:	e027      	b.n	80021e6 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002196:	f7ff fbf3 	bl	8001980 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7fe fe0f 	bl	8000dbc <HAL_GetTick>
 800219e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80021a2:	f7fe fe0b 	bl	8000dbc <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e1a1      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80021b4:	f7ff fbf5 	bl	80019a2 <LL_RCC_LSI2_IsReady>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f1      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80021be:	f7ff fbab 	bl	8001918 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7fe fdfb 	bl	8000dbc <HAL_GetTick>
 80021c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021ca:	f7fe fdf7 	bl	8000dbc <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e18d      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80021dc:	f7ff fbad 	bl	800193a <LL_RCC_LSI1_IsReady>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f1      	bne.n	80021ca <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d05b      	beq.n	80022aa <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f2:	4bb5      	ldr	r3, [pc, #724]	; (80024c8 <HAL_RCC_OscConfig+0x6f0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d114      	bne.n	8002228 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80021fe:	f7ff fa2d 	bl	800165c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002202:	f7fe fddb 	bl	8000dbc <HAL_GetTick>
 8002206:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800220a:	f7fe fdd7 	bl	8000dbc <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e16d      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221c:	4baa      	ldr	r3, [pc, #680]	; (80024c8 <HAL_RCC_OscConfig+0x6f0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d102      	bne.n	8002236 <HAL_RCC_OscConfig+0x45e>
 8002230:	f7ff fb0b 	bl	800184a <LL_RCC_LSE_Enable>
 8002234:	e00c      	b.n	8002250 <HAL_RCC_OscConfig+0x478>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b05      	cmp	r3, #5
 800223c:	d104      	bne.n	8002248 <HAL_RCC_OscConfig+0x470>
 800223e:	f7ff fb26 	bl	800188e <LL_RCC_LSE_EnableBypass>
 8002242:	f7ff fb02 	bl	800184a <LL_RCC_LSE_Enable>
 8002246:	e003      	b.n	8002250 <HAL_RCC_OscConfig+0x478>
 8002248:	f7ff fb10 	bl	800186c <LL_RCC_LSE_Disable>
 800224c:	f7ff fb30 	bl	80018b0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d014      	beq.n	8002282 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7fe fdb0 	bl	8000dbc <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7fe fdac 	bl	8000dbc <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e140      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002276:	f7ff fb2c 	bl	80018d2 <LL_RCC_LSE_IsReady>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ef      	beq.n	8002260 <HAL_RCC_OscConfig+0x488>
 8002280:	e013      	b.n	80022aa <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7fe fd9b 	bl	8000dbc <HAL_GetTick>
 8002286:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7fe fd97 	bl	8000dbc <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e12b      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80022a0:	f7ff fb17 	bl	80018d2 <LL_RCC_LSE_IsReady>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ef      	bne.n	800228a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02c      	beq.n	8002310 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d014      	beq.n	80022e8 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022be:	f7ff fa90 	bl	80017e2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c2:	f7fe fd7b 	bl	8000dbc <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ca:	f7fe fd77 	bl	8000dbc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e10d      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80022dc:	f7ff faa3 	bl	8001826 <LL_RCC_HSI48_IsReady>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f1      	beq.n	80022ca <HAL_RCC_OscConfig+0x4f2>
 80022e6:	e013      	b.n	8002310 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022e8:	f7ff fa8c 	bl	8001804 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7fe fd66 	bl	8000dbc <HAL_GetTick>
 80022f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022f4:	f7fe fd62 	bl	8000dbc <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0f8      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002306:	f7ff fa8e 	bl	8001826 <LL_RCC_HSI48_IsReady>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f1      	bne.n	80022f4 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80ee 	beq.w	80024f6 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231a:	f7ff fbec 	bl	8001af6 <LL_RCC_GetSysClkSource>
 800231e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	2b02      	cmp	r3, #2
 800232e:	f040 80af 	bne.w	8002490 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	429a      	cmp	r2, r3
 800233e:	d123      	bne.n	8002388 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d114      	bne.n	8002388 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002368:	429a      	cmp	r2, r3
 800236a:	d10d      	bne.n	8002388 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d106      	bne.n	8002388 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d05d      	beq.n	8002444 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b0c      	cmp	r3, #12
 800238c:	d058      	beq.n	8002440 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0ab      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023a0:	f7ff fc6c 	bl	8001c7c <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a4:	f7fe fd0a 	bl	8000dbc <HAL_GetTick>
 80023a8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fd06 	bl	8000dbc <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e09c      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ef      	bne.n	80023ac <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4b3e      	ldr	r3, [pc, #248]	; (80024cc <HAL_RCC_OscConfig+0x6f4>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023de:	4311      	orrs	r1, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023e4:	0212      	lsls	r2, r2, #8
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023f8:	430a      	orrs	r2, r1
 80023fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023fe:	4313      	orrs	r3, r2
 8002400:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002402:	f7ff fc2c 	bl	8001c5e <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002414:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002416:	f7fe fcd1 	bl	8000dbc <HAL_GetTick>
 800241a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fccd 	bl	8000dbc <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e063      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0ef      	beq.n	800241e <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243e:	e05a      	b.n	80024f6 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e059      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d151      	bne.n	80024f6 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002452:	f7ff fc04 	bl	8001c5e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002466:	f7fe fca9 	bl	8000dbc <HAL_GetTick>
 800246a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7fe fca5 	bl	8000dbc <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e03b      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0ef      	beq.n	800246e <HAL_RCC_OscConfig+0x696>
 800248e:	e032      	b.n	80024f6 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d02d      	beq.n	80024f2 <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	f7ff fbf1 	bl	8001c7c <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a4:	f023 0303 	bic.w	r3, r3, #3
 80024a8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80024b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe fc7d 	bl	8000dbc <HAL_GetTick>
 80024c2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c4:	e00d      	b.n	80024e2 <HAL_RCC_OscConfig+0x70a>
 80024c6:	bf00      	nop
 80024c8:	58000400 	.word	0x58000400
 80024cc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe fc74 	bl	8000dbc <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ef      	bne.n	80024d0 <HAL_RCC_OscConfig+0x6f8>
 80024f0:	e001      	b.n	80024f6 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3734      	adds	r7, #52	; 0x34
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd90      	pop	{r4, r7, pc}

08002500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e12a      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002514:	4b97      	ldr	r3, [pc, #604]	; (8002774 <HAL_RCC_ClockConfig+0x274>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	d91b      	bls.n	800255a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002522:	4b94      	ldr	r3, [pc, #592]	; (8002774 <HAL_RCC_ClockConfig+0x274>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 0207 	bic.w	r2, r3, #7
 800252a:	4992      	ldr	r1, [pc, #584]	; (8002774 <HAL_RCC_ClockConfig+0x274>)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002532:	f7fe fc43 	bl	8000dbc <HAL_GetTick>
 8002536:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002538:	e008      	b.n	800254c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800253a:	f7fe fc3f 	bl	8000dbc <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e10e      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254c:	4b89      	ldr	r3, [pc, #548]	; (8002774 <HAL_RCC_ClockConfig+0x274>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d1ef      	bne.n	800253a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff facf 	bl	8001b0e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002570:	f7fe fc24 	bl	8000dbc <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002578:	f7fe fc20 	bl	8000dbc <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0ef      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800258a:	f7ff fbc9 	bl	8001d20 <LL_RCC_IsActiveFlag_HPRE>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f1      	beq.n	8002578 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	d016      	beq.n	80025ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fac6 	bl	8001b36 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025aa:	f7fe fc07 	bl	8000dbc <HAL_GetTick>
 80025ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025b2:	f7fe fc03 	bl	8000dbc <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e0d2      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025c4:	f7ff fbbe 	bl	8001d44 <LL_RCC_IsActiveFlag_C2HPRE>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f1      	beq.n	80025b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d016      	beq.n	8002608 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fabf 	bl	8001b62 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fbea 	bl	8000dbc <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025ec:	f7fe fbe6 	bl	8000dbc <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e0b5      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025fe:	f7ff fbb4 	bl	8001d6a <LL_RCC_IsActiveFlag_SHDHPRE>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f1      	beq.n	80025ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d016      	beq.n	8002642 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fab9 	bl	8001b90 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800261e:	f7fe fbcd 	bl	8000dbc <HAL_GetTick>
 8002622:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002626:	f7fe fbc9 	bl	8000dbc <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e098      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002638:	f7ff fbaa 	bl	8001d90 <LL_RCC_IsActiveFlag_PPRE1>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f1      	beq.n	8002626 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d017      	beq.n	800267e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff faaf 	bl	8001bb8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800265a:	f7fe fbaf 	bl	8000dbc <HAL_GetTick>
 800265e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002662:	f7fe fbab 	bl	8000dbc <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e07a      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002674:	f7ff fb9e 	bl	8001db4 <LL_RCC_IsActiveFlag_PPRE2>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f1      	beq.n	8002662 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d043      	beq.n	8002712 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002692:	f7ff f84f 	bl	8001734 <LL_RCC_HSE_IsReady>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d11e      	bne.n	80026da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e064      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d106      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80026a8:	f7ff faf7 	bl	8001c9a <LL_RCC_PLL_IsReady>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d113      	bne.n	80026da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e059      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80026be:	f7ff f9b7 	bl	8001a30 <LL_RCC_MSI_IsReady>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d108      	bne.n	80026da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e04e      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80026cc:	f7ff f862 	bl	8001794 <LL_RCC_HSI_IsReady>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e047      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f9f5 	bl	8001ace <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7fe fb6a 	bl	8000dbc <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ec:	f7fe fb66 	bl	8000dbc <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e033      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	f7ff f9f8 	bl	8001af6 <LL_RCC_GetSysClkSource>
 8002706:	4602      	mov	r2, r0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	429a      	cmp	r2, r3
 8002710:	d1ec      	bne.n	80026ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002712:	4b18      	ldr	r3, [pc, #96]	; (8002774 <HAL_RCC_ClockConfig+0x274>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d21b      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_RCC_ClockConfig+0x274>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f023 0207 	bic.w	r2, r3, #7
 8002728:	4912      	ldr	r1, [pc, #72]	; (8002774 <HAL_RCC_ClockConfig+0x274>)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002730:	f7fe fb44 	bl	8000dbc <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	e008      	b.n	800274a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002738:	f7fe fb40 	bl	8000dbc <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e00f      	b.n	800276a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x274>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d1ef      	bne.n	8002738 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002758:	f7fe fa22 	bl	8000ba0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800275c:	f7fe fb3a 	bl	8000dd4 <HAL_GetTickPrio>
 8002760:	4603      	mov	r3, r0
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe f91a 	bl	800099c <HAL_InitTick>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	58004000 	.word	0x58004000

08002778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277e:	f7ff f9ba 	bl	8001af6 <LL_RCC_GetSysClkSource>
 8002782:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800278a:	f7ff f976 	bl	8001a7a <LL_RCC_MSI_GetRange>
 800278e:	4603      	mov	r3, r0
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	e04a      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d102      	bne.n	80027ac <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027a6:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e044      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d10a      	bne.n	80027c8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80027b2:	f7fe ff71 	bl	8001698 <LL_RCC_HSE_IsEnabledDiv2>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e039      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e036      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80027c8:	f7ff fa9e 	bl	8001d08 <LL_RCC_PLL_GetMainSource>
 80027cc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d002      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x62>
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d003      	beq.n	80027e0 <HAL_RCC_GetSysClockFreq+0x68>
 80027d8:	e00d      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027dc:	60bb      	str	r3, [r7, #8]
        break;
 80027de:	e015      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80027e0:	f7fe ff5a 	bl	8001698 <LL_RCC_HSE_IsEnabledDiv2>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d102      	bne.n	80027f0 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027ec:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80027ee:	e00d      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027f2:	60bb      	str	r3, [r7, #8]
        break;
 80027f4:	e00a      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80027f6:	f7ff f940 	bl	8001a7a <LL_RCC_MSI_GetRange>
 80027fa:	4603      	mov	r3, r0
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002808:	60bb      	str	r3, [r7, #8]
        break;
 800280a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800280c:	f7ff fa57 	bl	8001cbe <LL_RCC_PLL_GetN>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	fb03 f402 	mul.w	r4, r3, r2
 8002818:	f7ff fa6a 	bl	8001cf0 <LL_RCC_PLL_GetDivider>
 800281c:	4603      	mov	r3, r0
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	3301      	adds	r3, #1
 8002822:	fbb4 f4f3 	udiv	r4, r4, r3
 8002826:	f7ff fa57 	bl	8001cd8 <LL_RCC_PLL_GetR>
 800282a:	4603      	mov	r3, r0
 800282c:	0f5b      	lsrs	r3, r3, #29
 800282e:	3301      	adds	r3, #1
 8002830:	fbb4 f3f3 	udiv	r3, r4, r3
 8002834:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bd90      	pop	{r4, r7, pc}
 8002840:	08004798 	.word	0x08004798
 8002844:	00f42400 	.word	0x00f42400
 8002848:	01e84800 	.word	0x01e84800

0800284c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b598      	push	{r3, r4, r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002850:	f7ff ff92 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8002854:	4604      	mov	r4, r0
 8002856:	f7ff f9c3 	bl	8001be0 <LL_RCC_GetAHBPrescaler>
 800285a:	4603      	mov	r3, r0
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	4a03      	ldr	r2, [pc, #12]	; (8002870 <HAL_RCC_GetHCLKFreq+0x24>)
 8002864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002868:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd98      	pop	{r3, r4, r7, pc}
 8002870:	08004738 	.word	0x08004738

08002874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002874:	b598      	push	{r3, r4, r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002878:	f7ff ffe8 	bl	800284c <HAL_RCC_GetHCLKFreq>
 800287c:	4604      	mov	r4, r0
 800287e:	f7ff f9e2 	bl	8001c46 <LL_RCC_GetAPB2Prescaler>
 8002882:	4603      	mov	r3, r0
 8002884:	0adb      	lsrs	r3, r3, #11
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	4a04      	ldr	r2, [pc, #16]	; (800289c <HAL_RCC_GetPCLK2Freq+0x28>)
 800288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd98      	pop	{r3, r4, r7, pc}
 800289c:	08004778 	.word	0x08004778

080028a0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	226f      	movs	r2, #111	; 0x6f
 80028ae:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80028b0:	f7ff f921 	bl	8001af6 <LL_RCC_GetSysClkSource>
 80028b4:	4602      	mov	r2, r0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80028ba:	f7ff f991 	bl	8001be0 <LL_RCC_GetAHBPrescaler>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80028c4:	f7ff f9b3 	bl	8001c2e <LL_RCC_GetAPB1Prescaler>
 80028c8:	4602      	mov	r2, r0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80028ce:	f7ff f9ba 	bl	8001c46 <LL_RCC_GetAPB2Prescaler>
 80028d2:	4602      	mov	r2, r0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80028d8:	f7ff f98e 	bl	8001bf8 <LL_C2_RCC_GetAHBPrescaler>
 80028dc:	4602      	mov	r2, r0
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80028e2:	f7ff f996 	bl	8001c12 <LL_RCC_GetAHB4Prescaler>
 80028e6:	4602      	mov	r2, r0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <HAL_RCC_GetClockConfig+0x60>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0207 	and.w	r2, r3, #7
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	601a      	str	r2, [r3, #0]
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	58004000 	.word	0x58004000

08002904 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2bb0      	cmp	r3, #176	; 0xb0
 8002910:	d903      	bls.n	800291a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	e007      	b.n	800292a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	4a11      	ldr	r2, [pc, #68]	; (8002968 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002928:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800292a:	f7ff f972 	bl	8001c12 <LL_RCC_GetAHB4Prescaler>
 800292e:	4603      	mov	r3, r0
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	4a0d      	ldr	r2, [pc, #52]	; (800296c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	0c9c      	lsrs	r4, r3, #18
 800294e:	f7fe fe95 	bl	800167c <HAL_PWREx_GetVoltageRange>
 8002952:	4603      	mov	r3, r0
 8002954:	4619      	mov	r1, r3
 8002956:	4620      	mov	r0, r4
 8002958:	f000 f80c 	bl	8002974 <RCC_SetFlashLatency>
 800295c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	bf00      	nop
 8002968:	08004798 	.word	0x08004798
 800296c:	08004738 	.word	0x08004738
 8002970:	431bde83 	.word	0x431bde83

08002974 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b093      	sub	sp, #76	; 0x4c
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800297e:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <RCC_SetFlashLatency+0xf0>)
 8002980:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800298a:	4a37      	ldr	r2, [pc, #220]	; (8002a68 <RCC_SetFlashLatency+0xf4>)
 800298c:	f107 031c 	add.w	r3, r7, #28
 8002990:	ca07      	ldmia	r2, {r0, r1, r2}
 8002992:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002996:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <RCC_SetFlashLatency+0xf8>)
 8002998:	f107 040c 	add.w	r4, r7, #12
 800299c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800299e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029a2:	2300      	movs	r3, #0
 80029a4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ac:	d11c      	bne.n	80029e8 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	643b      	str	r3, [r7, #64]	; 0x40
 80029b2:	e015      	b.n	80029e0 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80029b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80029bc:	4413      	add	r3, r2
 80029be:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d808      	bhi.n	80029da <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80029d0:	4413      	add	r3, r2
 80029d2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80029d6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80029d8:	e022      	b.n	8002a20 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029dc:	3301      	adds	r3, #1
 80029de:	643b      	str	r3, [r7, #64]	; 0x40
 80029e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d9e6      	bls.n	80029b4 <RCC_SetFlashLatency+0x40>
 80029e6:	e01b      	b.n	8002a20 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ec:	e015      	b.n	8002a1a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80029ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80029f6:	4413      	add	r3, r2
 80029f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d808      	bhi.n	8002a14 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a12:	e005      	b.n	8002a20 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a16:	3301      	adds	r3, #1
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d9e6      	bls.n	80029ee <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <RCC_SetFlashLatency+0xfc>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 0207 	bic.w	r2, r3, #7
 8002a28:	4911      	ldr	r1, [pc, #68]	; (8002a70 <RCC_SetFlashLatency+0xfc>)
 8002a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a30:	f7fe f9c4 	bl	8000dbc <HAL_GetTick>
 8002a34:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a36:	e008      	b.n	8002a4a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a38:	f7fe f9c0 	bl	8000dbc <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e007      	b.n	8002a5a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <RCC_SetFlashLatency+0xfc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1ef      	bne.n	8002a38 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	374c      	adds	r7, #76	; 0x4c
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	0800470c 	.word	0x0800470c
 8002a68:	0800471c 	.word	0x0800471c
 8002a6c:	08004728 	.word	0x08004728
 8002a70:	58004000 	.word	0x58004000

08002a74 <LL_RCC_LSE_IsEnabled>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <LL_RCC_LSE_IsEnabled+0x18>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <LL_RCC_LSE_IsEnabled+0x1a>
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_RCC_LSE_IsReady>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d101      	bne.n	8002ab0 <LL_RCC_LSE_IsReady+0x18>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <LL_RCC_LSE_IsReady+0x1a>
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_RCC_SetRFWKPClockSource>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002acc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ad0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_RCC_SetSMPSClockSource>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_RCC_SetSMPSPrescaler>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_RCC_SetUSARTClockSource>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f023 0203 	bic.w	r2, r3, #3
 8002b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_SetLPUARTClockSource>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_SetI2CClockSource>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	401a      	ands	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_SetLPTIMClockSource>:
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	43db      	mvns	r3, r3
 8002be2:	401a      	ands	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	041b      	lsls	r3, r3, #16
 8002be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_RCC_SetSAIClockSource>:
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_RCC_SetRNGClockSource>:
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_RCC_SetCLK48ClockSource>:
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_RCC_SetUSBClockSource>:
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ffe3 	bl	8002c56 <LL_RCC_SetCLK48ClockSource>
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <LL_RCC_SetADCClockSource>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_RCC_SetRTCClockSource>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_RCC_GetRTCClockSource>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_RCC_ForceBackupDomainReset>:
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_PLLSAI1_Enable>:
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d60:	6013      	str	r3, [r2, #0]
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_RCC_PLLSAI1_Disable>:
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_PLLSAI1_IsReady>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9c:	d101      	bne.n	8002da2 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b088      	sub	sp, #32
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002db6:	2300      	movs	r3, #0
 8002db8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002dba:	2300      	movs	r3, #0
 8002dbc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d033      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd2:	d00c      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd8:	d802      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d010      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002dde:	e017      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002de0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002de4:	d017      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002de6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002dea:	d016      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002dec:	e010      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002dfe:	e00d      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f947 	bl	8003098 <RCCEx_PLLSAI1_ConfigNP>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e0e:	e005      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	77fb      	strb	r3, [r7, #31]
        break;
 8002e14:	e002      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002e1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e1c:	7ffb      	ldrb	r3, [r7, #31]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d105      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fee9 	bl	8002bfe <LL_RCC_SetSAIClockSource>
 8002e2c:	e001      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2e:	7ffb      	ldrb	r3, [r7, #31]
 8002e30:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d046      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002e3e:	f7ff ff57 	bl	8002cf0 <LL_RCC_GetRTCClockSource>
 8002e42:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d03c      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e4e:	f7fe fc05 	bl	800165c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff31 	bl	8002cc4 <LL_RCC_SetRTCClockSource>
 8002e62:	e02e      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002e6e:	f7ff ff4c 	bl	8002d0a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002e72:	f7ff ff5b 	bl	8002d2c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002e8e:	f7ff fdf1 	bl	8002a74 <LL_RCC_LSE_IsEnabled>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d114      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e98:	f7fd ff90 	bl	8000dbc <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e9e:	e00b      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7fd ff8c 	bl	8000dbc <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d902      	bls.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	77fb      	strb	r3, [r7, #31]
              break;
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002eb8:	f7ff fdee 	bl	8002a98 <LL_RCC_LSE_IsReady>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d1ee      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	77bb      	strb	r3, [r7, #30]
 8002ec6:	e001      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec8:	7ffb      	ldrb	r3, [r7, #31]
 8002eca:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fe2b 	bl	8002b38 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fe36 	bl	8002b64 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fe5e 	bl	8002bca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fe53 	bl	8002bca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fe2b 	bl	8002b90 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d004      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fe20 	bl	8002b90 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d022      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fe8e 	bl	8002c82 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f88:	d10b      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f8dd 	bl	800314e <RCCEx_PLLSAI1_ConfigNQ>
 8002f94:	4603      	mov	r3, r0
 8002f96:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002f98:	7ffb      	ldrb	r3, [r7, #31]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
 8002fa0:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d02b      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb6:	d008      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc0:	d003      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fe2b 	bl	8002c2a <LL_RCC_SetRNGClockSource>
 8002fd4:	e00a      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7ff fe22 	bl	8002c2a <LL_RCC_SetRNGClockSource>
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7ff fe35 	bl	8002c56 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002ff4:	d107      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003004:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300e:	2b00      	cmp	r3, #0
 8003010:	d022      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fe3e 	bl	8002c98 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003024:	d107      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003034:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800303e:	d10b      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4618      	mov	r0, r3
 8003046:	f000 f8dd 	bl	8003204 <RCCEx_PLLSAI1_ConfigNR>
 800304a:	4603      	mov	r3, r0
 800304c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800304e:	7ffb      	ldrb	r3, [r7, #31]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8003054:	7ffb      	ldrb	r3, [r7, #31]
 8003056:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fd27 	bl	8002abc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fd46 	bl	8002b10 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fd2d 	bl	8002ae8 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 800308e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030a4:	f7ff fe62 	bl	8002d6c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030a8:	f7fd fe88 	bl	8000dbc <HAL_GetTick>
 80030ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030ae:	e009      	b.n	80030c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030b0:	f7fd fe84 	bl	8000dbc <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d902      	bls.n	80030c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	73fb      	strb	r3, [r7, #15]
      break;
 80030c2:	e004      	b.n	80030ce <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030c4:	f7ff fe61 	bl	8002d8a <LL_RCC_PLLSAI1_IsReady>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d137      	bne.n	8003144 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e8:	4313      	orrs	r3, r2
 80030ea:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030fe:	4313      	orrs	r3, r2
 8003100:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003102:	f7ff fe24 	bl	8002d4e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003106:	f7fd fe59 	bl	8000dbc <HAL_GetTick>
 800310a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800310c:	e009      	b.n	8003122 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800310e:	f7fd fe55 	bl	8000dbc <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d902      	bls.n	8003122 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	73fb      	strb	r3, [r7, #15]
        break;
 8003120:	e004      	b.n	800312c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003122:	f7ff fe32 	bl	8002d8a <LL_RCC_PLLSAI1_IsReady>
 8003126:	4603      	mov	r3, r0
 8003128:	2b01      	cmp	r3, #1
 800312a:	d1f0      	bne.n	800310e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d108      	bne.n	8003144 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003140:	4313      	orrs	r3, r2
 8003142:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800315a:	f7ff fe07 	bl	8002d6c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800315e:	f7fd fe2d 	bl	8000dbc <HAL_GetTick>
 8003162:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003164:	e009      	b.n	800317a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003166:	f7fd fe29 	bl	8000dbc <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d902      	bls.n	800317a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	73fb      	strb	r3, [r7, #15]
      break;
 8003178:	e004      	b.n	8003184 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800317a:	f7ff fe06 	bl	8002d8a <LL_RCC_PLLSAI1_IsReady>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f0      	bne.n	8003166 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d137      	bne.n	80031fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800318a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800319e:	4313      	orrs	r3, r2
 80031a0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b4:	4313      	orrs	r3, r2
 80031b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80031b8:	f7ff fdc9 	bl	8002d4e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031bc:	f7fd fdfe 	bl	8000dbc <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031c2:	e009      	b.n	80031d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031c4:	f7fd fdfa 	bl	8000dbc <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d902      	bls.n	80031d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	73fb      	strb	r3, [r7, #15]
        break;
 80031d6:	e004      	b.n	80031e2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031d8:	f7ff fdd7 	bl	8002d8a <LL_RCC_PLLSAI1_IsReady>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d1f0      	bne.n	80031c4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d108      	bne.n	80031fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031f6:	4313      	orrs	r3, r2
 80031f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003210:	f7ff fdac 	bl	8002d6c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003214:	f7fd fdd2 	bl	8000dbc <HAL_GetTick>
 8003218:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800321a:	e009      	b.n	8003230 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800321c:	f7fd fdce 	bl	8000dbc <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d902      	bls.n	8003230 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	73fb      	strb	r3, [r7, #15]
      break;
 800322e:	e004      	b.n	800323a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003230:	f7ff fdab 	bl	8002d8a <LL_RCC_PLLSAI1_IsReady>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d137      	bne.n	80032b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003254:	4313      	orrs	r3, r2
 8003256:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800326a:	4313      	orrs	r3, r2
 800326c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800326e:	f7ff fd6e 	bl	8002d4e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003272:	f7fd fda3 	bl	8000dbc <HAL_GetTick>
 8003276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003278:	e009      	b.n	800328e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800327a:	f7fd fd9f 	bl	8000dbc <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d902      	bls.n	800328e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	73fb      	strb	r3, [r7, #15]
        break;
 800328c:	e004      	b.n	8003298 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800328e:	f7ff fd7c 	bl	8002d8a <LL_RCC_PLLSAI1_IsReady>
 8003292:	4603      	mov	r3, r0
 8003294:	2b01      	cmp	r3, #1
 8003296:	d1f0      	bne.n	800327a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d108      	bne.n	80032b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800329e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ac:	4313      	orrs	r3, r2
 80032ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e090      	b.n	80033ee <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d106      	bne.n	80032e6 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7fd facf 	bl	8000884 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	22ca      	movs	r2, #202	; 0xca
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2253      	movs	r2, #83	; 0x53
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f89f 	bl	8003442 <RTC_EnterInitMode>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	22ff      	movs	r2, #255	; 0xff
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2204      	movs	r2, #4
 8003316:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e067      	b.n	80033ee <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800332c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003330:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6899      	ldr	r1, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	68d2      	ldr	r2, [r2, #12]
 8003358:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6919      	ldr	r1, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	041a      	lsls	r2, r3, #16
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800337c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0203 	bic.w	r2, r2, #3
 800338c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d113      	bne.n	80033dc <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f81e 	bl	80033f6 <HAL_RTC_WaitForSynchro>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	22ff      	movs	r2, #255	; 0xff
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2204      	movs	r2, #4
 80033cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e008      	b.n	80033ee <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	22ff      	movs	r2, #255	; 0xff
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80033ec:	2300      	movs	r3, #0
  }
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800340c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800340e:	f7fd fcd5 	bl	8000dbc <HAL_GetTick>
 8003412:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003414:	e009      	b.n	800342a <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003416:	f7fd fcd1 	bl	8000dbc <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003424:	d901      	bls.n	800342a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e007      	b.n	800343a <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ee      	beq.n	8003416 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d119      	bne.n	800348c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f04f 32ff 	mov.w	r2, #4294967295
 8003460:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003462:	f7fd fcab 	bl	8000dbc <HAL_GetTick>
 8003466:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003468:	e009      	b.n	800347e <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800346a:	f7fd fca7 	bl	8000dbc <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003478:	d901      	bls.n	800347e <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e007      	b.n	800348e <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ee      	beq.n	800346a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e01d      	b.n	80034e4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fd f9f7 	bl	80008b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3304      	adds	r3, #4
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f000 fae7 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	4b0c      	ldr	r3, [pc, #48]	; (800353c <HAL_TIM_Base_Start_IT+0x50>)
 800350c:	4013      	ands	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b06      	cmp	r3, #6
 8003514:	d00b      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x42>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d007      	beq.n	800352e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	00010007 	.word	0x00010007

08003540 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e01d      	b.n	800358e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f815 	bl	8003596 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f000 fa92 	bl	8003aa8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d122      	bne.n	8003606 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d11b      	bne.n	8003606 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0202 	mvn.w	r2, #2
 80035d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fa3c 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 80035f2:	e005      	b.n	8003600 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fa2e 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa3f 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b04      	cmp	r3, #4
 8003612:	d122      	bne.n	800365a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b04      	cmp	r3, #4
 8003620:	d11b      	bne.n	800365a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0204 	mvn.w	r2, #4
 800362a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa12 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 8003646:	e005      	b.n	8003654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fa04 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa15 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b08      	cmp	r3, #8
 8003666:	d122      	bne.n	80036ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b08      	cmp	r3, #8
 8003674:	d11b      	bne.n	80036ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0208 	mvn.w	r2, #8
 800367e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2204      	movs	r2, #4
 8003684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f9e8 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 800369a:	e005      	b.n	80036a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f9da 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f9eb 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d122      	bne.n	8003702 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b10      	cmp	r3, #16
 80036c8:	d11b      	bne.n	8003702 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f06f 0210 	mvn.w	r2, #16
 80036d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2208      	movs	r2, #8
 80036d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f9be 	bl	8003a6a <HAL_TIM_IC_CaptureCallback>
 80036ee:	e005      	b.n	80036fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f9b0 	bl	8003a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9c1 	bl	8003a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10e      	bne.n	800372e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d107      	bne.n	800372e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f06f 0201 	mvn.w	r2, #1
 8003726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7fd f801 	bl	8000730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d10e      	bne.n	800375a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d107      	bne.n	800375a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fd8f 	bl	8004278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003768:	d10e      	bne.n	8003788 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b80      	cmp	r3, #128	; 0x80
 8003776:	d107      	bne.n	8003788 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fd82 	bl	800428c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d107      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f96f 	bl	8003a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0220 	mvn.w	r2, #32
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fd42 	bl	8004264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_OC_ConfigChannel+0x1a>
 80037fe:	2302      	movs	r3, #2
 8003800:	e06c      	b.n	80038dc <HAL_TIM_OC_ConfigChannel+0xf4>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b14      	cmp	r3, #20
 8003816:	d857      	bhi.n	80038c8 <HAL_TIM_OC_ConfigChannel+0xe0>
 8003818:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <HAL_TIM_OC_ConfigChannel+0x38>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	08003875 	.word	0x08003875
 8003824:	080038c9 	.word	0x080038c9
 8003828:	080038c9 	.word	0x080038c9
 800382c:	080038c9 	.word	0x080038c9
 8003830:	08003883 	.word	0x08003883
 8003834:	080038c9 	.word	0x080038c9
 8003838:	080038c9 	.word	0x080038c9
 800383c:	080038c9 	.word	0x080038c9
 8003840:	08003891 	.word	0x08003891
 8003844:	080038c9 	.word	0x080038c9
 8003848:	080038c9 	.word	0x080038c9
 800384c:	080038c9 	.word	0x080038c9
 8003850:	0800389f 	.word	0x0800389f
 8003854:	080038c9 	.word	0x080038c9
 8003858:	080038c9 	.word	0x080038c9
 800385c:	080038c9 	.word	0x080038c9
 8003860:	080038ad 	.word	0x080038ad
 8003864:	080038c9 	.word	0x080038c9
 8003868:	080038c9 	.word	0x080038c9
 800386c:	080038c9 	.word	0x080038c9
 8003870:	080038bb 	.word	0x080038bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f978 	bl	8003b70 <TIM_OC1_SetConfig>
      break;
 8003880:	e023      	b.n	80038ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f9ed 	bl	8003c68 <TIM_OC2_SetConfig>
      break;
 800388e:	e01c      	b.n	80038ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fa60 	bl	8003d5c <TIM_OC3_SetConfig>
      break;
 800389c:	e015      	b.n	80038ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fad1 	bl	8003e4c <TIM_OC4_SetConfig>
      break;
 80038aa:	e00e      	b.n	80038ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fb28 	bl	8003f08 <TIM_OC5_SetConfig>
      break;
 80038b8:	e007      	b.n	80038ca <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fb79 	bl	8003fb8 <TIM_OC6_SetConfig>
      break;
 80038c6:	e000      	b.n	80038ca <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 80038c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIM_ConfigClockSource+0x18>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e0a8      	b.n	8003a4e <HAL_TIM_ConfigClockSource+0x16a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800391a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800391e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003926:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d067      	beq.n	8003a08 <HAL_TIM_ConfigClockSource+0x124>
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d80b      	bhi.n	8003954 <HAL_TIM_ConfigClockSource+0x70>
 800393c:	2b10      	cmp	r3, #16
 800393e:	d073      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x144>
 8003940:	2b10      	cmp	r3, #16
 8003942:	d802      	bhi.n	800394a <HAL_TIM_ConfigClockSource+0x66>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d06f      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003948:	e078      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800394a:	2b20      	cmp	r3, #32
 800394c:	d06c      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x144>
 800394e:	2b30      	cmp	r3, #48	; 0x30
 8003950:	d06a      	beq.n	8003a28 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003952:	e073      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003954:	2b70      	cmp	r3, #112	; 0x70
 8003956:	d00d      	beq.n	8003974 <HAL_TIM_ConfigClockSource+0x90>
 8003958:	2b70      	cmp	r3, #112	; 0x70
 800395a:	d804      	bhi.n	8003966 <HAL_TIM_ConfigClockSource+0x82>
 800395c:	2b50      	cmp	r3, #80	; 0x50
 800395e:	d033      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0xe4>
 8003960:	2b60      	cmp	r3, #96	; 0x60
 8003962:	d041      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003964:	e06a      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396a:	d066      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x156>
 800396c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003970:	d017      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003972:	e063      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f000 fbee 	bl	8004164 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003996:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	609a      	str	r2, [r3, #8]
      break;
 80039a0:	e04c      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6899      	ldr	r1, [r3, #8]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f000 fbd7 	bl	8004164 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039c4:	609a      	str	r2, [r3, #8]
      break;
 80039c6:	e039      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	461a      	mov	r2, r3
 80039d6:	f000 fb49 	bl	800406c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2150      	movs	r1, #80	; 0x50
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fba2 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 80039e6:	e029      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	461a      	mov	r2, r3
 80039f6:	f000 fb68 	bl	80040ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2160      	movs	r1, #96	; 0x60
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fb92 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003a06:	e019      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	461a      	mov	r2, r3
 8003a16:	f000 fb29 	bl	800406c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fb82 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003a26:	e009      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 fb79 	bl	800412a <TIM_ITRx_SetConfig>
      break;
 8003a38:	e000      	b.n	8003a3c <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a2a      	ldr	r2, [pc, #168]	; (8003b64 <TIM_Base_SetConfig+0xbc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_Base_SetConfig+0x20>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac6:	d108      	bne.n	8003ada <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <TIM_Base_SetConfig+0xbc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <TIM_Base_SetConfig+0x52>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d007      	beq.n	8003afa <TIM_Base_SetConfig+0x52>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <TIM_Base_SetConfig+0xc0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d003      	beq.n	8003afa <TIM_Base_SetConfig+0x52>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <TIM_Base_SetConfig+0xc4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a0c      	ldr	r2, [pc, #48]	; (8003b64 <TIM_Base_SetConfig+0xbc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_Base_SetConfig+0xa0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a0b      	ldr	r2, [pc, #44]	; (8003b68 <TIM_Base_SetConfig+0xc0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_Base_SetConfig+0xa0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <TIM_Base_SetConfig+0xc4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d103      	bne.n	8003b50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	615a      	str	r2, [r3, #20]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800

08003b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f023 0201 	bic.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f023 0302 	bic.w	r3, r3, #2
 8003bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a24      	ldr	r2, [pc, #144]	; (8003c5c <TIM_OC1_SetConfig+0xec>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d007      	beq.n	8003be0 <TIM_OC1_SetConfig+0x70>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <TIM_OC1_SetConfig+0xf0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_OC1_SetConfig+0x70>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <TIM_OC1_SetConfig+0xf4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10c      	bne.n	8003bfa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f023 0308 	bic.w	r3, r3, #8
 8003be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <TIM_OC1_SetConfig+0xec>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d007      	beq.n	8003c12 <TIM_OC1_SetConfig+0xa2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a17      	ldr	r2, [pc, #92]	; (8003c64 <TIM_OC1_SetConfig+0xf4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d003      	beq.n	8003c12 <TIM_OC1_SetConfig+0xa2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <TIM_OC1_SetConfig+0xf0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d111      	bne.n	8003c36 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	621a      	str	r2, [r3, #32]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40014800 	.word	0x40014800
 8003c64:	40014400 	.word	0x40014400

08003c68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0210 	bic.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f023 0320 	bic.w	r3, r3, #32
 8003cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a22      	ldr	r2, [pc, #136]	; (8003d50 <TIM_OC2_SetConfig+0xe8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d10d      	bne.n	8003ce8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <TIM_OC2_SetConfig+0xe8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <TIM_OC2_SetConfig+0x98>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <TIM_OC2_SetConfig+0xec>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_OC2_SetConfig+0x98>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <TIM_OC2_SetConfig+0xf0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d113      	bne.n	8003d28 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	621a      	str	r2, [r3, #32]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40012c00 	.word	0x40012c00
 8003d54:	40014400 	.word	0x40014400
 8003d58:	40014800 	.word	0x40014800

08003d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a21      	ldr	r2, [pc, #132]	; (8003e40 <TIM_OC3_SetConfig+0xe4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10d      	bne.n	8003dda <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <TIM_OC3_SetConfig+0xe4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <TIM_OC3_SetConfig+0x96>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <TIM_OC3_SetConfig+0xe8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_OC3_SetConfig+0x96>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <TIM_OC3_SetConfig+0xec>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d113      	bne.n	8003e1a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	621a      	str	r2, [r3, #32]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40014400 	.word	0x40014400
 8003e48:	40014800 	.word	0x40014800

08003e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	031b      	lsls	r3, r3, #12
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a14      	ldr	r2, [pc, #80]	; (8003efc <TIM_OC4_SetConfig+0xb0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d007      	beq.n	8003ec0 <TIM_OC4_SetConfig+0x74>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <TIM_OC4_SetConfig+0xb4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <TIM_OC4_SetConfig+0x74>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <TIM_OC4_SetConfig+0xb8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d109      	bne.n	8003ed4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	019b      	lsls	r3, r3, #6
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800

08003f08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <TIM_OC5_SetConfig+0xa4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <TIM_OC5_SetConfig+0x6a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <TIM_OC5_SetConfig+0xa8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d003      	beq.n	8003f72 <TIM_OC5_SetConfig+0x6a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a11      	ldr	r2, [pc, #68]	; (8003fb4 <TIM_OC5_SetConfig+0xac>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d109      	bne.n	8003f86 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	621a      	str	r2, [r3, #32]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800

08003fb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	051b      	lsls	r3, r3, #20
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a14      	ldr	r2, [pc, #80]	; (8004060 <TIM_OC6_SetConfig+0xa8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_OC6_SetConfig+0x6c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a13      	ldr	r2, [pc, #76]	; (8004064 <TIM_OC6_SetConfig+0xac>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_OC6_SetConfig+0x6c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a12      	ldr	r2, [pc, #72]	; (8004068 <TIM_OC6_SetConfig+0xb0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d109      	bne.n	8004038 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	029b      	lsls	r3, r3, #10
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40012c00 	.word	0x40012c00
 8004064:	40014400 	.word	0x40014400
 8004068:	40014800 	.word	0x40014800

0800406c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f023 030a 	bic.w	r3, r3, #10
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	621a      	str	r2, [r3, #32]
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f023 0210 	bic.w	r2, r3, #16
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	f043 0307 	orr.w	r3, r3, #7
 8004150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
 8004170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800417e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	021a      	lsls	r2, r3, #8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	431a      	orrs	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	609a      	str	r2, [r3, #8]
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e04a      	b.n	8004252 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004224:	d10c      	bne.n	8004240 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800422c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	4313      	orrs	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40012c00 	.word	0x40012c00

08004264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80042ac:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	89fb      	ldrh	r3, [r7, #14]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042d8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80042dc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	b21a      	sxth	r2, r3
 80042e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	b21b      	sxth	r3, r3
 80042f0:	4013      	ands	r3, r2
 80042f2:	b21b      	sxth	r3, r3
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800430a:	b084      	sub	sp, #16
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	f107 0014 	add.w	r0, r7, #20
 8004318:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff ffaf 	bl	80042a0 <USB_EnableGlobalInt>

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800434e:	b004      	add	sp, #16
 8004350:	4770      	bx	lr
	...

08004354 <__NVIC_EnableIRQ>:
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	2b00      	cmp	r3, #0
 8004364:	db0b      	blt.n	800437e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	4907      	ldr	r1, [pc, #28]	; (800438c <__NVIC_EnableIRQ+0x38>)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2001      	movs	r0, #1
 8004376:	fa00 f202 	lsl.w	r2, r0, r2
 800437a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	e000e100 	.word	0xe000e100

08004390 <__NVIC_SetPriority>:
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	6039      	str	r1, [r7, #0]
 800439a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	db0a      	blt.n	80043ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	490c      	ldr	r1, [pc, #48]	; (80043dc <__NVIC_SetPriority+0x4c>)
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	0112      	lsls	r2, r2, #4
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	440b      	add	r3, r1
 80043b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043b8:	e00a      	b.n	80043d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4908      	ldr	r1, [pc, #32]	; (80043e0 <__NVIC_SetPriority+0x50>)
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	3b04      	subs	r3, #4
 80043c8:	0112      	lsls	r2, r2, #4
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	440b      	add	r3, r1
 80043ce:	761a      	strb	r2, [r3, #24]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	e000e100 	.word	0xe000e100
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <drv_timer_init>:
 */



void drv_timer_init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0

    // Enable the peripheral clock for Timer 2
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6593      	str	r3, [r2, #88]	; 0x58


    TIM2->PSC = 64000; // Set timer 3 prescaler
 80043f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043fc:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8004400:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFF; //Set timer 3 auto reload value
 8004402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1 &= ~(3 << TIM_CR1_CMS_Pos); //selecting edge aligned PWM
 800440c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004416:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800441a:	6013      	str	r3, [r2, #0]
    TIM2->CR1 |= TIM_CR1_ARPE; //Enable auto-reload preload
 800441c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442a:	6013      	str	r3, [r2, #0]

    TIM2->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E);//Capture compare 1 disable
 800442c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004436:	f023 0311 	bic.w	r3, r3, #17
 800443a:	6213      	str	r3, [r2, #32]
    TIM2->CCER &= ~TIM_CCER_CC1P;//Capture compare polarity active high
 800443c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004446:	f023 0302 	bic.w	r3, r3, #2
 800444a:	6213      	str	r3, [r2, #32]
    TIM2->CCMR1 &=  ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);//CC1 channel is output
 800444c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445a:	f023 0303 	bic.w	r3, r3, #3
 800445e:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M | TIM_CCMR1_OC2M);//OC no output selected
 8004460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800446a:	4b1f      	ldr	r3, [pc, #124]	; (80044e8 <drv_timer_init+0x104>)
 800446c:	4013      	ands	r3, r2
 800446e:	618b      	str	r3, [r1, #24]
    TIM2->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC2E);//Capture compare 1 enable
 8004470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800447a:	f043 0311 	orr.w	r3, r3, #17
 800447e:	6213      	str	r3, [r2, #32]
    TIM2->EGR |= TIM_EGR_UG;//Generate update
 8004480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6153      	str	r3, [r2, #20]
    TIM2->CR1 |= TIM_CR1_CEN; //Enable the counter
 8004490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6013      	str	r3, [r2, #0]
    TIM2->SR = 0x00;
 80044a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044a4:	2200      	movs	r2, #0
 80044a6:	611a      	str	r2, [r3, #16]

    TIM2->CCR1 = 5000;
 80044a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCR2 = 50000;
 80044b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044b6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38
    TIM2->CNT = 0;
 80044bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044c0:	2200      	movs	r2, #0
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
    TIM2->DIER |= (TIM_DIER_CC1IE | TIM_DIER_CC2IE);//Enable CH1 output compare interrupt bit
 80044c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044ce:	f043 0306 	orr.w	r3, r3, #6
 80044d2:	60d3      	str	r3, [r2, #12]

    NVIC_SetPriority(TIM2_IRQn, 0); //Set timer 3 ISR priority
 80044d4:	2100      	movs	r1, #0
 80044d6:	201c      	movs	r0, #28
 80044d8:	f7ff ff5a 	bl	8004390 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn); //Enable timer 3 ISR
 80044dc:	201c      	movs	r0, #28
 80044de:	f7ff ff39 	bl	8004354 <__NVIC_EnableIRQ>
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	fefe8f8f 	.word	0xfefe8f8f

080044ec <drv_timer_IRQHandler>:
 against the UIF flag status¹⁵
 */
static volatile uint32_t u32CCR1_CNT;
static volatile uint32_t u32CCR2_CNT;
void drv_timer_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fc:	d135      	bne.n	800456a <drv_timer_IRQHandler+0x7e>
  {
     if((TIM2->SR & TIM_SR_CC1IF) && (TIM2->DIER & TIM_DIER_CC1IE))
 80044fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d013      	beq.n	8004534 <drv_timer_IRQHandler+0x48>
 800450c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00c      	beq.n	8004534 <drv_timer_IRQHandler+0x48>
     {

	 TIM2->SR &= ~TIM_SR_CC1IF;
 800451a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004524:	f023 0302 	bic.w	r3, r3, #2
 8004528:	6113      	str	r3, [r2, #16]

	 u32CCR1_CNT++;
 800452a:	4b13      	ldr	r3, [pc, #76]	; (8004578 <drv_timer_IRQHandler+0x8c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3301      	adds	r3, #1
 8004530:	4a11      	ldr	r2, [pc, #68]	; (8004578 <drv_timer_IRQHandler+0x8c>)
 8004532:	6013      	str	r3, [r2, #0]

     }

     if((TIM2->SR & TIM_SR_CC2IF) && (TIM2->DIER & TIM_DIER_CC2IE))
 8004534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d013      	beq.n	800456a <drv_timer_IRQHandler+0x7e>
 8004542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00c      	beq.n	800456a <drv_timer_IRQHandler+0x7e>
      {


       TIM2->SR &= ~TIM_SR_CC2IF;
 8004550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800455a:	f023 0304 	bic.w	r3, r3, #4
 800455e:	6113      	str	r3, [r2, #16]
       u32CCR2_CNT++;
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <drv_timer_IRQHandler+0x90>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	4a05      	ldr	r2, [pc, #20]	; (800457c <drv_timer_IRQHandler+0x90>)
 8004568:	6013      	str	r3, [r2, #0]

      }


  }
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	2000002c 	.word	0x2000002c
 800457c:	20000030 	.word	0x20000030

08004580 <drv_uart_IRQHandler>:
transmission corrupts the data on the TX pin as the baud rate counters get frozen. The
current data being transmitted are then lost.
An idle frame is sent when the TE bit is enabled. */

void drv_uart_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  if (USART1->ISR & USART_ISR_TC) /* If a transfer is complete, byte by byte */
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <drv_uart_IRQHandler+0x44>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d017      	beq.n	80045c0 <drv_uart_IRQHandler+0x40>
  {
    if (uartTxBuffer.u16elementsInBuffer > 0) /* Do we have anything to send */
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <drv_uart_IRQHandler+0x48>)
 8004592:	891b      	ldrh	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00d      	beq.n	80045b4 <drv_uart_IRQHandler+0x34>
    {
      USART1->TDR = ringBuffer_get(&uartTxBuffer);
 8004598:	480b      	ldr	r0, [pc, #44]	; (80045c8 <drv_uart_IRQHandler+0x48>)
 800459a:	f000 f817 	bl	80045cc <ringBuffer_get>
 800459e:	4603      	mov	r3, r0
 80045a0:	461a      	mov	r2, r3
 80045a2:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <drv_uart_IRQHandler+0x44>)
 80045a4:	629a      	str	r2, [r3, #40]	; 0x28
      while(!(USART1->ISR & USART_ISR_TC));  /* Wait here until the transfer is complete */
 80045a6:	bf00      	nop
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <drv_uart_IRQHandler+0x44>)
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f9      	beq.n	80045a8 <drv_uart_IRQHandler+0x28>
    }

    USART1->CR1 &= ~(USART_CR1_TXEIE); /* Disable the transmission buffer empty interrupt, we will enable this once we have something to send */
 80045b4:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <drv_uart_IRQHandler+0x44>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a02      	ldr	r2, [pc, #8]	; (80045c4 <drv_uart_IRQHandler+0x44>)
 80045ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045be:	6013      	str	r3, [r2, #0]
  }
}
 80045c0:	bf00      	nop
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40013800 	.word	0x40013800
 80045c8:	20000034 	.word	0x20000034

080045cc <ringBuffer_get>:
  return bStatus;
}


uint8_t ringBuffer_get(sRingbuf_t* pRingBuffer)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045d4:	b672      	cpsid	i
  __disable_irq();

  uint8_t u8returnValue = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	73fb      	strb	r3, [r7, #15]

  if(    (pRingBuffer->eRingBufStatus != RINGBUF_EMPTY        )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	7b1b      	ldrb	r3, [r3, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d026      	beq.n	8004630 <ringBuffer_get+0x64>
      && (pRingBuffer->u16getIndex != pRingBuffer->u16putIndex)  )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	88da      	ldrh	r2, [r3, #6]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	889b      	ldrh	r3, [r3, #4]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d020      	beq.n	8004630 <ringBuffer_get+0x64>
  {
    u8returnValue = pRingBuffer->au8buffer[pRingBuffer->u16getIndex];
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	88d2      	ldrh	r2, [r2, #6]
 80045f6:	4413      	add	r3, r2
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	73fb      	strb	r3, [r7, #15]
    pRingBuffer->au8buffer[pRingBuffer->u16getIndex] = 0;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	88d2      	ldrh	r2, [r2, #6]
 8004604:	4413      	add	r3, r2
 8004606:	2200      	movs	r2, #0
 8004608:	701a      	strb	r2, [r3, #0]
    pRingBuffer->u16elementsInBuffer--;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	891b      	ldrh	r3, [r3, #8]
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	811a      	strh	r2, [r3, #8]
    pRingBuffer->u16getIndex = (pRingBuffer->u16getIndex + 1) % (pRingBuffer->u16bufferMaxCapacity);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	88db      	ldrh	r3, [r3, #6]
 800461a:	3301      	adds	r3, #1
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	8952      	ldrh	r2, [r2, #10]
 8004620:	fb93 f1f2 	sdiv	r1, r3, r2
 8004624:	fb02 f201 	mul.w	r2, r2, r1
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	b29a      	uxth	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	80da      	strh	r2, [r3, #6]
  __ASM volatile ("cpsie i" : : : "memory");
 8004630:	b662      	cpsie	i

  }
  __enable_irq();
  return u8returnValue;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <simpleTimer_IRQHandler>:

/* Public functions ----------------------------------------------------*/


void simpleTimer_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM17)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a0f      	ldr	r2, [pc, #60]	; (800468c <simpleTimer_IRQHandler+0x4c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d116      	bne.n	8004680 <simpleTimer_IRQHandler+0x40>
  {
    ++u32elapsedTicks;
 8004652:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <simpleTimer_IRQHandler+0x50>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	4a0d      	ldr	r2, [pc, #52]	; (8004690 <simpleTimer_IRQHandler+0x50>)
 800465a:	6013      	str	r3, [r2, #0]

    if((u32elapsedTicks % 1000) == 0)
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <simpleTimer_IRQHandler+0x50>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <simpleTimer_IRQHandler+0x54>)
 8004662:	fba3 1302 	umull	r1, r3, r3, r2
 8004666:	099b      	lsrs	r3, r3, #6
 8004668:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <simpleTimer_IRQHandler+0x40>
    {
      ++u32elapsedSeconds;
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <simpleTimer_IRQHandler+0x58>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	4a06      	ldr	r2, [pc, #24]	; (8004698 <simpleTimer_IRQHandler+0x58>)
 800467e:	6013      	str	r3, [r2, #0]
    }
  }
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	40014800 	.word	0x40014800
 8004690:	20000044 	.word	0x20000044
 8004694:	10624dd3 	.word	0x10624dd3
 8004698:	20000048 	.word	0x20000048

0800469c <__libc_init_array>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	4e0d      	ldr	r6, [pc, #52]	; (80046d4 <__libc_init_array+0x38>)
 80046a0:	4c0d      	ldr	r4, [pc, #52]	; (80046d8 <__libc_init_array+0x3c>)
 80046a2:	1ba4      	subs	r4, r4, r6
 80046a4:	10a4      	asrs	r4, r4, #2
 80046a6:	2500      	movs	r5, #0
 80046a8:	42a5      	cmp	r5, r4
 80046aa:	d109      	bne.n	80046c0 <__libc_init_array+0x24>
 80046ac:	4e0b      	ldr	r6, [pc, #44]	; (80046dc <__libc_init_array+0x40>)
 80046ae:	4c0c      	ldr	r4, [pc, #48]	; (80046e0 <__libc_init_array+0x44>)
 80046b0:	f000 f820 	bl	80046f4 <_init>
 80046b4:	1ba4      	subs	r4, r4, r6
 80046b6:	10a4      	asrs	r4, r4, #2
 80046b8:	2500      	movs	r5, #0
 80046ba:	42a5      	cmp	r5, r4
 80046bc:	d105      	bne.n	80046ca <__libc_init_array+0x2e>
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046c4:	4798      	blx	r3
 80046c6:	3501      	adds	r5, #1
 80046c8:	e7ee      	b.n	80046a8 <__libc_init_array+0xc>
 80046ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046ce:	4798      	blx	r3
 80046d0:	3501      	adds	r5, #1
 80046d2:	e7f2      	b.n	80046ba <__libc_init_array+0x1e>
 80046d4:	080047d8 	.word	0x080047d8
 80046d8:	080047d8 	.word	0x080047d8
 80046dc:	080047d8 	.word	0x080047d8
 80046e0:	080047dc 	.word	0x080047dc

080046e4 <memset>:
 80046e4:	4402      	add	r2, r0
 80046e6:	4603      	mov	r3, r0
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d100      	bne.n	80046ee <memset+0xa>
 80046ec:	4770      	bx	lr
 80046ee:	f803 1b01 	strb.w	r1, [r3], #1
 80046f2:	e7f9      	b.n	80046e8 <memset+0x4>

080046f4 <_init>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr

08004700 <_fini>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr
