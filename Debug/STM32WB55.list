
STM32WB55.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004860  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000004  08004ad0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004a0  20000014  08004ae0  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200004b4  08004ae0  000204b4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001dfd5  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003d0c  00000000  00000000  0003e019  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ae0  00000000  00000000  00041d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001918  00000000  00000000  00043808  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025150  00000000  00000000  00045120  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013cce  00000000  00000000  0006a270  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e4733  00000000  00000000  0007df3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  00162671  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006e88  00000000  00000000  001626ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08004984 	.word	0x08004984

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08004984 	.word	0x08004984

0800017c <acc_init>:
The content of the registers that are loaded at boot should not be changed. They contain the factory calibration
values. Their content is automatically restored when the device is powered up. */
static sRingbuf_t* bufferptr;
static float temperature;
void acc_init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  bufferptr = drv_SPI_getRxDataPtr();
 8000180:	f004 f90c 	bl	800439c <drv_SPI_getRxDataPtr>
 8000184:	4602      	mov	r2, r0
 8000186:	4b02      	ldr	r3, [pc, #8]	; (8000190 <acc_init+0x14>)
 8000188:	601a      	str	r2, [r3, #0]
}
 800018a:	bf00      	nop
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	20000030 	.word	0x20000030

08000194 <acc_getTemperature>:
/* Private function prototypes ----------------------------------------*/
static uint16_t u16rawTemp;
static uint16_t u16rawTemp2;
uint16_t acc_getTemperature(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b082      	sub	sp, #8
 8000198:	af00      	add	r7, sp, #0
    uint8_t u8cmd = (READ_CMD_BIT_MASK | OUT_TEMPERATURE_H_RO);
 800019a:	238e      	movs	r3, #142	; 0x8e
 800019c:	71fb      	strb	r3, [r7, #7]
    u16rawTemp = ((uint16_t)drv_SPI_transmit_singleByte(u8cmd) << 8);
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f004 f8b3 	bl	800430c <drv_SPI_transmit_singleByte>
 80001a6:	4603      	mov	r3, r0
 80001a8:	b29b      	uxth	r3, r3
 80001aa:	021b      	lsls	r3, r3, #8
 80001ac:	b29a      	uxth	r2, r3
 80001ae:	4b10      	ldr	r3, [pc, #64]	; (80001f0 <acc_getTemperature+0x5c>)
 80001b0:	801a      	strh	r2, [r3, #0]


    u8cmd = (READ_CMD_BIT_MASK | OUT_TEMPERATURE_L_RO);
 80001b2:	238d      	movs	r3, #141	; 0x8d
 80001b4:	71fb      	strb	r3, [r7, #7]
    u16rawTemp += drv_SPI_transmit_singleByte(u8cmd);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	4618      	mov	r0, r3
 80001ba:	f004 f8a7 	bl	800430c <drv_SPI_transmit_singleByte>
 80001be:	4603      	mov	r3, r0
 80001c0:	b29a      	uxth	r2, r3
 80001c2:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <acc_getTemperature+0x5c>)
 80001c4:	881b      	ldrh	r3, [r3, #0]
 80001c6:	4413      	add	r3, r2
 80001c8:	b29a      	uxth	r2, r3
 80001ca:	4b09      	ldr	r3, [pc, #36]	; (80001f0 <acc_getTemperature+0x5c>)
 80001cc:	801a      	strh	r2, [r3, #0]

    temperature = convertTemperature(u16rawTemp);
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <acc_getTemperature+0x5c>)
 80001d0:	881b      	ldrh	r3, [r3, #0]
 80001d2:	4618      	mov	r0, r3
 80001d4:	f000 f810 	bl	80001f8 <convertTemperature>
 80001d8:	eef0 7a40 	vmov.f32	s15, s0
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <acc_getTemperature+0x60>)
 80001de:	edc3 7a00 	vstr	s15, [r3]
    // Store the temperature value in a suitable variable or use it as needed

    return u16rawTemp;
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <acc_getTemperature+0x5c>)
 80001e4:	881b      	ldrh	r3, [r3, #0]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	20000038 	.word	0x20000038
 80001f4:	20000034 	.word	0x20000034

080001f8 <convertTemperature>:

float convertTemperature(uint16_t temperatureOutput)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b089      	sub	sp, #36	; 0x24
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	80fb      	strh	r3, [r7, #6]
    uint8_t lsb = (temperatureOutput & 0xFF);  // Extract the least significant byte
 8000202:	88fb      	ldrh	r3, [r7, #6]
 8000204:	77fb      	strb	r3, [r7, #31]
    uint8_t msb = (temperatureOutput >> 8) & 0xFF;  // Extract the most significant byte
 8000206:	88fb      	ldrh	r3, [r7, #6]
 8000208:	0a1b      	lsrs	r3, r3, #8
 800020a:	b29b      	uxth	r3, r3
 800020c:	77bb      	strb	r3, [r7, #30]

    float baselineTemperature = 25.0f;  // Baseline temperature for 0 LSB
 800020e:	4b13      	ldr	r3, [pc, #76]	; (800025c <convertTemperature+0x64>)
 8000210:	61bb      	str	r3, [r7, #24]
    float sensitivity = 16.0f;  // Sensitivity: 16 LSB/Â°C
 8000212:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000216:	617b      	str	r3, [r7, #20]

    // Combine the bytes into the signed value
    int16_t combinedValue = (int16_t)((msb << 8) | lsb);
 8000218:	7fbb      	ldrb	r3, [r7, #30]
 800021a:	021b      	lsls	r3, r3, #8
 800021c:	b21a      	sxth	r2, r3
 800021e:	7ffb      	ldrb	r3, [r7, #31]
 8000220:	b21b      	sxth	r3, r3
 8000222:	4313      	orrs	r3, r2
 8000224:	827b      	strh	r3, [r7, #18]

    // Calculate the temperature
    float temperature = baselineTemperature + (combinedValue / sensitivity);
 8000226:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800022a:	ee07 3a90 	vmov	s15, r3
 800022e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000232:	ed97 7a05 	vldr	s14, [r7, #20]
 8000236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800023a:	ed97 7a06 	vldr	s14, [r7, #24]
 800023e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000242:	edc7 7a03 	vstr	s15, [r7, #12]

    return temperature;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	ee07 3a90 	vmov	s15, r3
}
 800024c:	eeb0 0a67 	vmov.f32	s0, s15
 8000250:	3724      	adds	r7, #36	; 0x24
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	41c80000 	.word	0x41c80000

08000260 <DWT_Delay_Init>:
  {Third, entry_state_handler3, action_state_handler3, exit_state_handler3},
};


uint32_t DWT_Delay_Init(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000264:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <DWT_Delay_Init+0x58>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4a13      	ldr	r2, [pc, #76]	; (80002b8 <DWT_Delay_Init+0x58>)
 800026a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800026e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <DWT_Delay_Init+0x58>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a10      	ldr	r2, [pc, #64]	; (80002b8 <DWT_Delay_Init+0x58>)
 8000276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800027a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800027c:	4b0f      	ldr	r3, [pc, #60]	; (80002bc <DWT_Delay_Init+0x5c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <DWT_Delay_Init+0x5c>)
 8000282:	f023 0301 	bic.w	r3, r3, #1
 8000286:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <DWT_Delay_Init+0x5c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <DWT_Delay_Init+0x5c>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <DWT_Delay_Init+0x5c>)
 8000296:	2200      	movs	r2, #0
 8000298:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800029a:	bf00      	nop
    __ASM volatile ("NOP");
 800029c:	bf00      	nop
    __ASM volatile ("NOP");
 800029e:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <DWT_Delay_Init+0x5c>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80002a8:	2300      	movs	r3, #0
 80002aa:	e000      	b.n	80002ae <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80002ac:	2301      	movs	r3, #1
    }
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	e000edf0 	.word	0xe000edf0
 80002bc:	e0001000 	.word	0xe0001000

080002c0 <app_main_init>:
  * @retval none
  */


void app_main_init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
  simpleTimer_reset_milliSeconds(&ledONTimer, ONTime);
 80002c6:	4b18      	ldr	r3, [pc, #96]	; (8000328 <app_main_init+0x68>)
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	4619      	mov	r1, r3
 80002cc:	4817      	ldr	r0, [pc, #92]	; (800032c <app_main_init+0x6c>)
 80002ce:	f004 fa9d 	bl	800480c <simpleTimer_reset_milliSeconds>
  ringBuffer_init(&ringbuf, au8buffer, BUFFER_SIZE);
 80002d2:	2210      	movs	r2, #16
 80002d4:	4916      	ldr	r1, [pc, #88]	; (8000330 <app_main_init+0x70>)
 80002d6:	4817      	ldr	r0, [pc, #92]	; (8000334 <app_main_init+0x74>)
 80002d8:	f004 fa28 	bl	800472c <ringBuffer_init>
  simple_fsm_init(&myfsm, sizeof(states)/sizeof(states[0]), states);
 80002dc:	4a16      	ldr	r2, [pc, #88]	; (8000338 <app_main_init+0x78>)
 80002de:	2103      	movs	r1, #3
 80002e0:	4816      	ldr	r0, [pc, #88]	; (800033c <app_main_init+0x7c>)
 80002e2:	f004 fa7d 	bl	80047e0 <simple_fsm_init>

  DWT_Delay_Init();
 80002e6:	f7ff ffbb 	bl	8000260 <DWT_Delay_Init>
  SystemCoreClockUpdate();
 80002ea:	f000 fcc5 	bl	8000c78 <SystemCoreClockUpdate>

  UART_init_t UART1_Init = { .uartBaud = UART_BAUD_115200,
 80002ee:	2302      	movs	r3, #2
 80002f0:	713b      	strb	r3, [r7, #4]
 80002f2:	2300      	movs	r3, #0
 80002f4:	717b      	strb	r3, [r7, #5]
 80002f6:	2300      	movs	r3, #0
 80002f8:	71bb      	strb	r3, [r7, #6]
 80002fa:	2300      	movs	r3, #0
 80002fc:	71fb      	strb	r3, [r7, #7]
			    .uartWordLength = UART_WORD_LEGTH_8_BITS };




  drv_uart_init(&UART1_Init);
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f004 f89d 	bl	8004440 <drv_uart_init>

  drv_SPI_init();
 8000306:	f003 ff37 	bl	8004178 <drv_SPI_init>

  simpleTimer_reset_milliSeconds(&testTimer, ONTime);
 800030a:	4b07      	ldr	r3, [pc, #28]	; (8000328 <app_main_init+0x68>)
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	4619      	mov	r1, r3
 8000310:	480b      	ldr	r0, [pc, #44]	; (8000340 <app_main_init+0x80>)
 8000312:	f004 fa7b 	bl	800480c <simpleTimer_reset_milliSeconds>
  uwTickPrio = TICK_INT_PRIORITY;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <app_main_init+0x84>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]

  acc_init();
 800031c:	f7ff ff2e 	bl	800017c <acc_init>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000004 	.word	0x20000004
 800032c:	2000003c 	.word	0x2000003c
 8000330:	20000070 	.word	0x20000070
 8000334:	20000060 	.word	0x20000060
 8000338:	080049f8 	.word	0x080049f8
 800033c:	20000080 	.word	0x20000080
 8000340:	20000054 	.word	0x20000054
 8000344:	2000000c 	.word	0x2000000c

08000348 <app_main_idle>:
static uint32_t u32nowUsTime;

static unsigned char acmsg[] = "Hello from STM";

void app_main_idle(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  u8idx++;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <app_main_idle+0x20>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	b2da      	uxtb	r2, r3
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <app_main_idle+0x20>)
 8000356:	701a      	strb	r2, [r3, #0]
  acc_getTemperature();
 8000358:	f7ff ff1c 	bl	8000194 <acc_getTemperature>

  HAL_Delay(200);
 800035c:	20c8      	movs	r0, #200	; 0xc8
 800035e:	f000 fdb1 	bl	8000ec4 <HAL_Delay>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000008c 	.word	0x2000008c

0800036c <entry_state_handler>:




void entry_state_handler()
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
	...

0800037c <action_state_handler>:

void action_state_handler(int* newState)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	2101      	movs	r1, #1
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <action_state_handler+0x44>)
 800038a:	f001 f8f7 	bl	800157c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2120      	movs	r1, #32
 8000392:	480b      	ldr	r0, [pc, #44]	; (80003c0 <action_state_handler+0x44>)
 8000394:	f001 f8f2 	bl	800157c <HAL_GPIO_WritePin>

  if(simpleTimer_timeout(&ledONTimer))
 8000398:	480a      	ldr	r0, [pc, #40]	; (80003c4 <action_state_handler+0x48>)
 800039a:	f004 fa53 	bl	8004844 <simpleTimer_timeout>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d008      	beq.n	80003b6 <action_state_handler+0x3a>
  {
    simpleTimer_reset_milliSeconds(&ledOFFTimer, OFFTime);
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <action_state_handler+0x4c>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	4619      	mov	r1, r3
 80003aa:	4808      	ldr	r0, [pc, #32]	; (80003cc <action_state_handler+0x50>)
 80003ac:	f004 fa2e 	bl	800480c <simpleTimer_reset_milliSeconds>
    *newState = Second;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
  }
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	48000400 	.word	0x48000400
 80003c4:	2000003c 	.word	0x2000003c
 80003c8:	20000006 	.word	0x20000006
 80003cc:	20000048 	.word	0x20000048

080003d0 <exit_state_handler>:

void exit_state_handler()
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0

}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <entry_state_handler2>:

void entry_state_handler2()
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0

}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <action_state_handler2>:

void action_state_handler2(int* newState)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2101      	movs	r1, #1
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <action_state_handler2+0x44>)
 80003fa:	f001 f8bf 	bl	800157c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80003fe:	2201      	movs	r2, #1
 8000400:	2120      	movs	r1, #32
 8000402:	480b      	ldr	r0, [pc, #44]	; (8000430 <action_state_handler2+0x44>)
 8000404:	f001 f8ba 	bl	800157c <HAL_GPIO_WritePin>

  if(simpleTimer_timeout(&ledOFFTimer))
 8000408:	480a      	ldr	r0, [pc, #40]	; (8000434 <action_state_handler2+0x48>)
 800040a:	f004 fa1b 	bl	8004844 <simpleTimer_timeout>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d008      	beq.n	8000426 <action_state_handler2+0x3a>
   {
     simpleTimer_reset_milliSeconds(&ledONTimer, ONTime);
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <action_state_handler2+0x4c>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	4808      	ldr	r0, [pc, #32]	; (800043c <action_state_handler2+0x50>)
 800041c:	f004 f9f6 	bl	800480c <simpleTimer_reset_milliSeconds>
     *newState = Third;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2202      	movs	r2, #2
 8000424:	601a      	str	r2, [r3, #0]
   }

}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	48000400 	.word	0x48000400
 8000434:	20000048 	.word	0x20000048
 8000438:	20000004 	.word	0x20000004
 800043c:	2000003c 	.word	0x2000003c

08000440 <exit_state_handler2>:

void exit_state_handler2()
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0

}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <entry_state_handler3>:

void entry_state_handler3()
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0

}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <action_state_handler3>:

void action_state_handler3(int* newState)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]

    *newState = First;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <exit_state_handler3>:

void exit_state_handler3()
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <LL_RCC_HSE_EnableDiv2>:
  * @brief  Enable HSE sysclk and pll prescaler division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_EnableDiv2
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableDiv2(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 8000488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr

080004a2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4013      	ands	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fca8 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f810 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f96a 	bl	80007b8 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80004e4:	f000 f940 	bl	8000768 <MX_USB_PCD_Init>
  MX_CRC_Init();
 80004e8:	f000 f8a8 	bl	800063c <MX_CRC_Init>
  MX_RTC_Init();
 80004ec:	f000 f8c8 	bl	8000680 <MX_RTC_Init>
  MX_TIM2_Init();
 80004f0:	f000 f8ee 	bl	80006d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 80004f4:	f7ff fee4 	bl	80002c0 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    app_main_idle();
 80004f8:	f7ff ff26 	bl	8000348 <app_main_idle>
 80004fc:	e7fc      	b.n	80004f8 <main+0x24>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b0ae      	sub	sp, #184	; 0xb8
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800050a:	2248      	movs	r2, #72	; 0x48
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f004 fa30 	bl	8004974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
 8000524:	615a      	str	r2, [r3, #20]
 8000526:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2250      	movs	r2, #80	; 0x50
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f004 fa20 	bl	8004974 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	4b40      	ldr	r3, [pc, #256]	; (8000638 <SystemClock_Config+0x138>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800053c:	4a3e      	ldr	r2, [pc, #248]	; (8000638 <SystemClock_Config+0x138>)
 800053e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b3c      	ldr	r3, [pc, #240]	; (8000638 <SystemClock_Config+0x138>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8000550:	230b      	movs	r3, #11
 8000552:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2340      	movs	r3, #64	; 0x40
 8000562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000566:	2305      	movs	r3, #5
 8000568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	2303      	movs	r3, #3
 8000574:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000578:	2310      	movs	r3, #16
 800057a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 800057e:	2320      	movs	r3, #32
 8000580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800058c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000594:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fca7 	bl	8001ef4 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005ac:	f000 f98a 	bl	80008c4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005b0:	236f      	movs	r3, #111	; 0x6f
 80005b2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005d0:	2103      	movs	r1, #3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 f822 	bl	800261c <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005de:	f000 f971 	bl	80008c4 <Error_Handler>
  }
  /** Enable the HSE Prescaler 
  */
  __HAL_RCC_HSE_DIV2_ENABLE();
 80005e2:	f7ff ff4f 	bl	8000484 <LL_RCC_HSE_EnableDiv2>
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RTC
 80005e6:	f44f 5324 	mov.w	r3, #10496	; 0x2900
 80005ea:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80005ec:	2318      	movs	r3, #24
 80005ee:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80005f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV4;
 80005f6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80005fa:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80005fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000600:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000602:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000606:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000608:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800060e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000618:	2300      	movs	r3, #0
 800061a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fc53 	bl	8002eca <HAL_RCCEx_PeriphCLKConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800062a:	f000 f94b 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800062e:	bf00      	nop
 8000630:	37b8      	adds	r7, #184	; 0xb8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	58000400 	.word	0x58000400

0800063c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_CRC_Init+0x3c>)
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <MX_CRC_Init+0x40>)
 8000644:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_CRC_Init+0x3c>)
 8000648:	2200      	movs	r2, #0
 800064a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_CRC_Init+0x3c>)
 800064e:	2200      	movs	r2, #0
 8000650:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_CRC_Init+0x3c>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_CRC_Init+0x3c>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_CRC_Init+0x3c>)
 8000660:	2201      	movs	r2, #1
 8000662:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_CRC_Init+0x3c>)
 8000666:	f000 fd2f 	bl	80010c8 <HAL_CRC_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000670:	f000 f928 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000174 	.word	0x20000174
 800067c:	40023000 	.word	0x40023000

08000680 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_RTC_Init+0x48>)
 8000686:	4a11      	ldr	r2, [pc, #68]	; (80006cc <MX_RTC_Init+0x4c>)
 8000688:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_RTC_Init+0x48>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_RTC_Init+0x48>)
 8000692:	227f      	movs	r2, #127	; 0x7f
 8000694:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_RTC_Init+0x48>)
 8000698:	22ff      	movs	r2, #255	; 0xff
 800069a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_RTC_Init+0x48>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_RTC_Init+0x48>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_RTC_Init+0x48>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_RTC_Init+0x48>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_RTC_Init+0x48>)
 80006b6:	f002 fe8e 	bl	80033d6 <HAL_RTC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80006c0:	f000 f900 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000198 	.word	0x20000198
 80006cc:	40002800 	.word	0x40002800

080006d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_TIM2_Init+0x94>)
 80006f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_TIM2_Init+0x94>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <MX_TIM2_Init+0x94>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_TIM2_Init+0x94>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_TIM2_Init+0x94>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_TIM2_Init+0x94>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000714:	4813      	ldr	r0, [pc, #76]	; (8000764 <MX_TIM2_Init+0x94>)
 8000716:	f002 ff4c 	bl	80035b2 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000720:	f000 f8d0 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	4619      	mov	r1, r3
 8000730:	480c      	ldr	r0, [pc, #48]	; (8000764 <MX_TIM2_Init+0x94>)
 8000732:	f003 f8b2 	bl	800389a <HAL_TIM_ConfigClockSource>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800073c:	f000 f8c2 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_TIM2_Init+0x94>)
 800074e:	f003 fa85 	bl	8003c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000758:	f000 f8b4 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200001bc 	.word	0x200001bc

08000768 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USB_PCD_Init+0x48>)
 800076e:	4a11      	ldr	r2, [pc, #68]	; (80007b4 <MX_USB_PCD_Init+0x4c>)
 8000770:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USB_PCD_Init+0x48>)
 8000774:	2208      	movs	r2, #8
 8000776:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_USB_PCD_Init+0x48>)
 800077a:	2202      	movs	r2, #2
 800077c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USB_PCD_Init+0x48>)
 8000780:	2202      	movs	r2, #2
 8000782:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_USB_PCD_Init+0x48>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USB_PCD_Init+0x48>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_USB_PCD_Init+0x48>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USB_PCD_Init+0x48>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_USB_PCD_Init+0x48>)
 800079e:	f000 ff05 	bl	80015ac <HAL_PCD_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80007a8:	f000 f88c 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200001fc 	.word	0x200001fc
 80007b4:	40006800 	.word	0x40006800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007cc:	2004      	movs	r0, #4
 80007ce:	f7ff fe68 	bl	80004a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2002      	movs	r0, #2
 80007d4:	f7ff fe65 	bl	80004a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fe62 	bl	80004a2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2008      	movs	r0, #8
 80007e0:	f7ff fe5f 	bl	80004a2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2123      	movs	r1, #35	; 0x23
 80007e8:	482a      	ldr	r0, [pc, #168]	; (8000894 <MX_GPIO_Init+0xdc>)
 80007ea:	f000 fec7 	bl	800157c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ee:	2310      	movs	r3, #16
 80007f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODER_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4619      	mov	r1, r3
 80007fe:	4826      	ldr	r0, [pc, #152]	; (8000898 <MX_GPIO_Init+0xe0>)
 8000800:	f000 fd4c 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000804:	2301      	movs	r3, #1
 8000806:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4619      	mov	r1, r3
 8000818:	481e      	ldr	r0, [pc, #120]	; (8000894 <MX_GPIO_Init+0xdc>)
 800081a:	f000 fd3f 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD1_Pin;
 800081e:	2322      	movs	r3, #34	; 0x22
 8000820:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4818      	ldr	r0, [pc, #96]	; (8000894 <MX_GPIO_Init+0xdc>)
 8000834:	f000 fd32 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000838:	2303      	movs	r3, #3
 800083a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODER_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4619      	mov	r1, r3
 8000848:	4814      	ldr	r0, [pc, #80]	; (800089c <MX_GPIO_Init+0xe4>)
 800084a:	f000 fd27 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin;
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULL_UP;
 8000856:	2301      	movs	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800085e:	2307      	movs	r3, #7
 8000860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0xdc>)
 8000868:	f000 fd18 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800087c:	2307      	movs	r3, #7
 800087e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4803      	ldr	r0, [pc, #12]	; (8000894 <MX_GPIO_Init+0xdc>)
 8000886:	f000 fd09 	bl	800129c <HAL_GPIO_Init>

}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	48000400 	.word	0x48000400
 8000898:	48000800 	.word	0x48000800
 800089c:	48000c00 	.word	0x48000c00

080008a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d101      	bne.n	80008b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b2:	f000 fadb 	bl	8000e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40014800 	.word	0x40014800

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80008d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <LL_AHB1_GRP1_EnableClock>:
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000900:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4313      	orrs	r3, r2
 800090a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800090c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4013      	ands	r3, r2
 8000916:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000918:	68fb      	ldr	r3, [r7, #12]
}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <LL_AHB2_GRP1_EnableClock>:
{
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800092e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4313      	orrs	r3, r2
 800093c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800093e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4013      	ands	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000966:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4313      	orrs	r3, r2
 800096e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800097c:	68fb      	ldr	r3, [r7, #12]
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a05      	ldr	r2, [pc, #20]	; (80009bc <HAL_CRC_MspInit+0x24>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d103      	bne.n	80009b2 <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009ae:	f7ff ffa1 	bl	80008f4 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023000 	.word	0x40023000

080009c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_RTC_MspInit+0x28>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d105      	bne.n	80009de <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009d2:	f7ff ff7e 	bl	80008d2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80009d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009da:	f7ff ffbd 	bl	8000958 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40002800 	.word	0x40002800

080009ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009fc:	d102      	bne.n	8000a04 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff ffaa 	bl	8000958 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_PCD_MspInit+0x5c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d118      	bne.n	8000a60 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff ff79 	bl	8000926 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a46:	230a      	movs	r3, #10
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	4619      	mov	r1, r3
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f000 fc22 	bl	800129c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a58:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000a5c:	f7ff ff7c 	bl	8000958 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40006800 	.word	0x40006800

08000a6c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a90:	68fb      	ldr	r3, [r7, #12]
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0); 
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	201a      	movs	r0, #26
 8000ab6:	f000 fadf 	bl	8001078 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn); 
 8000aba:	201a      	movs	r0, #26
 8000abc:	f000 faf6 	bl	80010ac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000ac0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ac4:	f7ff ffd2 	bl	8000a6c <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ac8:	f107 0208 	add.w	r2, r7, #8
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4611      	mov	r1, r2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 ff72 	bl	80029bc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ad8:	f001 ff5a 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 8000adc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <HAL_InitTick+0x8c>)
 8000ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae6:	0c9b      	lsrs	r3, r3, #18
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_InitTick+0x90>)
 8000aee:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <HAL_InitTick+0x94>)
 8000af0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_InitTick+0x90>)
 8000af4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000af8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000afa:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_InitTick+0x90>)
 8000afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000afe:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_InitTick+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <HAL_InitTick+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <HAL_InitTick+0x90>)
 8000b0e:	f002 fd50 	bl	80035b2 <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d104      	bne.n	8000b22 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_InitTick+0x90>)
 8000b1a:	f002 fd75 	bl	8003608 <HAL_TIM_Base_Start_IT>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3730      	adds	r7, #48	; 0x30
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	431bde83 	.word	0x431bde83
 8000b30:	20000470 	.word	0x20000470
 8000b34:	40014800 	.word	0x40014800

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000b9e:	f002 fd5d 	bl	800365c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  simpleTimer_IRQHandler(&htim17);
 8000ba2:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000ba4:	f003 fe88 	bl	80048b8 <simpleTimer_IRQHandler>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000470 	.word	0x20000470

08000bb0 <USART1_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  drv_uart_IRQHandler();
 8000bb4:	f003 fd94 	bl	80046e0 <drv_uart_IRQHandler>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  //drv_SPI_IRQHandler();
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <SystemInit+0xa0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <SystemInit+0xa0>)
 8000bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bdc:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <SystemInit+0xa0>)
 8000bde:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bfa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000bfe:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <SystemInit+0xa4>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c1c:	f023 0305 	bic.w	r3, r3, #5
 8000c20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c30:	f023 0301 	bic.w	r3, r3, #1
 8000c34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <SystemInit+0xa8>)
 8000c3e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c44:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <SystemInit+0xa8>)
 8000c46:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00
 8000c70:	faf6fefb 	.word	0xfaf6fefb
 8000c74:	22041000 	.word	0x22041000

08000c78 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b087      	sub	sp, #28
 8000c7c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	091b      	lsrs	r3, r3, #4
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	4a47      	ldr	r2, [pc, #284]	; (8000da8 <SystemCoreClockUpdate+0x130>)
 8000c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c90:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b0c      	cmp	r3, #12
 8000c9e:	d867      	bhi.n	8000d70 <SystemCoreClockUpdate+0xf8>
 8000ca0:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <SystemCoreClockUpdate+0x30>)
 8000ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca6:	bf00      	nop
 8000ca8:	08000cdd 	.word	0x08000cdd
 8000cac:	08000d71 	.word	0x08000d71
 8000cb0:	08000d71 	.word	0x08000d71
 8000cb4:	08000d71 	.word	0x08000d71
 8000cb8:	08000ce5 	.word	0x08000ce5
 8000cbc:	08000d71 	.word	0x08000d71
 8000cc0:	08000d71 	.word	0x08000d71
 8000cc4:	08000d71 	.word	0x08000d71
 8000cc8:	08000ced 	.word	0x08000ced
 8000ccc:	08000d71 	.word	0x08000d71
 8000cd0:	08000d71 	.word	0x08000d71
 8000cd4:	08000d71 	.word	0x08000d71
 8000cd8:	08000cf5 	.word	0x08000cf5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000cdc:	4a33      	ldr	r2, [pc, #204]	; (8000dac <SystemCoreClockUpdate+0x134>)
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	6013      	str	r3, [r2, #0]
      break;
 8000ce2:	e049      	b.n	8000d78 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000ce4:	4b31      	ldr	r3, [pc, #196]	; (8000dac <SystemCoreClockUpdate+0x134>)
 8000ce6:	4a32      	ldr	r2, [pc, #200]	; (8000db0 <SystemCoreClockUpdate+0x138>)
 8000ce8:	601a      	str	r2, [r3, #0]
      break;
 8000cea:	e045      	b.n	8000d78 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000cec:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <SystemCoreClockUpdate+0x134>)
 8000cee:	4a31      	ldr	r2, [pc, #196]	; (8000db4 <SystemCoreClockUpdate+0x13c>)
 8000cf0:	601a      	str	r2, [r3, #0]
      break;
 8000cf2:	e041      	b.n	8000d78 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	091b      	lsrs	r3, r3, #4
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d105      	bne.n	8000d22 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000d16:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <SystemCoreClockUpdate+0x138>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e00d      	b.n	8000d3e <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d105      	bne.n	8000d34 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000d28:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <SystemCoreClockUpdate+0x13c>)
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e004      	b.n	8000d3e <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3c:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fb02 f303 	mul.w	r3, r2, r3
 8000d50:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0f5b      	lsrs	r3, r3, #29
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	3301      	adds	r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <SystemCoreClockUpdate+0x134>)
 8000d6c:	6013      	str	r3, [r2, #0]
      break;
 8000d6e:	e003      	b.n	8000d78 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <SystemCoreClockUpdate+0x134>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	6013      	str	r3, [r2, #0]
      break;
 8000d76:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	f003 030f 	and.w	r3, r3, #15
 8000d84:	4a0c      	ldr	r2, [pc, #48]	; (8000db8 <SystemCoreClockUpdate+0x140>)
 8000d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <SystemCoreClockUpdate+0x134>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SystemCoreClockUpdate+0x134>)
 8000d98:	6013      	str	r3, [r2, #0]

}
 8000d9a:	bf00      	nop
 8000d9c:	371c      	adds	r7, #28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	08004a88 	.word	0x08004a88
 8000dac:	20000008 	.word	0x20000008
 8000db0:	00f42400 	.word	0x00f42400
 8000db4:	01e84800 	.word	0x01e84800
 8000db8:	08004a28 	.word	0x08004a28

08000dbc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000dbc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc0:	3304      	adds	r3, #4

08000dc2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000dc6:	d3f9      	bcc.n	8000dbc <CopyDataInit>
  bx lr
 8000dc8:	4770      	bx	lr

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000dca:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000dcc:	3004      	adds	r0, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000dce:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>
  bx lr
 8000dd2:	4770      	bx	lr

08000dd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000dd6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopForever+0x8>)
 8000dda:	490d      	ldr	r1, [pc, #52]	; (8000e10 <LoopForever+0xc>)
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LoopForever+0x10>)
 8000dde:	2300      	movs	r3, #0
 8000de0:	f7ff ffef 	bl	8000dc2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <LoopForever+0x14>)
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <LoopForever+0x18>)
 8000de8:	2300      	movs	r3, #0
 8000dea:	f7ff fff0 	bl	8000dce <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000dee:	480c      	ldr	r0, [pc, #48]	; (8000e20 <LoopForever+0x1c>)
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <LoopForever+0x20>)
 8000df2:	2300      	movs	r3, #0
 8000df4:	f7ff ffeb 	bl	8000dce <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000df8:	f7ff fee8 	bl	8000bcc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dfc:	f003 fd96 	bl	800492c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000e00:	f7ff fb68 	bl	80004d4 <main>

08000e04 <LoopForever>:

LoopForever:
  b LoopForever
 8000e04:	e7fe      	b.n	8000e04 <LoopForever>
 8000e06:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000e08:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000e0c:	20000004 	.word	0x20000004
 8000e10:	20000014 	.word	0x20000014
 8000e14:	08004ad0 	.word	0x08004ad0
  INIT_BSS _sbss, _ebss
 8000e18:	20000014 	.word	0x20000014
 8000e1c:	200004b4 	.word	0x200004b4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e20:	20030000 	.word	0x20030000
 8000e24:	20030000 	.word	0x20030000

08000e28 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC1_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <HAL_Init+0x3c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a0b      	ldr	r2, [pc, #44]	; (8000e68 <HAL_Init+0x3c>)
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e42:	2003      	movs	r0, #3
 8000e44:	f000 f90d 	bl	8001062 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff fe29 	bl	8000aa0 <HAL_InitTick>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d002      	beq.n	8000e5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	71fb      	strb	r3, [r7, #7]
 8000e58:	e001      	b.n	8000e5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e5a:	f7ff fd96 	bl	800098a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	58004000 	.word	0x58004000

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000010 	.word	0x20000010
 8000e90:	200004b0 	.word	0x200004b0

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	200004b0 	.word	0x200004b0

08000eac <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTickPrio+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000000c 	.word	0x2000000c

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffe2 	bl	8000e94 <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_Delay+0x40>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffd2 	bl	8000e94 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
    {
    }
  }
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000010 	.word	0x20000010

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff4c 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001086:	f7ff ff63 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 800108a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	6978      	ldr	r0, [r7, #20]
 8001092:	f7ff ffb3 	bl	8000ffc <NVIC_EncodePriority>
 8001096:	4602      	mov	r2, r0
 8001098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff82 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010a4:	bf00      	nop
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff56 	bl	8000f6c <__NVIC_EnableIRQ>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e054      	b.n	8001184 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	7f5b      	ldrb	r3, [r3, #29]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d105      	bne.n	80010f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fc54 	bl	8000998 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2202      	movs	r2, #2
 80010f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	791b      	ldrb	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a22      	ldr	r2, [pc, #136]	; (800118c <HAL_CRC_Init+0xc4>)
 8001104:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0218 	bic.w	r2, r2, #24
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	e00c      	b.n	8001132 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6899      	ldr	r1, [r3, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	461a      	mov	r2, r3
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f834 	bl	8001190 <HAL_CRCEx_Polynomial_Set>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e028      	b.n	8001184 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	795b      	ldrb	r3, [r3, #5]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d105      	bne.n	8001146 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f04f 32ff 	mov.w	r2, #4294967295
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	e004      	b.n	8001150 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6912      	ldr	r2, [r2, #16]
 800114e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695a      	ldr	r2, [r3, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	699a      	ldr	r2, [r3, #24]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	04c11db7 	.word	0x04c11db7

08001190 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80011a0:	231f      	movs	r3, #31
 80011a2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80011a4:	bf00      	nop
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1e5a      	subs	r2, r3, #1
 80011aa:	613a      	str	r2, [r7, #16]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d009      	beq.n	80011c4 <HAL_CRCEx_Polynomial_Set+0x34>
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	fa22 f303 	lsr.w	r3, r2, r3
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b18      	cmp	r3, #24
 80011c8:	d846      	bhi.n	8001258 <HAL_CRCEx_Polynomial_Set+0xc8>
 80011ca:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80011cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d0:	0800125f 	.word	0x0800125f
 80011d4:	08001259 	.word	0x08001259
 80011d8:	08001259 	.word	0x08001259
 80011dc:	08001259 	.word	0x08001259
 80011e0:	08001259 	.word	0x08001259
 80011e4:	08001259 	.word	0x08001259
 80011e8:	08001259 	.word	0x08001259
 80011ec:	08001259 	.word	0x08001259
 80011f0:	0800124d 	.word	0x0800124d
 80011f4:	08001259 	.word	0x08001259
 80011f8:	08001259 	.word	0x08001259
 80011fc:	08001259 	.word	0x08001259
 8001200:	08001259 	.word	0x08001259
 8001204:	08001259 	.word	0x08001259
 8001208:	08001259 	.word	0x08001259
 800120c:	08001259 	.word	0x08001259
 8001210:	08001241 	.word	0x08001241
 8001214:	08001259 	.word	0x08001259
 8001218:	08001259 	.word	0x08001259
 800121c:	08001259 	.word	0x08001259
 8001220:	08001259 	.word	0x08001259
 8001224:	08001259 	.word	0x08001259
 8001228:	08001259 	.word	0x08001259
 800122c:	08001259 	.word	0x08001259
 8001230:	08001235 	.word	0x08001235
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	2b06      	cmp	r3, #6
 8001238:	d913      	bls.n	8001262 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800123e:	e010      	b.n	8001262 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	2b07      	cmp	r3, #7
 8001244:	d90f      	bls.n	8001266 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800124a:	e00c      	b.n	8001266 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	d90b      	bls.n	800126a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001256:	e008      	b.n	800126a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	75fb      	strb	r3, [r7, #23]
      break;
 800125c:	e006      	b.n	800126c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800125e:	bf00      	nop
 8001260:	e004      	b.n	800126c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001262:	bf00      	nop
 8001264:	e002      	b.n	800126c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001266:	bf00      	nop
 8001268:	e000      	b.n	800126c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800126a:	bf00      	nop
  }
  if (status == HAL_OK)
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10d      	bne.n	800128e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f023 0118 	bic.w	r1, r3, #24
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	430a      	orrs	r2, r1
 800128c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800128e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001290:	4618      	mov	r0, r3
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012aa:	e14c      	b.n	8001546 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2101      	movs	r1, #1
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 813e 	beq.w	8001540 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d00b      	beq.n	80012e4 <HAL_GPIO_Init+0x48>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d007      	beq.n	80012e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d8:	2b11      	cmp	r3, #17
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b12      	cmp	r3, #18
 80012e2:	d130      	bne.n	8001346 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 0201 	and.w	r2, r3, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0xea>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b12      	cmp	r3, #18
 8001384:	d123      	bne.n	80013ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	08da      	lsrs	r2, r3, #3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3208      	adds	r2, #8
 800138e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	691a      	ldr	r2, [r3, #16]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	08da      	lsrs	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3208      	adds	r2, #8
 80013c8:	6939      	ldr	r1, [r7, #16]
 80013ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	2203      	movs	r2, #3
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0203 	and.w	r2, r3, #3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8098 	beq.w	8001540 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001410:	4a54      	ldr	r2, [pc, #336]	; (8001564 <HAL_GPIO_Init+0x2c8>)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800143a:	d019      	beq.n	8001470 <HAL_GPIO_Init+0x1d4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <HAL_GPIO_Init+0x2cc>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d013      	beq.n	800146c <HAL_GPIO_Init+0x1d0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a49      	ldr	r2, [pc, #292]	; (800156c <HAL_GPIO_Init+0x2d0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d00d      	beq.n	8001468 <HAL_GPIO_Init+0x1cc>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a48      	ldr	r2, [pc, #288]	; (8001570 <HAL_GPIO_Init+0x2d4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d007      	beq.n	8001464 <HAL_GPIO_Init+0x1c8>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a47      	ldr	r2, [pc, #284]	; (8001574 <HAL_GPIO_Init+0x2d8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d101      	bne.n	8001460 <HAL_GPIO_Init+0x1c4>
 800145c:	2304      	movs	r3, #4
 800145e:	e008      	b.n	8001472 <HAL_GPIO_Init+0x1d6>
 8001460:	2307      	movs	r3, #7
 8001462:	e006      	b.n	8001472 <HAL_GPIO_Init+0x1d6>
 8001464:	2303      	movs	r3, #3
 8001466:	e004      	b.n	8001472 <HAL_GPIO_Init+0x1d6>
 8001468:	2302      	movs	r3, #2
 800146a:	e002      	b.n	8001472 <HAL_GPIO_Init+0x1d6>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <HAL_GPIO_Init+0x1d6>
 8001470:	2300      	movs	r3, #0
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	f002 0203 	and.w	r2, r2, #3
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	4093      	lsls	r3, r2
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001482:	4938      	ldr	r1, [pc, #224]	; (8001564 <HAL_GPIO_Init+0x2c8>)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <HAL_GPIO_Init+0x2dc>)
 8001492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014b6:	4a30      	ldr	r2, [pc, #192]	; (8001578 <HAL_GPIO_Init+0x2dc>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_GPIO_Init+0x2dc>)
 80014c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014e4:	4a24      	ldr	r2, [pc, #144]	; (8001578 <HAL_GPIO_Init+0x2dc>)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_GPIO_Init+0x2dc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_GPIO_Init+0x2dc>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_GPIO_Init+0x2dc>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800153a:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <HAL_GPIO_Init+0x2dc>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	f47f aeab 	bne.w	80012ac <HAL_GPIO_Init+0x10>
  }
}
 8001556:	bf00      	nop
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40010000 	.word	0x40010000
 8001568:	48000400 	.word	0x48000400
 800156c:	48000800 	.word	0x48000800
 8001570:	48000c00 	.word	0x48000c00
 8001574:	48001000 	.word	0x48001000
 8001578:	58000800 	.word	0x58000800

0800157c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
 8001588:	4613      	mov	r3, r2
 800158a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800158c:	787b      	ldrb	r3, [r7, #1]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ae:	b08b      	sub	sp, #44	; 0x2c
 80015b0:	af06      	add	r7, sp, #24
 80015b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0ad      	b.n	800171a <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d106      	bne.n	80015d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fa1a 	bl	8000a0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2203      	movs	r2, #3
 80015dc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fbcf 	bl	8003d88 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	e035      	b.n	800165c <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	015b      	lsls	r3, r3, #5
 80015f6:	4413      	add	r3, r2
 80015f8:	3329      	adds	r3, #41	; 0x29
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	015b      	lsls	r3, r3, #5
 8001604:	4413      	add	r3, r2
 8001606:	3328      	adds	r3, #40	; 0x28
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	b291      	uxth	r1, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	4413      	add	r3, r2
 8001618:	3336      	adds	r3, #54	; 0x36
 800161a:	460a      	mov	r2, r1
 800161c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	015b      	lsls	r3, r3, #5
 8001624:	4413      	add	r3, r2
 8001626:	332b      	adds	r3, #43	; 0x2b
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	015b      	lsls	r3, r3, #5
 8001632:	4413      	add	r3, r2
 8001634:	3338      	adds	r3, #56	; 0x38
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	015b      	lsls	r3, r3, #5
 8001640:	4413      	add	r3, r2
 8001642:	333c      	adds	r3, #60	; 0x3c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	3302      	adds	r3, #2
 800164e:	015b      	lsls	r3, r3, #5
 8001650:	4413      	add	r3, r2
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	3301      	adds	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	d3c4      	bcc.n	80015f0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	e031      	b.n	80016d0 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	015b      	lsls	r3, r3, #5
 8001672:	4413      	add	r3, r2
 8001674:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	015b      	lsls	r3, r3, #5
 8001682:	4413      	add	r3, r2
 8001684:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	015b      	lsls	r3, r3, #5
 8001692:	4413      	add	r3, r2
 8001694:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	015b      	lsls	r3, r3, #5
 80016a2:	4413      	add	r3, r2
 80016a4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	015b      	lsls	r3, r3, #5
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	330a      	adds	r3, #10
 80016c2:	015b      	lsls	r3, r3, #5
 80016c4:	4413      	add	r3, r2
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	3301      	adds	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3c8      	bcc.n	800166c <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	687e      	ldr	r6, [r7, #4]
 80016e2:	466d      	mov	r5, sp
 80016e4:	f106 0410 	add.w	r4, r6, #16
 80016e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	602b      	str	r3, [r5, #0]
 80016f0:	1d33      	adds	r3, r6, #4
 80016f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f4:	6838      	ldr	r0, [r7, #0]
 80016f6:	f002 fb64 	bl	8003dc2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d102      	bne.n	8001718 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f805 	bl	8001722 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001722 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001722:	b480      	push	{r7}
 8001724:	b085      	sub	sp, #20
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001746:	b29b      	uxth	r3, r3
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800175a:	b29b      	uxth	r3, r3
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	58000400 	.word	0x58000400

08001798 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	58000400 	.word	0x58000400

080017b4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017c6:	d101      	bne.n	80017cc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_RCC_HSE_EnableBypass>:
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80017dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_RCC_HSE_DisableBypass>:
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80017fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_RCC_HSE_Enable>:
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_RCC_HSE_Disable>:
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_RCC_HSE_IsReady>:
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001862:	d101      	bne.n	8001868 <LL_RCC_HSE_IsReady+0x18>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <LL_RCC_HSE_IsReady+0x1a>
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_RCC_HSI_Enable>:
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_RCC_HSI_Disable>:
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_RCC_HSI_IsReady>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c2:	d101      	bne.n	80018c8 <LL_RCC_HSI_IsReady+0x18>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <LL_RCC_HSI_IsReady+0x1a>
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	061b      	lsls	r3, r3, #24
 80018ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_RCC_HSI48_Enable>:
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_RCC_HSI48_Disable>:
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800192c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_RCC_HSI48_IsReady>:
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b02      	cmp	r3, #2
 8001954:	d101      	bne.n	800195a <LL_RCC_HSI48_IsReady+0x18>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <LL_RCC_HSI48_IsReady+0x1a>
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_RCC_LSE_Enable>:
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_RCC_LSE_Disable>:
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800198c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_RCC_LSE_EnableBypass>:
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_RCC_LSE_DisableBypass>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_RCC_LSE_IsReady>:
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d101      	bne.n	8001a06 <LL_RCC_LSE_IsReady+0x18>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_RCC_LSE_IsReady+0x1a>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_RCC_LSI1_Enable>:
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_RCC_LSI1_Disable>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_RCC_LSI1_IsReady>:
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d101      	bne.n	8001a6e <LL_RCC_LSI1_IsReady+0x18>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <LL_RCC_LSI1_IsReady+0x1a>
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_RCC_LSI2_Enable>:
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a8a:	f043 0304 	orr.w	r3, r3, #4
 8001a8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_RCC_LSI2_Disable>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_RCC_LSI2_IsReady>:
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d101      	bne.n	8001ad6 <LL_RCC_LSI2_IsReady+0x18>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <LL_RCC_LSI2_IsReady+0x1a>
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_RCC_LSI2_SetTrimming>:
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001afe:	4313      	orrs	r3, r2
 8001b00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_RCC_MSI_Enable>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_RCC_MSI_Disable>:
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	6013      	str	r3, [r2, #0]
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_RCC_MSI_IsReady>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d101      	bne.n	8001b62 <LL_RCC_MSI_IsReady+0x16>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_RCC_MSI_IsReady+0x18>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_RCC_MSI_SetRange>:
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_RCC_MSI_GetRange>:
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2bb0      	cmp	r3, #176	; 0xb0
 8001bac:	d901      	bls.n	8001bb2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001bae:	23b0      	movs	r3, #176	; 0xb0
 8001bb0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001bb2:	687b      	ldr	r3, [r7, #4]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_RCC_SetSysClkSource>:
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 0203 	bic.w	r2, r3, #3
 8001bfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_RCC_GetSysClkSource>:
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_RCC_SetAHBPrescaler>:
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_RCC_SetAHB4Prescaler>:
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c8e:	f023 020f 	bic.w	r2, r3, #15
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_RCC_SetAPB1Prescaler>:
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_RCC_SetAPB2Prescaler>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_RCC_GetAHBPrescaler>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_C2_RCC_GetAHBPrescaler>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_RCC_GetAHB4Prescaler>:
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_RCC_GetAPB1Prescaler>:
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_RCC_GetAPB2Prescaler>:
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8c:	6013      	str	r3, [r2, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dc8:	d101      	bne.n	8001dce <LL_RCC_PLL_IsReady+0x18>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <LL_RCC_PLL_IsReady+0x1a>
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4e:	d101      	bne.n	8001e54 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e74:	d101      	bne.n	8001e7a <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9a:	d101      	bne.n	8001ea0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ebe:	d101      	bne.n	8001ec4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ede:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ee2:	d101      	bne.n	8001ee8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b08d      	sub	sp, #52	; 0x34
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e386      	b.n	8002614 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 808f 	beq.w	8002032 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f14:	f7ff fe7d 	bl	8001c12 <LL_RCC_GetSysClkSource>
 8001f18:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1a:	f7ff ff83 	bl	8001e24 <LL_RCC_PLL_GetMainSource>
 8001f1e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3e>
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	2b0c      	cmp	r3, #12
 8001f2a:	d149      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d146      	bne.n	8001fc0 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f32:	f7ff fe0b 	bl	8001b4c <LL_RCC_MSI_IsReady>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_OscConfig+0x54>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e365      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f4c:	f7ff fe23 	bl	8001b96 <LL_RCC_MSI_GetRange>
 8001f50:	4603      	mov	r3, r0
 8001f52:	429c      	cmp	r4, r3
 8001f54:	d914      	bls.n	8001f80 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fd60 	bl	8002a20 <RCC_SetFlashLatencyFromMSIRange>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e354      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fdfd 	bl	8001b6e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fe21 	bl	8001bc0 <LL_RCC_MSI_SetCalibTrimming>
 8001f7e:	e013      	b.n	8001fa8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fdf2 	bl	8001b6e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fe16 	bl	8001bc0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 fd41 	bl	8002a20 <RCC_SetFlashLatencyFromMSIRange>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e335      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8001fa8:	f7fe fe66 	bl	8000c78 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fac:	4bb4      	ldr	r3, [pc, #720]	; (8002280 <HAL_RCC_OscConfig+0x38c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fd75 	bl	8000aa0 <HAL_InitTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d039      	beq.n	8002030 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e329      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01e      	beq.n	8002006 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fc8:	f7ff fda2 	bl	8001b10 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fcc:	f7fe ff62 	bl	8000e94 <HAL_GetTick>
 8001fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fd4:	f7fe ff5e 	bl	8000e94 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e316      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001fe6:	f7ff fdb1 	bl	8001b4c <LL_RCC_MSI_IsReady>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f1      	beq.n	8001fd4 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fdba 	bl	8001b6e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fdde 	bl	8001bc0 <LL_RCC_MSI_SetCalibTrimming>
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002006:	f7ff fd92 	bl	8001b2e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800200a:	f7fe ff43 	bl	8000e94 <HAL_GetTick>
 800200e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002012:	f7fe ff3f 	bl	8000e94 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e2f7      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002024:	f7ff fd92 	bl	8001b4c <LL_RCC_MSI_IsReady>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f1      	bne.n	8002012 <HAL_RCC_OscConfig+0x11e>
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002030:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d05a      	beq.n	80020f4 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203e:	f7ff fde8 	bl	8001c12 <LL_RCC_GetSysClkSource>
 8002042:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002044:	f7ff feee 	bl	8001e24 <LL_RCC_PLL_GetMainSource>
 8002048:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d005      	beq.n	800205c <HAL_RCC_OscConfig+0x168>
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d10d      	bne.n	8002072 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d10a      	bne.n	8002072 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	f7ff fbf8 	bl	8001850 <LL_RCC_HSE_IsReady>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d045      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1fe>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d141      	bne.n	80020f2 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e2d0      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207a:	d102      	bne.n	8002082 <HAL_RCC_OscConfig+0x18e>
 800207c:	f7ff fbca 	bl	8001814 <LL_RCC_HSE_Enable>
 8002080:	e00d      	b.n	800209e <HAL_RCC_OscConfig+0x1aa>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800208a:	d104      	bne.n	8002096 <HAL_RCC_OscConfig+0x1a2>
 800208c:	f7ff fba4 	bl	80017d8 <LL_RCC_HSE_EnableBypass>
 8002090:	f7ff fbc0 	bl	8001814 <LL_RCC_HSE_Enable>
 8002094:	e003      	b.n	800209e <HAL_RCC_OscConfig+0x1aa>
 8002096:	f7ff fbcc 	bl	8001832 <LL_RCC_HSE_Disable>
 800209a:	f7ff fbac 	bl	80017f6 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d012      	beq.n	80020cc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fef5 	bl	8000e94 <HAL_GetTick>
 80020aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ae:	f7fe fef1 	bl	8000e94 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b64      	cmp	r3, #100	; 0x64
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e2a9      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 80020c0:	f7ff fbc6 	bl	8001850 <LL_RCC_HSE_IsReady>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f1      	beq.n	80020ae <HAL_RCC_OscConfig+0x1ba>
 80020ca:	e013      	b.n	80020f4 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe fee2 	bl	8000e94 <HAL_GetTick>
 80020d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe fede 	bl	8000e94 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e296      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 80020e6:	f7ff fbb3 	bl	8001850 <LL_RCC_HSE_IsReady>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f1      	bne.n	80020d4 <HAL_RCC_OscConfig+0x1e0>
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d051      	beq.n	80021a4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002100:	f7ff fd87 	bl	8001c12 <LL_RCC_GetSysClkSource>
 8002104:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002106:	f7ff fe8d 	bl	8001e24 <LL_RCC_PLL_GetMainSource>
 800210a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b04      	cmp	r3, #4
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x22a>
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b0c      	cmp	r3, #12
 8002116:	d113      	bne.n	8002140 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d110      	bne.n	8002140 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800211e:	f7ff fbc7 	bl	80018b0 <LL_RCC_HSI_IsReady>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_OscConfig+0x240>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e26f      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fbcb 	bl	80018d4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800213e:	e031      	b.n	80021a4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d019      	beq.n	800217c <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002148:	f7ff fb94 	bl	8001874 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe fea2 	bl	8000e94 <HAL_GetTick>
 8002150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002154:	f7fe fe9e 	bl	8000e94 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e256      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002166:	f7ff fba3 	bl	80018b0 <LL_RCC_HSI_IsReady>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f1      	beq.n	8002154 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fbad 	bl	80018d4 <LL_RCC_HSI_SetCalibTrimming>
 800217a:	e013      	b.n	80021a4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217c:	f7ff fb89 	bl	8001892 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe fe88 	bl	8000e94 <HAL_GetTick>
 8002184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002188:	f7fe fe84 	bl	8000e94 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e23c      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 800219a:	f7ff fb89 	bl	80018b0 <LL_RCC_HSI_IsReady>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f1      	bne.n	8002188 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a2 	beq.w	8002302 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d075      	beq.n	80022b2 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d046      	beq.n	8002260 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80021d2:	f7ff fc40 	bl	8001a56 <LL_RCC_LSI1_IsReady>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d113      	bne.n	8002204 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80021dc:	f7ff fc19 	bl	8001a12 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021e0:	f7fe fe58 	bl	8000e94 <HAL_GetTick>
 80021e4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021e8:	f7fe fe54 	bl	8000e94 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e20c      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80021fa:	f7ff fc2c 	bl	8001a56 <LL_RCC_LSI1_IsReady>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f1      	beq.n	80021e8 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002204:	f7ff fc39 	bl	8001a7a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe fe44 	bl	8000e94 <HAL_GetTick>
 800220c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002210:	f7fe fe40 	bl	8000e94 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b03      	cmp	r3, #3
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1f8      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002222:	f7ff fc4c 	bl	8001abe <LL_RCC_LSI2_IsReady>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f1      	beq.n	8002210 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fc56 	bl	8001ae2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002236:	f7ff fbfd 	bl	8001a34 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7fe fe2b 	bl	8000e94 <HAL_GetTick>
 800223e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002242:	f7fe fe27 	bl	8000e94 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1df      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002254:	f7ff fbff 	bl	8001a56 <LL_RCC_LSI1_IsReady>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f1      	bne.n	8002242 <HAL_RCC_OscConfig+0x34e>
 800225e:	e050      	b.n	8002302 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002260:	f7ff fbd7 	bl	8001a12 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fe16 	bl	8000e94 <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800226a:	e00b      	b.n	8002284 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800226c:	f7fe fe12 	bl	8000e94 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d904      	bls.n	8002284 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1ca      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
 800227e:	bf00      	nop
 8002280:	2000000c 	.word	0x2000000c
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002284:	f7ff fbe7 	bl	8001a56 <LL_RCC_LSI1_IsReady>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0ee      	beq.n	800226c <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800228e:	f7ff fc05 	bl	8001a9c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002294:	f7fe fdfe 	bl	8000e94 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1b6      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022a6:	f7ff fc0a 	bl	8001abe <LL_RCC_LSI2_IsReady>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f1      	bne.n	8002294 <HAL_RCC_OscConfig+0x3a0>
 80022b0:	e027      	b.n	8002302 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80022b2:	f7ff fbf3 	bl	8001a9c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b6:	f7fe fded 	bl	8000e94 <HAL_GetTick>
 80022ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022be:	f7fe fde9 	bl	8000e94 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e1a1      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80022d0:	f7ff fbf5 	bl	8001abe <LL_RCC_LSI2_IsReady>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f1      	bne.n	80022be <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80022da:	f7ff fbab 	bl	8001a34 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7fe fdd9 	bl	8000e94 <HAL_GetTick>
 80022e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022e6:	f7fe fdd5 	bl	8000e94 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e18d      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80022f8:	f7ff fbad 	bl	8001a56 <LL_RCC_LSI1_IsReady>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f1      	bne.n	80022e6 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d05b      	beq.n	80023c6 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230e:	4bb5      	ldr	r3, [pc, #724]	; (80025e4 <HAL_RCC_OscConfig+0x6f0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d114      	bne.n	8002344 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800231a:	f7ff fa2d 	bl	8001778 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7fe fdb9 	bl	8000e94 <HAL_GetTick>
 8002322:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002326:	f7fe fdb5 	bl	8000e94 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e16d      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002338:	4baa      	ldr	r3, [pc, #680]	; (80025e4 <HAL_RCC_OscConfig+0x6f0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d102      	bne.n	8002352 <HAL_RCC_OscConfig+0x45e>
 800234c:	f7ff fb0b 	bl	8001966 <LL_RCC_LSE_Enable>
 8002350:	e00c      	b.n	800236c <HAL_RCC_OscConfig+0x478>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b05      	cmp	r3, #5
 8002358:	d104      	bne.n	8002364 <HAL_RCC_OscConfig+0x470>
 800235a:	f7ff fb26 	bl	80019aa <LL_RCC_LSE_EnableBypass>
 800235e:	f7ff fb02 	bl	8001966 <LL_RCC_LSE_Enable>
 8002362:	e003      	b.n	800236c <HAL_RCC_OscConfig+0x478>
 8002364:	f7ff fb10 	bl	8001988 <LL_RCC_LSE_Disable>
 8002368:	f7ff fb30 	bl	80019cc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d014      	beq.n	800239e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7fe fd8e 	bl	8000e94 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7fe fd8a 	bl	8000e94 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	; 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e140      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002392:	f7ff fb2c 	bl	80019ee <LL_RCC_LSE_IsReady>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0ef      	beq.n	800237c <HAL_RCC_OscConfig+0x488>
 800239c:	e013      	b.n	80023c6 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239e:	f7fe fd79 	bl	8000e94 <HAL_GetTick>
 80023a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe fd75 	bl	8000e94 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e12b      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80023bc:	f7ff fb17 	bl	80019ee <LL_RCC_LSE_IsReady>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1ef      	bne.n	80023a6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d02c      	beq.n	800242c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d014      	beq.n	8002404 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023da:	f7ff fa90 	bl	80018fe <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7fe fd59 	bl	8000e94 <HAL_GetTick>
 80023e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023e6:	f7fe fd55 	bl	8000e94 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e10d      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80023f8:	f7ff faa3 	bl	8001942 <LL_RCC_HSI48_IsReady>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f1      	beq.n	80023e6 <HAL_RCC_OscConfig+0x4f2>
 8002402:	e013      	b.n	800242c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002404:	f7ff fa8c 	bl	8001920 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe fd44 	bl	8000e94 <HAL_GetTick>
 800240c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002410:	f7fe fd40 	bl	8000e94 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0f8      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002422:	f7ff fa8e 	bl	8001942 <LL_RCC_HSI48_IsReady>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f1      	bne.n	8002410 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80ee 	beq.w	8002612 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002436:	f7ff fbec 	bl	8001c12 <LL_RCC_GetSysClkSource>
 800243a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800243c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	2b02      	cmp	r3, #2
 800244a:	f040 80af 	bne.w	80025ac <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0203 	and.w	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	429a      	cmp	r2, r3
 800245a:	d123      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d11c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d114      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d10d      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d106      	bne.n	80024a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d05d      	beq.n	8002560 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	d058      	beq.n	800255c <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0ab      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024bc:	f7ff fc6c 	bl	8001d98 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024c0:	f7fe fce8 	bl	8000e94 <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7fe fce4 	bl	8000e94 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e09c      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ef      	bne.n	80024c8 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	4b3e      	ldr	r3, [pc, #248]	; (80025e8 <HAL_RCC_OscConfig+0x6f4>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024fa:	4311      	orrs	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002500:	0212      	lsls	r2, r2, #8
 8002502:	4311      	orrs	r1, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002508:	4311      	orrs	r1, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800250e:	4311      	orrs	r1, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002514:	430a      	orrs	r2, r1
 8002516:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800251a:	4313      	orrs	r3, r2
 800251c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800251e:	f7ff fc2c 	bl	8001d7a <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002532:	f7fe fcaf 	bl	8000e94 <HAL_GetTick>
 8002536:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fcab 	bl	8000e94 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e063      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0ef      	beq.n	800253a <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800255a:	e05a      	b.n	8002612 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e059      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d151      	bne.n	8002612 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800256e:	f7ff fc04 	bl	8001d7a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002582:	f7fe fc87 	bl	8000e94 <HAL_GetTick>
 8002586:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe fc83 	bl	8000e94 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e03b      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0ef      	beq.n	800258a <HAL_RCC_OscConfig+0x696>
 80025aa:	e032      	b.n	8002612 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d02d      	beq.n	800260e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b2:	f7ff fbf1 	bl	8001d98 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80025b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c0:	f023 0303 	bic.w	r3, r3, #3
 80025c4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80025c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80025d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7fe fc5b 	bl	8000e94 <HAL_GetTick>
 80025de:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e0:	e00d      	b.n	80025fe <HAL_RCC_OscConfig+0x70a>
 80025e2:	bf00      	nop
 80025e4:	58000400 	.word	0x58000400
 80025e8:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fc52 	bl	8000e94 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1ef      	bne.n	80025ec <HAL_RCC_OscConfig+0x6f8>
 800260c:	e001      	b.n	8002612 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3734      	adds	r7, #52	; 0x34
 8002618:	46bd      	mov	sp, r7
 800261a:	bd90      	pop	{r4, r7, pc}

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e12a      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b97      	ldr	r3, [pc, #604]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d91b      	bls.n	8002676 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	4992      	ldr	r1, [pc, #584]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264e:	f7fe fc21 	bl	8000e94 <HAL_GetTick>
 8002652:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002654:	e008      	b.n	8002668 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002656:	f7fe fc1d 	bl	8000e94 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e10e      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002668:	4b89      	ldr	r3, [pc, #548]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d1ef      	bne.n	8002656 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d016      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff facf 	bl	8001c2a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800268c:	f7fe fc02 	bl	8000e94 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002694:	f7fe fbfe 	bl	8000e94 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0ef      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026a6:	f7ff fbc9 	bl	8001e3c <LL_RCC_IsActiveFlag_HPRE>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f1      	beq.n	8002694 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0320 	and.w	r3, r3, #32
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d016      	beq.n	80026ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fac6 	bl	8001c52 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026c6:	f7fe fbe5 	bl	8000e94 <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026ce:	f7fe fbe1 	bl	8000e94 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0d2      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80026e0:	f7ff fbbe 	bl	8001e60 <LL_RCC_IsActiveFlag_C2HPRE>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f1      	beq.n	80026ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fabf 	bl	8001c7e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002700:	f7fe fbc8 	bl	8000e94 <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002708:	f7fe fbc4 	bl	8000e94 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0b5      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800271a:	f7ff fbb4 	bl	8001e86 <LL_RCC_IsActiveFlag_SHDHPRE>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f1      	beq.n	8002708 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d016      	beq.n	800275e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fab9 	bl	8001cac <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800273a:	f7fe fbab 	bl	8000e94 <HAL_GetTick>
 800273e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002742:	f7fe fba7 	bl	8000e94 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e098      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002754:	f7ff fbaa 	bl	8001eac <LL_RCC_IsActiveFlag_PPRE1>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f1      	beq.n	8002742 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d017      	beq.n	800279a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff faaf 	bl	8001cd4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002776:	f7fe fb8d 	bl	8000e94 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800277e:	f7fe fb89 	bl	8000e94 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e07a      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002790:	f7ff fb9e 	bl	8001ed0 <LL_RCC_IsActiveFlag_PPRE2>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f1      	beq.n	800277e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d043      	beq.n	800282e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d106      	bne.n	80027bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80027ae:	f7ff f84f 	bl	8001850 <LL_RCC_HSE_IsReady>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d11e      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e064      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80027c4:	f7ff faf7 	bl	8001db6 <LL_RCC_PLL_IsReady>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d113      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e059      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80027da:	f7ff f9b7 	bl	8001b4c <LL_RCC_MSI_IsReady>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d108      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e04e      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80027e8:	f7ff f862 	bl	80018b0 <LL_RCC_HSI_IsReady>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e047      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff f9f5 	bl	8001bea <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002800:	f7fe fb48 	bl	8000e94 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fe fb44 	bl	8000e94 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e033      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	f7ff f9f8 	bl	8001c12 <LL_RCC_GetSysClkSource>
 8002822:	4602      	mov	r2, r0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	429a      	cmp	r2, r3
 800282c:	d1ec      	bne.n	8002808 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d21b      	bcs.n	8002874 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283c:	4b14      	ldr	r3, [pc, #80]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 0207 	bic.w	r2, r3, #7
 8002844:	4912      	ldr	r1, [pc, #72]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	4313      	orrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800284c:	f7fe fb22 	bl	8000e94 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	e008      	b.n	8002866 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002854:	f7fe fb1e 	bl	8000e94 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e00f      	b.n	8002886 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d1ef      	bne.n	8002854 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002874:	f7fe fa00 	bl	8000c78 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002878:	f7fe fb18 	bl	8000eac <HAL_GetTickPrio>
 800287c:	4603      	mov	r3, r0
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f90e 	bl	8000aa0 <HAL_InitTick>
 8002884:	4603      	mov	r3, r0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	58004000 	.word	0x58004000

08002894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289a:	f7ff f9ba 	bl	8001c12 <LL_RCC_GetSysClkSource>
 800289e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028a6:	f7ff f976 	bl	8001b96 <LL_RCC_MSI_GetRange>
 80028aa:	4603      	mov	r3, r0
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	4a2a      	ldr	r2, [pc, #168]	; (800295c <HAL_RCC_GetSysClockFreq+0xc8>)
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	e04a      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d102      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028c2:	4b27      	ldr	r3, [pc, #156]	; (8002960 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e044      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d10a      	bne.n	80028e4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028ce:	f7fe ff71 	bl	80017b4 <LL_RCC_HSE_IsEnabledDiv2>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80028d8:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	e039      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	e036      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80028e4:	f7ff fa9e 	bl	8001e24 <LL_RCC_PLL_GetMainSource>
 80028e8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d002      	beq.n	80028f6 <HAL_RCC_GetSysClockFreq+0x62>
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d003      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x68>
 80028f4:	e00d      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028f8:	60bb      	str	r3, [r7, #8]
        break;
 80028fa:	e015      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028fc:	f7fe ff5a 	bl	80017b4 <LL_RCC_HSE_IsEnabledDiv2>
 8002900:	4603      	mov	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d102      	bne.n	800290c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002908:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800290a:	e00d      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <HAL_RCC_GetSysClockFreq+0xd0>)
 800290e:	60bb      	str	r3, [r7, #8]
        break;
 8002910:	e00a      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002912:	f7ff f940 	bl	8001b96 <LL_RCC_MSI_GetRange>
 8002916:	4603      	mov	r3, r0
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	4a0f      	ldr	r2, [pc, #60]	; (800295c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	60bb      	str	r3, [r7, #8]
        break;
 8002926:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002928:	f7ff fa57 	bl	8001dda <LL_RCC_PLL_GetN>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	fb03 f402 	mul.w	r4, r3, r2
 8002934:	f7ff fa6a 	bl	8001e0c <LL_RCC_PLL_GetDivider>
 8002938:	4603      	mov	r3, r0
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	3301      	adds	r3, #1
 800293e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002942:	f7ff fa57 	bl	8001df4 <LL_RCC_PLL_GetR>
 8002946:	4603      	mov	r3, r0
 8002948:	0f5b      	lsrs	r3, r3, #29
 800294a:	3301      	adds	r3, #1
 800294c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002950:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	08004a88 	.word	0x08004a88
 8002960:	00f42400 	.word	0x00f42400
 8002964:	01e84800 	.word	0x01e84800

08002968 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002968:	b598      	push	{r3, r4, r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800296c:	f7ff ff92 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002970:	4604      	mov	r4, r0
 8002972:	f7ff f9c3 	bl	8001cfc <LL_RCC_GetAHBPrescaler>
 8002976:	4603      	mov	r3, r0
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	4a03      	ldr	r2, [pc, #12]	; (800298c <HAL_RCC_GetHCLKFreq+0x24>)
 8002980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002984:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd98      	pop	{r3, r4, r7, pc}
 800298c:	08004a28 	.word	0x08004a28

08002990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002990:	b598      	push	{r3, r4, r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002994:	f7ff ffe8 	bl	8002968 <HAL_RCC_GetHCLKFreq>
 8002998:	4604      	mov	r4, r0
 800299a:	f7ff f9e2 	bl	8001d62 <LL_RCC_GetAPB2Prescaler>
 800299e:	4603      	mov	r3, r0
 80029a0:	0adb      	lsrs	r3, r3, #11
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	4a04      	ldr	r2, [pc, #16]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd98      	pop	{r3, r4, r7, pc}
 80029b8:	08004a68 	.word	0x08004a68

080029bc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	226f      	movs	r2, #111	; 0x6f
 80029ca:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80029cc:	f7ff f921 	bl	8001c12 <LL_RCC_GetSysClkSource>
 80029d0:	4602      	mov	r2, r0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80029d6:	f7ff f991 	bl	8001cfc <LL_RCC_GetAHBPrescaler>
 80029da:	4602      	mov	r2, r0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80029e0:	f7ff f9b3 	bl	8001d4a <LL_RCC_GetAPB1Prescaler>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80029ea:	f7ff f9ba 	bl	8001d62 <LL_RCC_GetAPB2Prescaler>
 80029ee:	4602      	mov	r2, r0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 80029f4:	f7ff f98e 	bl	8001d14 <LL_C2_RCC_GetAHBPrescaler>
 80029f8:	4602      	mov	r2, r0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 80029fe:	f7ff f996 	bl	8001d2e <LL_RCC_GetAHB4Prescaler>
 8002a02:	4602      	mov	r2, r0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <HAL_RCC_GetClockConfig+0x60>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0207 	and.w	r2, r3, #7
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	601a      	str	r2, [r3, #0]
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	58004000 	.word	0x58004000

08002a20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2bb0      	cmp	r3, #176	; 0xb0
 8002a2c:	d903      	bls.n	8002a36 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e007      	b.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	4a11      	ldr	r2, [pc, #68]	; (8002a84 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a44:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002a46:	f7ff f972 	bl	8001d2e <LL_RCC_GetAHB4Prescaler>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	0c9c      	lsrs	r4, r3, #18
 8002a6a:	f7fe fe95 	bl	8001798 <HAL_PWREx_GetVoltageRange>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4619      	mov	r1, r3
 8002a72:	4620      	mov	r0, r4
 8002a74:	f000 f80c 	bl	8002a90 <RCC_SetFlashLatency>
 8002a78:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd90      	pop	{r4, r7, pc}
 8002a82:	bf00      	nop
 8002a84:	08004a88 	.word	0x08004a88
 8002a88:	08004a28 	.word	0x08004a28
 8002a8c:	431bde83 	.word	0x431bde83

08002a90 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b093      	sub	sp, #76	; 0x4c
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002a9a:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <RCC_SetFlashLatency+0xf0>)
 8002a9c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002aa6:	4a37      	ldr	r2, [pc, #220]	; (8002b84 <RCC_SetFlashLatency+0xf4>)
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002ab2:	4b35      	ldr	r3, [pc, #212]	; (8002b88 <RCC_SetFlashLatency+0xf8>)
 8002ab4:	f107 040c 	add.w	r4, r7, #12
 8002ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002abe:	2300      	movs	r3, #0
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac8:	d11c      	bne.n	8002b04 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ace:	e015      	b.n	8002afc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002ad8:	4413      	add	r3, r2
 8002ada:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d808      	bhi.n	8002af6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002aec:	4413      	add	r3, r2
 8002aee:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002af4:	e022      	b.n	8002b3c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af8:	3301      	adds	r3, #1
 8002afa:	643b      	str	r3, [r7, #64]	; 0x40
 8002afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d9e6      	bls.n	8002ad0 <RCC_SetFlashLatency+0x40>
 8002b02:	e01b      	b.n	8002b3c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b08:	e015      	b.n	8002b36 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b12:	4413      	add	r3, r2
 8002b14:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d808      	bhi.n	8002b30 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b26:	4413      	add	r3, r2
 8002b28:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b2e:	e005      	b.n	8002b3c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b32:	3301      	adds	r3, #1
 8002b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d9e6      	bls.n	8002b0a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <RCC_SetFlashLatency+0xfc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f023 0207 	bic.w	r2, r3, #7
 8002b44:	4911      	ldr	r1, [pc, #68]	; (8002b8c <RCC_SetFlashLatency+0xfc>)
 8002b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b4c:	f7fe f9a2 	bl	8000e94 <HAL_GetTick>
 8002b50:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b52:	e008      	b.n	8002b66 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b54:	f7fe f99e 	bl	8000e94 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e007      	b.n	8002b76 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <RCC_SetFlashLatency+0xfc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1ef      	bne.n	8002b54 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	374c      	adds	r7, #76	; 0x4c
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd90      	pop	{r4, r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	0800499c 	.word	0x0800499c
 8002b84:	080049ac 	.word	0x080049ac
 8002b88:	080049b8 	.word	0x080049b8
 8002b8c:	58004000 	.word	0x58004000

08002b90 <LL_RCC_LSE_IsEnabled>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <LL_RCC_LSE_IsEnabled+0x18>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <LL_RCC_LSE_IsEnabled+0x1a>
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_RCC_LSE_IsReady>:
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d101      	bne.n	8002bcc <LL_RCC_LSE_IsReady+0x18>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <LL_RCC_LSE_IsReady+0x1a>
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_RCC_SetRFWKPClockSource>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_RCC_SetSMPSClockSource>:
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f023 0203 	bic.w	r2, r3, #3
 8002c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_RCC_SetSMPSPrescaler>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_SetUSARTClockSource>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f023 0203 	bic.w	r2, r3, #3
 8002c68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_SetLPUARTClockSource>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_RCC_SetI2CClockSource>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_RCC_SetLPTIMClockSource>:
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	041b      	lsls	r3, r3, #16
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	401a      	ands	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	041b      	lsls	r3, r3, #16
 8002d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <LL_RCC_SetSAIClockSource>:
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_RCC_SetRNGClockSource>:
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_SetCLK48ClockSource>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_RCC_SetUSBClockSource>:
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ffe3 	bl	8002d72 <LL_RCC_SetCLK48ClockSource>
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <LL_RCC_SetADCClockSource>:
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_RCC_SetRTCClockSource>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_RCC_GetRTCClockSource>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <LL_RCC_ForceBackupDomainReset>:
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_RCC_PLLSAI1_Enable>:
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e7c:	6013      	str	r3, [r2, #0]
}
 8002e7e:	bf00      	nop
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_RCC_PLLSAI1_Disable>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e9a:	6013      	str	r3, [r2, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <LL_RCC_PLLSAI1_IsReady>:
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb8:	d101      	bne.n	8002ebe <LL_RCC_PLLSAI1_IsReady+0x18>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b088      	sub	sp, #32
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d033      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eee:	d00c      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef4:	d802      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d010      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002efa:	e017      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002efc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f00:	d017      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002f02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f06:	d016      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002f08:	e010      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f1a:	e00d      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 f947 	bl	80031b4 <RCCEx_PLLSAI1_ConfigNP>
 8002f26:	4603      	mov	r3, r0
 8002f28:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f2a:	e005      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	77fb      	strb	r3, [r7, #31]
        break;
 8002f30:	e002      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002f32:	bf00      	nop
 8002f34:	e000      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f38:	7ffb      	ldrb	r3, [r7, #31]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fee9 	bl	8002d1a <LL_RCC_SetSAIClockSource>
 8002f48:	e001      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4a:	7ffb      	ldrb	r3, [r7, #31]
 8002f4c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d046      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002f5a:	f7ff ff57 	bl	8002e0c <LL_RCC_GetRTCClockSource>
 8002f5e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d03c      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f6a:	f7fe fc05 	bl	8001778 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff31 	bl	8002de0 <LL_RCC_SetRTCClockSource>
 8002f7e:	e02e      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002f8a:	f7ff ff4c 	bl	8002e26 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002f8e:	f7ff ff5b 	bl	8002e48 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002faa:	f7ff fdf1 	bl	8002b90 <LL_RCC_LSE_IsEnabled>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d114      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fb4:	f7fd ff6e 	bl	8000e94 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fd ff6a 	bl	8000e94 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d902      	bls.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	77fb      	strb	r3, [r7, #31]
              break;
 8002fd2:	e004      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002fd4:	f7ff fdee 	bl	8002bb4 <LL_RCC_LSE_IsReady>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d1ee      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
 8002fe0:	77bb      	strb	r3, [r7, #30]
 8002fe2:	e001      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe4:	7ffb      	ldrb	r3, [r7, #31]
 8002fe6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fe2b 	bl	8002c54 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d004      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fe36 	bl	8002c80 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d004      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fe5e 	bl	8002ce6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d004      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fe53 	bl	8002ce6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fe2b 	bl	8002cac <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fe20 	bl	8002cac <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d022      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fe8e 	bl	8002d9e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800308a:	d107      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030a4:	d10b      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f8dd 	bl	800326a <RCCEx_PLLSAI1_ConfigNQ>
 80030b0:	4603      	mov	r3, r0
 80030b2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80030b4:	7ffb      	ldrb	r3, [r7, #31]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80030ba:	7ffb      	ldrb	r3, [r7, #31]
 80030bc:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d02b      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d2:	d008      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030dc:	d003      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fe2b 	bl	8002d46 <LL_RCC_SetRNGClockSource>
 80030f0:	e00a      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	2000      	movs	r0, #0
 80030fe:	f7ff fe22 	bl	8002d46 <LL_RCC_SetRNGClockSource>
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f7ff fe35 	bl	8002d72 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003110:	d107      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800311c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003120:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	2b00      	cmp	r3, #0
 800312c:	d022      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fe3e 	bl	8002db4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003140:	d107      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800314c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003150:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800315a:	d10b      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	4618      	mov	r0, r3
 8003162:	f000 f8dd 	bl	8003320 <RCCEx_PLLSAI1_ConfigNR>
 8003166:	4603      	mov	r3, r0
 8003168:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800316a:	7ffb      	ldrb	r3, [r7, #31]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8003170:	7ffb      	ldrb	r3, [r7, #31]
 8003172:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fd27 	bl	8002bd8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fd46 	bl	8002c2c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fd2d 	bl	8002c04 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 80031aa:	7fbb      	ldrb	r3, [r7, #30]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031c0:	f7ff fe62 	bl	8002e88 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031c4:	f7fd fe66 	bl	8000e94 <HAL_GetTick>
 80031c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031ca:	e009      	b.n	80031e0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031cc:	f7fd fe62 	bl	8000e94 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d902      	bls.n	80031e0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	73fb      	strb	r3, [r7, #15]
      break;
 80031de:	e004      	b.n	80031ea <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031e0:	f7ff fe61 	bl	8002ea6 <LL_RCC_PLLSAI1_IsReady>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d137      	bne.n	8003260 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003204:	4313      	orrs	r3, r2
 8003206:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800321a:	4313      	orrs	r3, r2
 800321c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800321e:	f7ff fe24 	bl	8002e6a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003222:	f7fd fe37 	bl	8000e94 <HAL_GetTick>
 8003226:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003228:	e009      	b.n	800323e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800322a:	f7fd fe33 	bl	8000e94 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d902      	bls.n	800323e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	73fb      	strb	r3, [r7, #15]
        break;
 800323c:	e004      	b.n	8003248 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800323e:	f7ff fe32 	bl	8002ea6 <LL_RCC_PLLSAI1_IsReady>
 8003242:	4603      	mov	r3, r0
 8003244:	2b01      	cmp	r3, #1
 8003246:	d1f0      	bne.n	800322a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d108      	bne.n	8003260 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800324e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800325c:	4313      	orrs	r3, r2
 800325e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003276:	f7ff fe07 	bl	8002e88 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800327a:	f7fd fe0b 	bl	8000e94 <HAL_GetTick>
 800327e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003280:	e009      	b.n	8003296 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003282:	f7fd fe07 	bl	8000e94 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d902      	bls.n	8003296 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	73fb      	strb	r3, [r7, #15]
      break;
 8003294:	e004      	b.n	80032a0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003296:	f7ff fe06 	bl	8002ea6 <LL_RCC_PLLSAI1_IsReady>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d137      	bne.n	8003316 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ba:	4313      	orrs	r3, r2
 80032bc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80032be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d0:	4313      	orrs	r3, r2
 80032d2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032d4:	f7ff fdc9 	bl	8002e6a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fd fddc 	bl	8000e94 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032de:	e009      	b.n	80032f4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032e0:	f7fd fdd8 	bl	8000e94 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d902      	bls.n	80032f4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	73fb      	strb	r3, [r7, #15]
        break;
 80032f2:	e004      	b.n	80032fe <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032f4:	f7ff fdd7 	bl	8002ea6 <LL_RCC_PLLSAI1_IsReady>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d1f0      	bne.n	80032e0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d108      	bne.n	8003316 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003312:	4313      	orrs	r3, r2
 8003314:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800332c:	f7ff fdac 	bl	8002e88 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003330:	f7fd fdb0 	bl	8000e94 <HAL_GetTick>
 8003334:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003336:	e009      	b.n	800334c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003338:	f7fd fdac 	bl	8000e94 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d902      	bls.n	800334c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	73fb      	strb	r3, [r7, #15]
      break;
 800334a:	e004      	b.n	8003356 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800334c:	f7ff fdab 	bl	8002ea6 <LL_RCC_PLLSAI1_IsReady>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d137      	bne.n	80033cc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003370:	4313      	orrs	r3, r2
 8003372:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003386:	4313      	orrs	r3, r2
 8003388:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800338a:	f7ff fd6e 	bl	8002e6a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338e:	f7fd fd81 	bl	8000e94 <HAL_GetTick>
 8003392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003394:	e009      	b.n	80033aa <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003396:	f7fd fd7d 	bl	8000e94 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d902      	bls.n	80033aa <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	73fb      	strb	r3, [r7, #15]
        break;
 80033a8:	e004      	b.n	80033b4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033aa:	f7ff fd7c 	bl	8002ea6 <LL_RCC_PLLSAI1_IsReady>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d1f0      	bne.n	8003396 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c8:	4313      	orrs	r3, r2
 80033ca:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e090      	b.n	800350a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d106      	bne.n	8003402 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7fd fadf 	bl	80009c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	22ca      	movs	r2, #202	; 0xca
 8003410:	625a      	str	r2, [r3, #36]	; 0x24
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2253      	movs	r2, #83	; 0x53
 8003418:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f89f 	bl	800355e <RTC_EnterInitMode>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	22ff      	movs	r2, #255	; 0xff
 800342c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2204      	movs	r2, #4
 8003432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e067      	b.n	800350a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800344c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6899      	ldr	r1, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68d2      	ldr	r2, [r2, #12]
 8003474:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6919      	ldr	r1, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	041a      	lsls	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003498:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0203 	bic.w	r2, r2, #3
 80034a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69da      	ldr	r2, [r3, #28]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d113      	bne.n	80034f8 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f81e 	bl	8003512 <HAL_RTC_WaitForSynchro>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	22ff      	movs	r2, #255	; 0xff
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2204      	movs	r2, #4
 80034e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e008      	b.n	800350a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	22ff      	movs	r2, #255	; 0xff
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
  }
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003528:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800352a:	f7fd fcb3 	bl	8000e94 <HAL_GetTick>
 800352e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003530:	e009      	b.n	8003546 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003532:	f7fd fcaf 	bl	8000e94 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003540:	d901      	bls.n	8003546 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e007      	b.n	8003556 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0ee      	beq.n	8003532 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d119      	bne.n	80035a8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f04f 32ff 	mov.w	r2, #4294967295
 800357c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800357e:	f7fd fc89 	bl	8000e94 <HAL_GetTick>
 8003582:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003584:	e009      	b.n	800359a <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003586:	f7fd fc85 	bl	8000e94 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003594:	d901      	bls.n	800359a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e007      	b.n	80035aa <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ee      	beq.n	8003586 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e01d      	b.n	8003600 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d106      	bne.n	80035de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7fd fa07 	bl	80009ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3304      	adds	r3, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f000 fa33 	bl	8003a5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <HAL_TIM_Base_Start_IT+0x50>)
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b06      	cmp	r3, #6
 8003630:	d00b      	beq.n	800364a <HAL_TIM_Base_Start_IT+0x42>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003638:	d007      	beq.n	800364a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	00010007 	.word	0x00010007

0800365c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d122      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b02      	cmp	r3, #2
 800367e:	d11b      	bne.n	80036b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f06f 0202 	mvn.w	r2, #2
 8003688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f9be 	bl	8003a20 <HAL_TIM_IC_CaptureCallback>
 80036a4:	e005      	b.n	80036b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f9b0 	bl	8003a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f9c1 	bl	8003a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d122      	bne.n	800370c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d11b      	bne.n	800370c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0204 	mvn.w	r2, #4
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f994 	bl	8003a20 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f986 	bl	8003a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f997 	bl	8003a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b08      	cmp	r3, #8
 8003718:	d122      	bne.n	8003760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b08      	cmp	r3, #8
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0208 	mvn.w	r2, #8
 8003730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2204      	movs	r2, #4
 8003736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f96a 	bl	8003a20 <HAL_TIM_IC_CaptureCallback>
 800374c:	e005      	b.n	800375a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f95c 	bl	8003a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f96d 	bl	8003a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b10      	cmp	r3, #16
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0210 	mvn.w	r2, #16
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2208      	movs	r2, #8
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f940 	bl	8003a20 <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f932 	bl	8003a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f943 	bl	8003a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0201 	mvn.w	r2, #1
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd f860 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d107      	bne.n	800380c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa92 	bl	8003d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381a:	d10e      	bne.n	800383a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b80      	cmp	r3, #128	; 0x80
 8003828:	d107      	bne.n	800383a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fa85 	bl	8003d44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d10e      	bne.n	8003866 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d107      	bne.n	8003866 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800385e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8f1 	bl	8003a48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b20      	cmp	r3, #32
 8003872:	d10e      	bne.n	8003892 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b20      	cmp	r3, #32
 8003880:	d107      	bne.n	8003892 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f06f 0220 	mvn.w	r2, #32
 800388a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fa45 	bl	8003d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_TIM_ConfigClockSource+0x18>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0a8      	b.n	8003a04 <HAL_TIM_ConfigClockSource+0x16a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2202      	movs	r2, #2
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80038d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038dc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d067      	beq.n	80039be <HAL_TIM_ConfigClockSource+0x124>
 80038ee:	2b40      	cmp	r3, #64	; 0x40
 80038f0:	d80b      	bhi.n	800390a <HAL_TIM_ConfigClockSource+0x70>
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d073      	beq.n	80039de <HAL_TIM_ConfigClockSource+0x144>
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d802      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0x66>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d06f      	beq.n	80039de <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038fe:	e078      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003900:	2b20      	cmp	r3, #32
 8003902:	d06c      	beq.n	80039de <HAL_TIM_ConfigClockSource+0x144>
 8003904:	2b30      	cmp	r3, #48	; 0x30
 8003906:	d06a      	beq.n	80039de <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003908:	e073      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800390a:	2b70      	cmp	r3, #112	; 0x70
 800390c:	d00d      	beq.n	800392a <HAL_TIM_ConfigClockSource+0x90>
 800390e:	2b70      	cmp	r3, #112	; 0x70
 8003910:	d804      	bhi.n	800391c <HAL_TIM_ConfigClockSource+0x82>
 8003912:	2b50      	cmp	r3, #80	; 0x50
 8003914:	d033      	beq.n	800397e <HAL_TIM_ConfigClockSource+0xe4>
 8003916:	2b60      	cmp	r3, #96	; 0x60
 8003918:	d041      	beq.n	800399e <HAL_TIM_ConfigClockSource+0x104>
      break;
 800391a:	e06a      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800391c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003920:	d066      	beq.n	80039f0 <HAL_TIM_ConfigClockSource+0x156>
 8003922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003926:	d017      	beq.n	8003958 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003928:	e063      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6899      	ldr	r1, [r3, #8]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f000 f96f 	bl	8003c1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800394c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	609a      	str	r2, [r3, #8]
      break;
 8003956:	e04c      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6899      	ldr	r1, [r3, #8]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f000 f958 	bl	8003c1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800397a:	609a      	str	r2, [r3, #8]
      break;
 800397c:	e039      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6859      	ldr	r1, [r3, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	461a      	mov	r2, r3
 800398c:	f000 f8ca 	bl	8003b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2150      	movs	r1, #80	; 0x50
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f923 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 800399c:	e029      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6859      	ldr	r1, [r3, #4]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f000 f8e9 	bl	8003b82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2160      	movs	r1, #96	; 0x60
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f913 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 80039bc:	e019      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6859      	ldr	r1, [r3, #4]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f000 f8aa 	bl	8003b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2140      	movs	r1, #64	; 0x40
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f903 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 80039dc:	e009      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4619      	mov	r1, r3
 80039e8:	4610      	mov	r0, r2
 80039ea:	f000 f8fa 	bl	8003be2 <TIM_ITRx_SetConfig>
      break;
 80039ee:	e000      	b.n	80039f2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80039f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a2a      	ldr	r2, [pc, #168]	; (8003b18 <TIM_Base_SetConfig+0xbc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_Base_SetConfig+0x20>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7a:	d108      	bne.n	8003a8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a21      	ldr	r2, [pc, #132]	; (8003b18 <TIM_Base_SetConfig+0xbc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00b      	beq.n	8003aae <TIM_Base_SetConfig+0x52>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9c:	d007      	beq.n	8003aae <TIM_Base_SetConfig+0x52>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <TIM_Base_SetConfig+0xc0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d003      	beq.n	8003aae <TIM_Base_SetConfig+0x52>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a1d      	ldr	r2, [pc, #116]	; (8003b20 <TIM_Base_SetConfig+0xc4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d108      	bne.n	8003ac0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <TIM_Base_SetConfig+0xbc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d007      	beq.n	8003afc <TIM_Base_SetConfig+0xa0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <TIM_Base_SetConfig+0xc0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_Base_SetConfig+0xa0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <TIM_Base_SetConfig+0xc4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d103      	bne.n	8003b04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	615a      	str	r2, [r3, #20]
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40014400 	.word	0x40014400
 8003b20:	40014800 	.word	0x40014800

08003b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f023 0201 	bic.w	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 030a 	bic.w	r3, r3, #10
 8003b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b087      	sub	sp, #28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f023 0210 	bic.w	r2, r3, #16
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	031b      	lsls	r3, r3, #12
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	621a      	str	r2, [r3, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b085      	sub	sp, #20
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f043 0307 	orr.w	r3, r3, #7
 8003c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	021a      	lsls	r2, r3, #8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	609a      	str	r2, [r3, #8]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e04a      	b.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1f      	ldr	r2, [pc, #124]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d108      	bne.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ca4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40012c00 	.word	0x40012c00

08003d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d60:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003d64:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	89fb      	ldrh	r3, [r7, #14]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d90:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003d94:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	b21a      	sxth	r2, r3
 8003da0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	b21b      	sxth	r3, r3
 8003da8:	4013      	ands	r3, r2
 8003daa:	b21b      	sxth	r3, r3
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	f107 0014 	add.w	r0, r7, #20
 8003dd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ffaf 	bl	8003d58 <USB_EnableGlobalInt>

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e06:	b004      	add	sp, #16
 8003e08:	4770      	bx	lr

08003e0a <drv_GPIO_init>:
/* Global variables ---------------------------------------------------*/

/* Public functions ----------------------------------------------------*/

void drv_GPIO_init(GPIO_init_t* pGPIOInit)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  GPIO_TypeDef* GPIOx;

  GPIOx = get_GPIO_port(pGPIOInit);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f934 	bl	8004080 <get_GPIO_port>
 8003e18:	60f8      	str	r0, [r7, #12]
  set_GPIO_mode(pGPIOInit, GPIOx);
 8003e1a:	68f9      	ldr	r1, [r7, #12]
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f953 	bl	80040c8 <set_GPIO_mode>
  set_GPIO_type(pGPIOInit, GPIOx);
 8003e22:	68f9      	ldr	r1, [r7, #12]
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f901 	bl	800402c <set_GPIO_type>
  set_GPIO_speed(pGPIOInit, GPIOx);
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f8b1 	bl	8003f94 <set_GPIO_speed>
  set_GPIO_pull(pGPIOInit, GPIOx);
 8003e32:	68f9      	ldr	r1, [r7, #12]
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f873 	bl	8003f20 <set_GPIO_pull>

}
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <drv_GPIO_set_pin>:

void drv_GPIO_set_pin(eGPIO_Ports_t ePort, bool_t bState, uint8_t u8pinNumber)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	71bb      	strb	r3, [r7, #6]
 8003e52:	4613      	mov	r3, r2
 8003e54:	717b      	strb	r3, [r7, #5]
  switch(ePort)
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d022      	beq.n	8003ea2 <drv_GPIO_set_pin+0x5e>
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d03a      	beq.n	8003ed6 <drv_GPIO_set_pin+0x92>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d000      	beq.n	8003e66 <drv_GPIO_set_pin+0x22>
  {
    case GPIO_PORTA: { bState ? (GPIOA->ODR |= (0x01 << u8pinNumber) ) : (GPIOA->ODR &= ~(0x01 << u8pinNumber) ); } break;
    case GPIO_PORTB: { bState ? (GPIOB->ODR |= (0x01 << u8pinNumber) ) : (GPIOB->ODR &= ~(0x01 << u8pinNumber) ); } break;
    case GPIO_PORTC: { bState ? (GPIOC->ODR |= (0x01 << u8pinNumber) ) : (GPIOC->ODR &= ~(0x01 << u8pinNumber) ); } break;
    default : break;
 8003e64:	e051      	b.n	8003f0a <drv_GPIO_set_pin+0xc6>
    case GPIO_PORTA: { bState ? (GPIOA->ODR |= (0x01 << u8pinNumber) ) : (GPIOA->ODR &= ~(0x01 << u8pinNumber) ); } break;
 8003e66:	79bb      	ldrb	r3, [r7, #6]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00c      	beq.n	8003e86 <drv_GPIO_set_pin+0x42>
 8003e6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	797a      	ldrb	r2, [r7, #5]
 8003e74:	2101      	movs	r1, #1
 8003e76:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6153      	str	r3, [r2, #20]
 8003e84:	e041      	b.n	8003f0a <drv_GPIO_set_pin+0xc6>
 8003e86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	797a      	ldrb	r2, [r7, #5]
 8003e8e:	2101      	movs	r1, #1
 8003e90:	fa01 f202 	lsl.w	r2, r1, r2
 8003e94:	43d2      	mvns	r2, r2
 8003e96:	4611      	mov	r1, r2
 8003e98:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003e9c:	400b      	ands	r3, r1
 8003e9e:	6153      	str	r3, [r2, #20]
 8003ea0:	e033      	b.n	8003f0a <drv_GPIO_set_pin+0xc6>
    case GPIO_PORTB: { bState ? (GPIOB->ODR |= (0x01 << u8pinNumber) ) : (GPIOB->ODR &= ~(0x01 << u8pinNumber) ); } break;
 8003ea2:	79bb      	ldrb	r3, [r7, #6]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <drv_GPIO_set_pin+0x7a>
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <drv_GPIO_set_pin+0xd4>)
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	797a      	ldrb	r2, [r7, #5]
 8003eae:	2101      	movs	r1, #1
 8003eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <drv_GPIO_set_pin+0xd4>)
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6153      	str	r3, [r2, #20]
 8003ebc:	e025      	b.n	8003f0a <drv_GPIO_set_pin+0xc6>
 8003ebe:	4b16      	ldr	r3, [pc, #88]	; (8003f18 <drv_GPIO_set_pin+0xd4>)
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	797a      	ldrb	r2, [r7, #5]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eca:	43d2      	mvns	r2, r2
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <drv_GPIO_set_pin+0xd4>)
 8003ed0:	400b      	ands	r3, r1
 8003ed2:	6153      	str	r3, [r2, #20]
 8003ed4:	e019      	b.n	8003f0a <drv_GPIO_set_pin+0xc6>
    case GPIO_PORTC: { bState ? (GPIOC->ODR |= (0x01 << u8pinNumber) ) : (GPIOC->ODR &= ~(0x01 << u8pinNumber) ); } break;
 8003ed6:	79bb      	ldrb	r3, [r7, #6]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <drv_GPIO_set_pin+0xae>
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <drv_GPIO_set_pin+0xd8>)
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	797a      	ldrb	r2, [r7, #5]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4a0c      	ldr	r2, [pc, #48]	; (8003f1c <drv_GPIO_set_pin+0xd8>)
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6153      	str	r3, [r2, #20]
 8003ef0:	e00a      	b.n	8003f08 <drv_GPIO_set_pin+0xc4>
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <drv_GPIO_set_pin+0xd8>)
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	797a      	ldrb	r2, [r7, #5]
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f202 	lsl.w	r2, r1, r2
 8003efe:	43d2      	mvns	r2, r2
 8003f00:	4611      	mov	r1, r2
 8003f02:	4a06      	ldr	r2, [pc, #24]	; (8003f1c <drv_GPIO_set_pin+0xd8>)
 8003f04:	400b      	ands	r3, r1
 8003f06:	6153      	str	r3, [r2, #20]
 8003f08:	bf00      	nop
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	48000400 	.word	0x48000400
 8003f1c:	48000800 	.word	0x48000800

08003f20 <set_GPIO_pull>:


/* Private functions ---------------------------------------------------*/
static void set_GPIO_pull(GPIO_init_t* pGPIOPull, GPIO_TypeDef* GPIOx)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  switch(pGPIOPull->gpioPuPd)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	791b      	ldrb	r3, [r3, #4]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d011      	beq.n	8003f56 <set_GPIO_pull+0x36>
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d01b      	beq.n	8003f6e <set_GPIO_pull+0x4e>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d000      	beq.n	8003f3c <set_GPIO_pull+0x1c>
   {
     case GPIO_NO_PULL:   { GPIOx->PUPDR &= ~(0x01 << (pGPIOPull->u8pinNumber * 2)  ); } break;
     case GPIO_PULLUP:    { GPIOx->PUPDR |=  (0x01 << (pGPIOPull->u8pinNumber * 2) ); } break;
     case GPIO_PULL_DOWN: { GPIOx->PUPDR |=  (0x02 << (pGPIOPull->u8pinNumber * 2) ); } break;
     default: break;
 8003f3a:	e024      	b.n	8003f86 <set_GPIO_pull+0x66>
     case GPIO_NO_PULL:   { GPIOx->PUPDR &= ~(0x01 << (pGPIOPull->u8pinNumber * 2)  ); } break;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	7952      	ldrb	r2, [r2, #5]
 8003f44:	0052      	lsls	r2, r2, #1
 8003f46:	2101      	movs	r1, #1
 8003f48:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4c:	43d2      	mvns	r2, r2
 8003f4e:	401a      	ands	r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	e017      	b.n	8003f86 <set_GPIO_pull+0x66>
     case GPIO_PULLUP:    { GPIOx->PUPDR |=  (0x01 << (pGPIOPull->u8pinNumber * 2) ); } break;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	7952      	ldrb	r2, [r2, #5]
 8003f5e:	0052      	lsls	r2, r2, #1
 8003f60:	2101      	movs	r1, #1
 8003f62:	fa01 f202 	lsl.w	r2, r1, r2
 8003f66:	431a      	orrs	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	60da      	str	r2, [r3, #12]
 8003f6c:	e00b      	b.n	8003f86 <set_GPIO_pull+0x66>
     case GPIO_PULL_DOWN: { GPIOx->PUPDR |=  (0x02 << (pGPIOPull->u8pinNumber * 2) ); } break;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	7952      	ldrb	r2, [r2, #5]
 8003f76:	0052      	lsls	r2, r2, #1
 8003f78:	2102      	movs	r1, #2
 8003f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	60da      	str	r2, [r3, #12]
 8003f84:	bf00      	nop
   }
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <set_GPIO_speed>:


static void set_GPIO_speed(GPIO_init_t* pGPIOSpeed, GPIO_TypeDef* GPIOx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  switch(pGPIOSpeed->gpioSpeed)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	78db      	ldrb	r3, [r3, #3]
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d83b      	bhi.n	800401e <set_GPIO_speed+0x8a>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <set_GPIO_speed+0x18>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fd7 	.word	0x08003fd7
 8003fb4:	08003fef 	.word	0x08003fef
 8003fb8:	08004007 	.word	0x08004007
   {
     case GPIO_SPEED_LOW:    { GPIOx->OSPEEDR &= ~(0x01 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	7952      	ldrb	r2, [r2, #5]
 8003fc4:	0052      	lsls	r2, r2, #1
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fcc:	43d2      	mvns	r2, r2
 8003fce:	401a      	ands	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	e024      	b.n	8004020 <set_GPIO_speed+0x8c>
     case GPIO_SPEED_MEDIUM: { GPIOx->OSPEEDR |=  (0x01 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	7952      	ldrb	r2, [r2, #5]
 8003fde:	0052      	lsls	r2, r2, #1
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	e018      	b.n	8004020 <set_GPIO_speed+0x8c>
     case GPIO_SPEED_FAST:   { GPIOx->OSPEEDR |=  (0x02 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	7952      	ldrb	r2, [r2, #5]
 8003ff6:	0052      	lsls	r2, r2, #1
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffe:	431a      	orrs	r2, r3
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	e00c      	b.n	8004020 <set_GPIO_speed+0x8c>
     case GPIO_SPEED_HIGH:   { GPIOx->OSPEEDR |=  (0x03 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	7952      	ldrb	r2, [r2, #5]
 800400e:	0052      	lsls	r2, r2, #1
 8004010:	2103      	movs	r1, #3
 8004012:	fa01 f202 	lsl.w	r2, r1, r2
 8004016:	431a      	orrs	r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	e000      	b.n	8004020 <set_GPIO_speed+0x8c>
     default: break;
 800401e:	bf00      	nop
   }
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <set_GPIO_type>:


static void set_GPIO_type(GPIO_init_t* pGPIOType, GPIO_TypeDef* GPIOx)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  switch(pGPIOType->gpioType)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	789b      	ldrb	r3, [r3, #2]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <set_GPIO_type+0x18>
 800403e:	2b01      	cmp	r3, #1
 8004040:	d00c      	beq.n	800405c <set_GPIO_type+0x30>
   {
     case GPIO_TYPE_PUSH_PULL:  { GPIOx->OTYPER &=  ~(0x01 << pGPIOType->u8pinNumber ); } break;
     case GPIO_TYPE_OPEN_DRAIN: { GPIOx->OTYPER |=   (0x01 << pGPIOType->u8pinNumber ); } break;

     default: break;
 8004042:	e016      	b.n	8004072 <set_GPIO_type+0x46>
     case GPIO_TYPE_PUSH_PULL:  { GPIOx->OTYPER &=  ~(0x01 << pGPIOType->u8pinNumber ); } break;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	7952      	ldrb	r2, [r2, #5]
 800404c:	4611      	mov	r1, r2
 800404e:	2201      	movs	r2, #1
 8004050:	408a      	lsls	r2, r1
 8004052:	43d2      	mvns	r2, r2
 8004054:	401a      	ands	r2, r3
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	e00a      	b.n	8004072 <set_GPIO_type+0x46>
     case GPIO_TYPE_OPEN_DRAIN: { GPIOx->OTYPER |=   (0x01 << pGPIOType->u8pinNumber ); } break;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	7952      	ldrb	r2, [r2, #5]
 8004064:	4611      	mov	r1, r2
 8004066:	2201      	movs	r2, #1
 8004068:	408a      	lsls	r2, r1
 800406a:	431a      	orrs	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	bf00      	nop
   }
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <get_GPIO_port>:


static GPIO_TypeDef* get_GPIO_port(GPIO_init_t* pGPIOInit)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  GPIO_TypeDef* pretVal = NULL;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]

  switch(pGPIOInit->gpioPort)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d008      	beq.n	80040a6 <get_GPIO_port+0x26>
 8004094:	2b02      	cmp	r3, #2
 8004096:	d009      	beq.n	80040ac <get_GPIO_port+0x2c>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d000      	beq.n	800409e <get_GPIO_port+0x1e>
  {
    case GPIO_PORTA : { pretVal = GPIOA; } break;
    case GPIO_PORTB : { pretVal = GPIOB; } break;
    case GPIO_PORTC : { pretVal = GPIOC; } break;

    default: break;
 800409c:	e009      	b.n	80040b2 <get_GPIO_port+0x32>
    case GPIO_PORTA : { pretVal = GPIOA; } break;
 800409e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e005      	b.n	80040b2 <get_GPIO_port+0x32>
    case GPIO_PORTB : { pretVal = GPIOB; } break;
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <get_GPIO_port+0x40>)
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e002      	b.n	80040b2 <get_GPIO_port+0x32>
    case GPIO_PORTC : { pretVal = GPIOC; } break;
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <get_GPIO_port+0x44>)
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	bf00      	nop
  }

  return pretVal;
 80040b2:	68fb      	ldr	r3, [r7, #12]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	48000400 	.word	0x48000400
 80040c4:	48000800 	.word	0x48000800

080040c8 <set_GPIO_mode>:

static void set_GPIO_mode(GPIO_init_t* pGPIOMode, GPIO_TypeDef* GPIOx)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  switch(pGPIOMode->gpioMode)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d847      	bhi.n	800416a <set_GPIO_mode+0xa2>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <set_GPIO_mode+0x18>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	080040f1 	.word	0x080040f1
 80040e4:	0800410b 	.word	0x0800410b
 80040e8:	0800413b 	.word	0x0800413b
 80040ec:	0800416b 	.word	0x0800416b
  {
     case GPIO_MODE_INPUT  : {  GPIOx->MODER &= ~(0x01 << ((pGPIOMode->u8pinNumber * 2))); } break;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	7952      	ldrb	r2, [r2, #5]
 80040f8:	0052      	lsls	r2, r2, #1
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004100:	43d2      	mvns	r2, r2
 8004102:	401a      	ands	r2, r3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e030      	b.n	800416c <set_GPIO_mode+0xa4>
     case GPIO_MODER_OUTPUT :
     {
       GPIOx->MODER &= ~(0x03 << ((pGPIOMode->u8pinNumber * 2))); /* Clear the reset value */
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	7952      	ldrb	r2, [r2, #5]
 8004112:	0052      	lsls	r2, r2, #1
 8004114:	2103      	movs	r1, #3
 8004116:	fa01 f202 	lsl.w	r2, r1, r2
 800411a:	43d2      	mvns	r2, r2
 800411c:	401a      	ands	r2, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	601a      	str	r2, [r3, #0]
       GPIOx->MODER |=  (0x01 << ((pGPIOMode->u8pinNumber * 2)));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	7952      	ldrb	r2, [r2, #5]
 800412a:	0052      	lsls	r2, r2, #1
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f202 	lsl.w	r2, r1, r2
 8004132:	431a      	orrs	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	601a      	str	r2, [r3, #0]
     } break;
 8004138:	e018      	b.n	800416c <set_GPIO_mode+0xa4>
     case GPIO_MODER_ALTERNATE 	:
       {
	 GPIOx->MODER &= ~(0x03 << ((pGPIOMode->u8pinNumber * 2))); /* Clear the reset value */
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	7952      	ldrb	r2, [r2, #5]
 8004142:	0052      	lsls	r2, r2, #1
 8004144:	2103      	movs	r1, #3
 8004146:	fa01 f202 	lsl.w	r2, r1, r2
 800414a:	43d2      	mvns	r2, r2
 800414c:	401a      	ands	r2, r3
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	601a      	str	r2, [r3, #0]
	 GPIOx->MODER |=  (0x02 << ((pGPIOMode->u8pinNumber * 2)));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	7952      	ldrb	r2, [r2, #5]
 800415a:	0052      	lsls	r2, r2, #1
 800415c:	2102      	movs	r1, #2
 800415e:	fa01 f202 	lsl.w	r2, r1, r2
 8004162:	431a      	orrs	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	601a      	str	r2, [r3, #0]
       } break;
 8004168:	e000      	b.n	800416c <set_GPIO_mode+0xa4>
     case GPIO_MODER_ANALOG 	: { } break;

     default: break;
 800416a:	bf00      	nop
   }
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <drv_SPI_init>:
static uint8_t au8RxBuf[RX_BUFFER_SIZE];

/* Public functions ----------------------------------------------------*/

void drv_SPI_init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
  PA6 SS

  PA11 SPI1_ MISO
  PA12 SPI1_ MOSI
  PA5 SPI1_ SCK*/
  ringBuffer_init(&spiTxBuffer, au8TxBuf, TX_BUFFER_SIZE);
 800417e:	2238      	movs	r2, #56	; 0x38
 8004180:	4959      	ldr	r1, [pc, #356]	; (80042e8 <drv_SPI_init+0x170>)
 8004182:	485a      	ldr	r0, [pc, #360]	; (80042ec <drv_SPI_init+0x174>)
 8004184:	f000 fad2 	bl	800472c <ringBuffer_init>
  ringBuffer_init(&spiRxBuffer, au8RxBuf, RX_BUFFER_SIZE);
 8004188:	2238      	movs	r2, #56	; 0x38
 800418a:	4959      	ldr	r1, [pc, #356]	; (80042f0 <drv_SPI_init+0x178>)
 800418c:	4859      	ldr	r0, [pc, #356]	; (80042f4 <drv_SPI_init+0x17c>)
 800418e:	f000 facd 	bl	800472c <ringBuffer_init>

  GPIO_init_t SPI_GPIO_CS_PA4 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 8004192:	4a59      	ldr	r2, [pc, #356]	; (80042f8 <drv_SPI_init+0x180>)
 8004194:	f107 0318 	add.w	r3, r7, #24
 8004198:	e892 0003 	ldmia.w	r2, {r0, r1}
 800419c:	6018      	str	r0, [r3, #0]
 800419e:	3304      	adds	r3, #4
 80041a0:	8019      	strh	r1, [r3, #0]
				   .gpioSpeed = GPIO_SPEED_HIGH,
				   .gpioPort = GPIO_PORTA,
				   .gpioPuPd = GPIO_PULLUP,
				   .u8pinNumber = SPI_CS_PIN                 };

  GPIO_init_t SPI_GPIO_MISO_PA6 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 80041a2:	4a56      	ldr	r2, [pc, #344]	; (80042fc <drv_SPI_init+0x184>)
 80041a4:	f107 0310 	add.w	r3, r7, #16
 80041a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041ac:	6018      	str	r0, [r3, #0]
 80041ae:	3304      	adds	r3, #4
 80041b0:	8019      	strh	r1, [r3, #0]
				     .gpioSpeed = GPIO_SPEED_HIGH,
				     .gpioPort = GPIO_PORTA,
				     .gpioPuPd = GPIO_PULLUP,
				     .u8pinNumber = 6                 };

  GPIO_init_t SPI_GPIO_MOSI_PA7 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 80041b2:	4a53      	ldr	r2, [pc, #332]	; (8004300 <drv_SPI_init+0x188>)
 80041b4:	f107 0308 	add.w	r3, r7, #8
 80041b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041bc:	6018      	str	r0, [r3, #0]
 80041be:	3304      	adds	r3, #4
 80041c0:	8019      	strh	r1, [r3, #0]
  				     .gpioSpeed = GPIO_SPEED_HIGH,
  				     .gpioPort = GPIO_PORTA,
  				     .gpioPuPd = GPIO_PULLUP,
  				     .u8pinNumber = 7                 };

  GPIO_init_t SPI_GPIO_SCK_PA5 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 80041c2:	4a50      	ldr	r2, [pc, #320]	; (8004304 <drv_SPI_init+0x18c>)
 80041c4:	463b      	mov	r3, r7
 80041c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041ca:	6018      	str	r0, [r3, #0]
 80041cc:	3304      	adds	r3, #4
 80041ce:	8019      	strh	r1, [r3, #0]
				   .gpioSpeed = GPIO_SPEED_HIGH,
				   .gpioPort = GPIO_PORTA,
				   .gpioPuPd = GPIO_PULLUP,
				   .u8pinNumber = 5                 };

  drv_GPIO_init(&SPI_GPIO_CS_PA4);
 80041d0:	f107 0318 	add.w	r3, r7, #24
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fe18 	bl	8003e0a <drv_GPIO_init>
  drv_GPIO_init(&SPI_GPIO_MISO_PA6);
 80041da:	f107 0310 	add.w	r3, r7, #16
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fe13 	bl	8003e0a <drv_GPIO_init>
  drv_GPIO_init(&SPI_GPIO_MOSI_PA7);
 80041e4:	f107 0308 	add.w	r3, r7, #8
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fe0e 	bl	8003e0a <drv_GPIO_init>
  drv_GPIO_init(&SPI_GPIO_SCK_PA5);
 80041ee:	463b      	mov	r3, r7
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fe0a 	bl	8003e0a <drv_GPIO_init>

  GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL5_Pos);
 80041f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004200:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8004204:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL6_Pos);
 8004206:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004210:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8004214:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL7_Pos);
 8004216:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004220:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8004224:	6213      	str	r3, [r2, #32]
  PA6 SPI1_ MISO
  PA7 SPI1_ MOSI
  PA5 SPI1_ SCK
*/

  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8004226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004230:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004234:	6613      	str	r3, [r2, #96]	; 0x60

  SPI1->CR1 |= SPI_CR1_SSM; /* Software slave select */
 8004236:	4b34      	ldr	r3, [pc, #208]	; (8004308 <drv_SPI_init+0x190>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a33      	ldr	r2, [pc, #204]	; (8004308 <drv_SPI_init+0x190>)
 800423c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004240:	6013      	str	r3, [r2, #0]

  SPI1->CR1 |= SPI_CR1_BR_0; /* 001: fPCLK DIV 4 */
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <drv_SPI_init+0x190>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a30      	ldr	r2, [pc, #192]	; (8004308 <drv_SPI_init+0x190>)
 8004248:	f043 0308 	orr.w	r3, r3, #8
 800424c:	6013      	str	r3, [r2, #0]

  SPI1->CR1 |= SPI_CR1_MSTR; /* Master */
 800424e:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <drv_SPI_init+0x190>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2d      	ldr	r2, [pc, #180]	; (8004308 <drv_SPI_init+0x190>)
 8004254:	f043 0304 	orr.w	r3, r3, #4
 8004258:	6013      	str	r3, [r2, #0]


  SPI1->CR1 |= SPI_CR1_CPOL; /* CK to 1 when idle */
 800425a:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <drv_SPI_init+0x190>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <drv_SPI_init+0x190>)
 8004260:	f043 0302 	orr.w	r3, r3, #2
 8004264:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CPHA; /* Clock phase 1: The second clock transition is the first data capture edge */
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <drv_SPI_init+0x190>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a27      	ldr	r2, [pc, #156]	; (8004308 <drv_SPI_init+0x190>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6013      	str	r3, [r2, #0]

  SPI1->CR1 |= SPI_CR1_BR_2;
 8004272:	4b25      	ldr	r3, [pc, #148]	; (8004308 <drv_SPI_init+0x190>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a24      	ldr	r2, [pc, #144]	; (8004308 <drv_SPI_init+0x190>)
 8004278:	f043 0320 	orr.w	r3, r3, #32
 800427c:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_BR_1;
 800427e:	4b22      	ldr	r3, [pc, #136]	; (8004308 <drv_SPI_init+0x190>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a21      	ldr	r2, [pc, #132]	; (8004308 <drv_SPI_init+0x190>)
 8004284:	f043 0310 	orr.w	r3, r3, #16
 8004288:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_BR_0;
 800428a:	4b1f      	ldr	r3, [pc, #124]	; (8004308 <drv_SPI_init+0x190>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1e      	ldr	r2, [pc, #120]	; (8004308 <drv_SPI_init+0x190>)
 8004290:	f043 0308 	orr.w	r3, r3, #8
 8004294:	6013      	str	r3, [r2, #0]
  // this fucks up SPI1->CR1 |= SPI_CR1_LSBFIRST;
 /* 000: fPCLK/2 */
  /* 100: fPCLK/32 */
 // SPI1->CR2 |= SPI_CR2_FRXTH;   /* 1/4 (8 bit) */

  SPI1->CR2 |= (SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2 ); // | SPI_CR2_DS_3);
 8004296:	4b1c      	ldr	r3, [pc, #112]	; (8004308 <drv_SPI_init+0x190>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	4a1b      	ldr	r2, [pc, #108]	; (8004308 <drv_SPI_init+0x190>)
 800429c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042a0:	6053      	str	r3, [r2, #4]
  SPI1->CR2 &= ~(SPI_CR2_DS_3); /* 0111: 8-bit */
 80042a2:	4b19      	ldr	r3, [pc, #100]	; (8004308 <drv_SPI_init+0x190>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4a18      	ldr	r2, [pc, #96]	; (8004308 <drv_SPI_init+0x190>)
 80042a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ac:	6053      	str	r3, [r2, #4]
 /* If software attempts to write one of the âNot usedâ values, they are forced to the value â0111â
(8-bit) */

  ///* Tx buffer empty interrupt enable */

  SPI1->CR2 |= SPI_CR2_SSOE; /* 1: SS output is enabled in master mode and when the SPI interface is enabled. The SPI
 80042ae:	4b16      	ldr	r3, [pc, #88]	; (8004308 <drv_SPI_init+0x190>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4a15      	ldr	r2, [pc, #84]	; (8004308 <drv_SPI_init+0x190>)
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	6053      	str	r3, [r2, #4]
interface cannot work in a multimaster environment. */

  SPI1->CR1 |= SPI_CR1_SPE; /* SPI enable */
 80042ba:	4b13      	ldr	r3, [pc, #76]	; (8004308 <drv_SPI_init+0x190>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a12      	ldr	r2, [pc, #72]	; (8004308 <drv_SPI_init+0x190>)
 80042c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c4:	6013      	str	r3, [r2, #0]
 SPI1->CR2 |= SPI_CR2_RXNEIE;
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <drv_SPI_init+0x190>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <drv_SPI_init+0x190>)
 80042cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d0:	6053      	str	r3, [r2, #4]
 SPI1->CR2 |= SPI_CR2_TXEIE;
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <drv_SPI_init+0x190>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4a0c      	ldr	r2, [pc, #48]	; (8004308 <drv_SPI_init+0x190>)
 80042d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042dc:	6053      	str	r3, [r2, #4]
  //NVIC_SetPriority(SPI1_IRQn, 0);			// Set Priority to 1
  //NVIC_EnableIRQ(SPI1_IRQn);				// Enable interrupt of USART1 peripheral
}
 80042de:	bf00      	nop
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	200000b0 	.word	0x200000b0
 80042ec:	20000090 	.word	0x20000090
 80042f0:	200000e8 	.word	0x200000e8
 80042f4:	200000a0 	.word	0x200000a0
 80042f8:	080049c8 	.word	0x080049c8
 80042fc:	080049d0 	.word	0x080049d0
 8004300:	080049d8 	.word	0x080049d8
 8004304:	080049e0 	.word	0x080049e0
 8004308:	40013000 	.word	0x40013000

0800430c <drv_SPI_transmit_singleByte>:
{

}

uint8_t drv_SPI_transmit_singleByte(uint8_t u8Data)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
  drv_SPI_assertCS(false);
 8004316:	2000      	movs	r0, #0
 8004318:	f000 f830 	bl	800437c <drv_SPI_assertCS>

  drv_SPI_transmit(u8Data);
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f80e 	bl	8004340 <drv_SPI_transmit>


  uint8_t receivedData = (uint8_t)((SPI1->DR & 0xFF00) >> 8);
 8004324:	4b05      	ldr	r3, [pc, #20]	; (800433c <drv_SPI_transmit_singleByte+0x30>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	73fb      	strb	r3, [r7, #15]

  drv_SPI_assertCS(true);
 800432c:	2001      	movs	r0, #1
 800432e:	f000 f825 	bl	800437c <drv_SPI_assertCS>

  return receivedData;
 8004332:	7bfb      	ldrb	r3, [r7, #15]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40013000 	.word	0x40013000

08004340 <drv_SPI_transmit>:
  drv_SPI_assertCS(true);
}


static void drv_SPI_transmit(uint8_t u8data)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]

  while (!(SPI1->SR & SPI_SR_TXE)) {} // Wait for the transmit buffer to be empty
 800434a:	bf00      	nop
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <drv_SPI_transmit+0x38>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f9      	beq.n	800434c <drv_SPI_transmit+0xc>
  SPI1->DR = u8data;
 8004358:	4a07      	ldr	r2, [pc, #28]	; (8004378 <drv_SPI_transmit+0x38>)
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	60d3      	str	r3, [r2, #12]

    // Enable transmit buffer empty interrupt
  // SPI1->CR2 |= SPI_CR2_TXEIE;

  while (SPI1->SR & SPI_SR_BSY){} // Wait for the SPI peripheral to finish the transmission
 800435e:	bf00      	nop
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <drv_SPI_transmit+0x38>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f9      	bne.n	8004360 <drv_SPI_transmit+0x20>

}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40013000 	.word	0x40013000

0800437c <drv_SPI_assertCS>:


static void drv_SPI_assertCS(bool_t bValue)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	71fb      	strb	r3, [r7, #7]
  drv_GPIO_set_pin(GPIO_PORTA, bValue, SPI_CS_PIN);
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	2204      	movs	r2, #4
 800438a:	4619      	mov	r1, r3
 800438c:	2000      	movs	r0, #0
 800438e:	f7ff fd59 	bl	8003e44 <drv_GPIO_set_pin>
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <drv_SPI_getRxDataPtr>:
    SPI1->SR &= ~SPI_SR_OVR;
  }
}
*/
sRingbuf_t* drv_SPI_getRxDataPtr(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return &spiRxBuffer;
 80043a0:	4b02      	ldr	r3, [pc, #8]	; (80043ac <drv_SPI_getRxDataPtr+0x10>)
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	200000a0 	.word	0x200000a0

080043b0 <__NVIC_EnableIRQ>:
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	db0b      	blt.n	80043da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	f003 021f 	and.w	r2, r3, #31
 80043c8:	4907      	ldr	r1, [pc, #28]	; (80043e8 <__NVIC_EnableIRQ+0x38>)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	2001      	movs	r0, #1
 80043d2:	fa00 f202 	lsl.w	r2, r0, r2
 80043d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000e100 	.word	0xe000e100

080043ec <__NVIC_SetPriority>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	db0a      	blt.n	8004416 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	490c      	ldr	r1, [pc, #48]	; (8004438 <__NVIC_SetPriority+0x4c>)
 8004406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440a:	0112      	lsls	r2, r2, #4
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	440b      	add	r3, r1
 8004410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004414:	e00a      	b.n	800442c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	4908      	ldr	r1, [pc, #32]	; (800443c <__NVIC_SetPriority+0x50>)
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	3b04      	subs	r3, #4
 8004424:	0112      	lsls	r2, r2, #4
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	440b      	add	r3, r1
 800442a:	761a      	strb	r2, [r3, #24]
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	e000e100 	.word	0xe000e100
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <drv_uart_init>:
static uint8_t au8TxBuf[TX_BUFFER_SIZE];
static uint8_t au8RxBuf[RX_BUFFER_SIZE];

/* Public functions ----------------------------------------------------*/
void drv_uart_init(UART_init_t* pUARTInit)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  ringBuffer_init(&uartTxBuffer, au8TxBuf, TX_BUFFER_SIZE);
 8004448:	2210      	movs	r2, #16
 800444a:	493e      	ldr	r1, [pc, #248]	; (8004544 <drv_uart_init+0x104>)
 800444c:	483e      	ldr	r0, [pc, #248]	; (8004548 <drv_uart_init+0x108>)
 800444e:	f000 f96d 	bl	800472c <ringBuffer_init>
  ringBuffer_init(&uartRxBuffer, au8RxBuf, RX_BUFFER_SIZE);
 8004452:	2210      	movs	r2, #16
 8004454:	493d      	ldr	r1, [pc, #244]	; (800454c <drv_uart_init+0x10c>)
 8004456:	483e      	ldr	r0, [pc, #248]	; (8004550 <drv_uart_init+0x110>)
 8004458:	f000 f968 	bl	800472c <ringBuffer_init>

  RCC->APB2ENR |= RCC_APB2ENR_USART1EN; /* CPU1 USART1 clocks enable */
 800445c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800446a:	6613      	str	r3, [r2, #96]	; 0x60
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 800446c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004476:	f043 0302 	orr.w	r3, r3, #2
 800447a:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* https://www.st.com/resource/en/datasheet/stm32wb55cc.pdf  AF7  USART1 PB6 -> USART1_ TX PB7 -> USART1_ RX
  GPIOx_AFRL 0111: AF7*/
  GPIOB->AFR[0] |= (0x07 << GPIO_AFRL_AFSEL7_Pos);
 800447c:	4b35      	ldr	r3, [pc, #212]	; (8004554 <drv_uart_init+0x114>)
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4a34      	ldr	r2, [pc, #208]	; (8004554 <drv_uart_init+0x114>)
 8004482:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8004486:	6213      	str	r3, [r2, #32]
  GPIOB->AFR[0] |= (0x07 << GPIO_AFRL_AFSEL6_Pos);
 8004488:	4b32      	ldr	r3, [pc, #200]	; (8004554 <drv_uart_init+0x114>)
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4a31      	ldr	r2, [pc, #196]	; (8004554 <drv_uart_init+0x114>)
 800448e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004492:	6213      	str	r3, [r2, #32]

  GPIO_init_t USART_GPIO_PB5 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 8004494:	4a30      	ldr	r2, [pc, #192]	; (8004558 <drv_uart_init+0x118>)
 8004496:	f107 0310 	add.w	r3, r7, #16
 800449a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800449e:	6018      	str	r0, [r3, #0]
 80044a0:	3304      	adds	r3, #4
 80044a2:	8019      	strh	r1, [r3, #0]
			         .gpioSpeed = GPIO_SPEED_HIGH,
			         .gpioPort = GPIO_PORTB,
				 .gpioPuPd = GPIO_NO_PULL,
				 .u8pinNumber = 7                 };

  GPIO_init_t USART_GPIO_PB6 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 80044a4:	4a2d      	ldr	r2, [pc, #180]	; (800455c <drv_uart_init+0x11c>)
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044ae:	6018      	str	r0, [r3, #0]
 80044b0:	3304      	adds	r3, #4
 80044b2:	8019      	strh	r1, [r3, #0]
  			         .gpioSpeed = GPIO_SPEED_HIGH,
  			         .gpioPort = GPIO_PORTB,
  				 .gpioPuPd = GPIO_NO_PULL,
  			         .u8pinNumber = 6	          };

  drv_GPIO_init(&USART_GPIO_PB5);
 80044b4:	f107 0310 	add.w	r3, r7, #16
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fca6 	bl	8003e0a <drv_GPIO_init>
  drv_GPIO_init(&USART_GPIO_PB6);
 80044be:	f107 0308 	add.w	r3, r7, #8
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fca1 	bl	8003e0a <drv_GPIO_init>

  // Disable USART
   USART1->CR1 &= ~USART_CR1_UE;
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <drv_uart_init+0x120>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a24      	ldr	r2, [pc, #144]	; (8004560 <drv_uart_init+0x120>)
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	6013      	str	r3, [r2, #0]
   // Clear interrupt flags
    USART1->ICR = USART_ICR_TCCF;
 80044d4:	4b22      	ldr	r3, [pc, #136]	; (8004560 <drv_uart_init+0x120>)
 80044d6:	2240      	movs	r2, #64	; 0x40
 80044d8:	621a      	str	r2, [r3, #32]

   /* In asynchronous mode, the following bits must be kept cleared: LINEN and CLKEN bits in the USART_CR2 register */
  USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80044da:	4b21      	ldr	r3, [pc, #132]	; (8004560 <drv_uart_init+0x120>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4a20      	ldr	r2, [pc, #128]	; (8004560 <drv_uart_init+0x120>)
 80044e0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80044e4:	6053      	str	r3, [r2, #4]
  USART1->CR3 &= ~((USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e6:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <drv_uart_init+0x120>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <drv_uart_init+0x120>)
 80044ec:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80044f0:	6093      	str	r3, [r2, #8]

  set_UART_stopBits(pUARTInit);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f836 	bl	8004564 <set_UART_stopBits>
  set_UART_wordLength(pUARTInit);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f85b 	bl	80045b4 <set_UART_wordLength>
  set_UART_baudRate(pUARTInit);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f87e 	bl	8004600 <set_UART_baudRate>
  set_UART_parity(pUARTInit);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8a5 	bl	8004654 <set_UART_parity>

  /* Oversampling */
  USART1->CR1 &= ~USART_CR1_OVER8; /* 16 */
 800450a:	4b15      	ldr	r3, [pc, #84]	; (8004560 <drv_uart_init+0x120>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a14      	ldr	r2, [pc, #80]	; (8004560 <drv_uart_init+0x120>)
 8004510:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004514:	6013      	str	r3, [r2, #0]

  /* CR2 Bit 19 MSBFIRST: Most significant bit first */
  // Enable USART1, transmitter, and receiver
  USART1->CR1 |= USART_CR1_TE | USART_CR1_UE | USART_CR1_RE  | USART_CR1_TCIE;
 8004516:	4b12      	ldr	r3, [pc, #72]	; (8004560 <drv_uart_init+0x120>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a11      	ldr	r2, [pc, #68]	; (8004560 <drv_uart_init+0x120>)
 800451c:	f043 034d 	orr.w	r3, r3, #77	; 0x4d
 8004520:	6013      	str	r3, [r2, #0]

  // Clear the TXE interrupt enable bit
  USART1->CR1 &= ~(USART_CR1_TXEIE | USART_CR1_TCIE); /* Clear TXEIE and TC interrupts */
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <drv_uart_init+0x120>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a0e      	ldr	r2, [pc, #56]	; (8004560 <drv_uart_init+0x120>)
 8004528:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800452c:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART1_IRQn, 0);			// Set Priority to 1
 800452e:	2100      	movs	r1, #0
 8004530:	2024      	movs	r0, #36	; 0x24
 8004532:	f7ff ff5b 	bl	80043ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);				// Enable interrupt of USART1 peripheral
 8004536:	2024      	movs	r0, #36	; 0x24
 8004538:	f7ff ff3a 	bl	80043b0 <__NVIC_EnableIRQ>
}
 800453c:	bf00      	nop
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20000140 	.word	0x20000140
 8004548:	20000120 	.word	0x20000120
 800454c:	20000150 	.word	0x20000150
 8004550:	20000130 	.word	0x20000130
 8004554:	48000400 	.word	0x48000400
 8004558:	080049e8 	.word	0x080049e8
 800455c:	080049f0 	.word	0x080049f0
 8004560:	40013800 	.word	0x40013800

08004564 <set_UART_stopBits>:
}


/* Private functions ---------------------------------------------------*/
static void set_UART_stopBits(UART_init_t* pUARTInit)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartStopBits)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	785b      	ldrb	r3, [r3, #1]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <set_UART_stopBits+0x16>
 8004574:	2b01      	cmp	r3, #1
 8004576:	d00d      	beq.n	8004594 <set_UART_stopBits+0x30>

    case UART_STOP_BITS_2:
      USART1->CR2 |= (0x2UL << USART_CR2_STOP_Pos) ;
      break;

    default: break;
 8004578:	e013      	b.n	80045a2 <set_UART_stopBits+0x3e>
      USART1->CR2 &= ~(0x01UL << USART_CR2_STOP_Pos);
 800457a:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <set_UART_stopBits+0x4c>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4a0c      	ldr	r2, [pc, #48]	; (80045b0 <set_UART_stopBits+0x4c>)
 8004580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004584:	6053      	str	r3, [r2, #4]
      USART1->CR2 &= ~(0x01UL << (USART_CR2_STOP_Pos + 1U));
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <set_UART_stopBits+0x4c>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <set_UART_stopBits+0x4c>)
 800458c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004590:	6053      	str	r3, [r2, #4]
      break;
 8004592:	e006      	b.n	80045a2 <set_UART_stopBits+0x3e>
      USART1->CR2 |= (0x2UL << USART_CR2_STOP_Pos) ;
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <set_UART_stopBits+0x4c>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a05      	ldr	r2, [pc, #20]	; (80045b0 <set_UART_stopBits+0x4c>)
 800459a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800459e:	6053      	str	r3, [r2, #4]
      break;
 80045a0:	bf00      	nop
  }
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40013800 	.word	0x40013800

080045b4 <set_UART_wordLength>:

static void set_UART_wordLength(UART_init_t* pUARTInit)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartWordLength)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	78db      	ldrb	r3, [r3, #3]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d011      	beq.n	80045e8 <set_UART_wordLength+0x34>
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d011      	beq.n	80045ec <set_UART_wordLength+0x38>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d000      	beq.n	80045ce <set_UART_wordLength+0x1a>
       USART1->CR1 &= ~USART_CR1_M0;
     } break;

     case UART_WORD_LEGTH_7_BITS: break;
     case UART_WORD_LEGTH_9_BITS: break;
     default: break;
 80045cc:	e00f      	b.n	80045ee <set_UART_wordLength+0x3a>
       USART1->CR1 &= ~USART_CR1_M1;
 80045ce:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <set_UART_wordLength+0x48>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <set_UART_wordLength+0x48>)
 80045d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d8:	6013      	str	r3, [r2, #0]
       USART1->CR1 &= ~USART_CR1_M0;
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <set_UART_wordLength+0x48>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a07      	ldr	r2, [pc, #28]	; (80045fc <set_UART_wordLength+0x48>)
 80045e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e4:	6013      	str	r3, [r2, #0]
     } break;
 80045e6:	e002      	b.n	80045ee <set_UART_wordLength+0x3a>
     case UART_WORD_LEGTH_7_BITS: break;
 80045e8:	bf00      	nop
 80045ea:	e000      	b.n	80045ee <set_UART_wordLength+0x3a>
     case UART_WORD_LEGTH_9_BITS: break;
 80045ec:	bf00      	nop
   }
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40013800 	.word	0x40013800

08004600 <set_UART_baudRate>:

static void set_UART_baudRate(UART_init_t* pUARTInit)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t baudValue = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  switch (pUARTInit->uartBaud)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d00a      	beq.n	800462a <set_UART_baudRate+0x2a>
 8004614:	2b02      	cmp	r3, #2
 8004616:	d00e      	beq.n	8004636 <set_UART_baudRate+0x36>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d000      	beq.n	800461e <set_UART_baudRate+0x1e>
  {
    case UART_BAUD_9600:  { baudValue = calculateBaudRateValue(9600);  } break;
    case UART_BAUD_38400: { baudValue = calculateBaudRateValue(38400); } break;
    case UART_BAUD_115200: { baudValue = calculateBaudRateValue(115200);} break;
    default: break;
 800461c:	e011      	b.n	8004642 <set_UART_baudRate+0x42>
    case UART_BAUD_9600:  { baudValue = calculateBaudRateValue(9600);  } break;
 800461e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8004622:	f000 f847 	bl	80046b4 <calculateBaudRateValue>
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	e00b      	b.n	8004642 <set_UART_baudRate+0x42>
    case UART_BAUD_38400: { baudValue = calculateBaudRateValue(38400); } break;
 800462a:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 800462e:	f000 f841 	bl	80046b4 <calculateBaudRateValue>
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	e005      	b.n	8004642 <set_UART_baudRate+0x42>
    case UART_BAUD_115200: { baudValue = calculateBaudRateValue(115200);} break;
 8004636:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800463a:	f000 f83b 	bl	80046b4 <calculateBaudRateValue>
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	bf00      	nop
  }
   USART1->BRR = baudValue;
 8004642:	4a03      	ldr	r2, [pc, #12]	; (8004650 <set_UART_baudRate+0x50>)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	60d3      	str	r3, [r2, #12]
}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40013800 	.word	0x40013800

08004654 <set_UART_parity>:

static void set_UART_parity(UART_init_t* pUARTInit)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartParity)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	789b      	ldrb	r3, [r3, #2]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d00b      	beq.n	800467c <set_UART_parity+0x28>
 8004664:	2b02      	cmp	r3, #2
 8004666:	d016      	beq.n	8004696 <set_UART_parity+0x42>
 8004668:	2b00      	cmp	r3, #0
 800466a:	d000      	beq.n	800466e <set_UART_parity+0x1a>
      USART1->CR1 |= USART_CR1_PCE;
      USART1->CR1 &= ~USART_CR1_PS;
    } break;

    case UART_PARITY_ODD: { USART1->CR1 |= USART_CR1_PCE | USART_CR1_PS; } break;
    default: break;
 800466c:	e01a      	b.n	80046a4 <set_UART_parity+0x50>
    case UART_PARITY_NONE: { USART1->CR1 &= ~USART_CR1_PCE; } break;
 800466e:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <set_UART_parity+0x5c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a0f      	ldr	r2, [pc, #60]	; (80046b0 <set_UART_parity+0x5c>)
 8004674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e013      	b.n	80046a4 <set_UART_parity+0x50>
      USART1->CR1 |= USART_CR1_PCE;
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <set_UART_parity+0x5c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a0b      	ldr	r2, [pc, #44]	; (80046b0 <set_UART_parity+0x5c>)
 8004682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004686:	6013      	str	r3, [r2, #0]
      USART1->CR1 &= ~USART_CR1_PS;
 8004688:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <set_UART_parity+0x5c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <set_UART_parity+0x5c>)
 800468e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004692:	6013      	str	r3, [r2, #0]
    } break;
 8004694:	e006      	b.n	80046a4 <set_UART_parity+0x50>
    case UART_PARITY_ODD: { USART1->CR1 |= USART_CR1_PCE | USART_CR1_PS; } break;
 8004696:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <set_UART_parity+0x5c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a05      	ldr	r2, [pc, #20]	; (80046b0 <set_UART_parity+0x5c>)
 800469c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	bf00      	nop
  }
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	40013800 	.word	0x40013800

080046b4 <calculateBaudRateValue>:

int((104.1875 * 16) + 0.5) = 1667 = 0x683

Personally I've been using BRR = APBCLK / BAUD for 13+ years, it is simpler to explain/compute. */
static uint32_t calculateBaudRateValue(uint32_t u32baudrate)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t APBCLK = 64000000;
 80046bc:	4b07      	ldr	r3, [pc, #28]	; (80046dc <calculateBaudRateValue+0x28>)
 80046be:	60fb      	str	r3, [r7, #12]
  uint32_t u32res = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60bb      	str	r3, [r7, #8]

  u32res = (APBCLK / u32baudrate );
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	60bb      	str	r3, [r7, #8]

  return u32res;
 80046ce:	68bb      	ldr	r3, [r7, #8]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	03d09000 	.word	0x03d09000

080046e0 <drv_uart_IRQHandler>:
transmission corrupts the data on the TX pin as the baud rate counters get frozen. The
current data being transmitted are then lost.
An idle frame is sent when the TE bit is enabled. */

void drv_uart_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  if (USART1->ISR & USART_ISR_TC) /* If a transfer is complete, byte by byte */
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <drv_uart_IRQHandler+0x44>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d017      	beq.n	8004720 <drv_uart_IRQHandler+0x40>
  {
    if (uartTxBuffer.u16elementsInBuffer > 0) /* Do we have anything to send */
 80046f0:	4b0d      	ldr	r3, [pc, #52]	; (8004728 <drv_uart_IRQHandler+0x48>)
 80046f2:	891b      	ldrh	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <drv_uart_IRQHandler+0x34>
    {
      USART1->TDR = ringBuffer_get(&uartTxBuffer);
 80046f8:	480b      	ldr	r0, [pc, #44]	; (8004728 <drv_uart_IRQHandler+0x48>)
 80046fa:	f000 f836 	bl	800476a <ringBuffer_get>
 80046fe:	4603      	mov	r3, r0
 8004700:	461a      	mov	r2, r3
 8004702:	4b08      	ldr	r3, [pc, #32]	; (8004724 <drv_uart_IRQHandler+0x44>)
 8004704:	629a      	str	r2, [r3, #40]	; 0x28
      while(!(USART1->ISR & USART_ISR_TC));  /* Wait here until the transfer is complete */
 8004706:	bf00      	nop
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <drv_uart_IRQHandler+0x44>)
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f9      	beq.n	8004708 <drv_uart_IRQHandler+0x28>
    }

    USART1->CR1 &= ~(USART_CR1_TXEIE); /* Disable the transmission buffer empty interrupt, we will enable this once we have something to send */
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <drv_uart_IRQHandler+0x44>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a02      	ldr	r2, [pc, #8]	; (8004724 <drv_uart_IRQHandler+0x44>)
 800471a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471e:	6013      	str	r3, [r2, #0]
  }
}
 8004720:	bf00      	nop
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40013800 	.word	0x40013800
 8004728:	20000120 	.word	0x20000120

0800472c <ringBuffer_init>:

/* Global variables ---------------------------------------------------*/

/* Public functions ----------------------------------------------------*/
void ringBuffer_init(sRingbuf_t* pRingBuffer, uint8_t* pu8buffer, uint16_t u16bufferSizeBytes)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	4613      	mov	r3, r2
 8004738:	80fb      	strh	r3, [r7, #6]
  pRingBuffer->au8buffer 	    = &pu8buffer[0];
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	601a      	str	r2, [r3, #0]
  pRingBuffer->u16bufferMaxCapacity = u16bufferSizeBytes;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	88fa      	ldrh	r2, [r7, #6]
 8004744:	815a      	strh	r2, [r3, #10]
  pRingBuffer->u16elementsInBuffer  = 0;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	811a      	strh	r2, [r3, #8]
  pRingBuffer->u16getIndex  	    = 0;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	80da      	strh	r2, [r3, #6]
  pRingBuffer->u16putIndex          = 0;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	809a      	strh	r2, [r3, #4]
  pRingBuffer->eRingBufStatus       = RINGBUF_EMPTY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	731a      	strb	r2, [r3, #12]
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <ringBuffer_get>:
  return bStatus;
}


uint8_t ringBuffer_get(sRingbuf_t* pRingBuffer)
{
 800476a:	b480      	push	{r7}
 800476c:	b085      	sub	sp, #20
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004772:	b672      	cpsid	i
  __disable_irq();

  uint8_t u8returnValue = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	73fb      	strb	r3, [r7, #15]

  if(    (pRingBuffer->eRingBufStatus != RINGBUF_EMPTY        )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	7b1b      	ldrb	r3, [r3, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d026      	beq.n	80047ce <ringBuffer_get+0x64>
      && (pRingBuffer->u16getIndex != pRingBuffer->u16putIndex)  )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	88da      	ldrh	r2, [r3, #6]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	889b      	ldrh	r3, [r3, #4]
 8004788:	429a      	cmp	r2, r3
 800478a:	d020      	beq.n	80047ce <ringBuffer_get+0x64>
  {
    u8returnValue = pRingBuffer->au8buffer[pRingBuffer->u16getIndex];
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	88d2      	ldrh	r2, [r2, #6]
 8004794:	4413      	add	r3, r2
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	73fb      	strb	r3, [r7, #15]
    pRingBuffer->au8buffer[pRingBuffer->u16getIndex] = 0;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	88d2      	ldrh	r2, [r2, #6]
 80047a2:	4413      	add	r3, r2
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
    pRingBuffer->u16elementsInBuffer--;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	891b      	ldrh	r3, [r3, #8]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	811a      	strh	r2, [r3, #8]
    pRingBuffer->u16getIndex = (pRingBuffer->u16getIndex + 1) % (pRingBuffer->u16bufferMaxCapacity);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	88db      	ldrh	r3, [r3, #6]
 80047b8:	3301      	adds	r3, #1
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	8952      	ldrh	r2, [r2, #10]
 80047be:	fb93 f1f2 	sdiv	r1, r3, r2
 80047c2:	fb02 f201 	mul.w	r2, r2, r1
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	80da      	strh	r2, [r3, #6]
  __ASM volatile ("cpsie i" : : : "memory");
 80047ce:	b662      	cpsie	i

  }
  __enable_irq();
  return u8returnValue;
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <simple_fsm_init>:
/* Global variables ---------------------------------------------------*/
static const state_table_t* states;

/* Public functions ----------------------------------------------------*/
void simple_fsm_init(fsm_t* pfsm, uint8_t u8sizeBytes, const state_table_t* pstates)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	460b      	mov	r3, r1
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	72fb      	strb	r3, [r7, #11]
  pfsm->u8statesCount = u8sizeBytes;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	7afa      	ldrb	r2, [r7, #11]
 80047f2:	721a      	strb	r2, [r3, #8]
  states = pstates;
 80047f4:	4a04      	ldr	r2, [pc, #16]	; (8004808 <simple_fsm_init+0x28>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6013      	str	r3, [r2, #0]
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000160 	.word	0x20000160

0800480c <simpleTimer_reset_milliSeconds>:
    timer->eTimerStatus = STS_RUNNING;
  }
}

void simpleTimer_reset_milliSeconds(sTimer_t* timer, uint16_t u16resetValue)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	807b      	strh	r3, [r7, #2]
  if(timer->eTimerStatus != STS_RUNNING )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	791b      	ldrb	r3, [r3, #4]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d00d      	beq.n	800483c <simpleTimer_reset_milliSeconds+0x30>
  {
    timer->u32timeOfReset = simpleTimer_getMilliseconds();
 8004820:	f000 f878 	bl	8004914 <simpleTimer_getMilliseconds>
 8004824:	4602      	mov	r2, r0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]
    timer->u16resetValue = u16resetValue;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	887a      	ldrh	r2, [r7, #2]
 800482e:	80da      	strh	r2, [r3, #6]
    timer->bIsMillisecondsTimer = true;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	721a      	strb	r2, [r3, #8]
    timer->eTimerStatus = STS_RUNNING;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	711a      	strb	r2, [r3, #4]
  }
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <simpleTimer_timeout>:


bool_t simpleTimer_timeout(sTimer_t* timer)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  bool_t bTimedOut = false;
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]

  if(timer->bIsMillisecondsTimer)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	7a1b      	ldrb	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d012      	beq.n	800487e <simpleTimer_timeout+0x3a>
  {
    if(    ( (timer->u32timeOfReset + timer->u16resetValue) < u32currentTimeMilliseconds )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	88d2      	ldrh	r2, [r2, #6]
 8004860:	441a      	add	r2, r3
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <simpleTimer_timeout+0x6c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d21b      	bcs.n	80048a2 <simpleTimer_timeout+0x5e>
        && (timer->eTimerStatus == STS_RUNNING)                                             )
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	791b      	ldrb	r3, [r3, #4]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d117      	bne.n	80048a2 <simpleTimer_timeout+0x5e>
    {
      bTimedOut = true;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
      timer->eTimerStatus = STS_TIMED_OUT;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	711a      	strb	r2, [r3, #4]
 800487c:	e011      	b.n	80048a2 <simpleTimer_timeout+0x5e>
    }
  }
  else
  {
    if(    ( (timer->u32timeOfReset + timer->u16resetValue) < u32currentTimeSeconds)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	88d2      	ldrh	r2, [r2, #6]
 8004886:	441a      	add	r2, r3
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <simpleTimer_timeout+0x70>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d208      	bcs.n	80048a2 <simpleTimer_timeout+0x5e>
	&& (timer->eTimerStatus == STS_RUNNING)                                       )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	791b      	ldrb	r3, [r3, #4]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d104      	bne.n	80048a2 <simpleTimer_timeout+0x5e>
    {
      bTimedOut = true;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
      timer->eTimerStatus = STS_TIMED_OUT;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	711a      	strb	r2, [r3, #4]
    }
  }
  return bTimedOut;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	20000170 	.word	0x20000170
 80048b4:	2000016c 	.word	0x2000016c

080048b8 <simpleTimer_IRQHandler>:

/* Public functions ----------------------------------------------------*/


void simpleTimer_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM17)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0f      	ldr	r2, [pc, #60]	; (8004904 <simpleTimer_IRQHandler+0x4c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d116      	bne.n	80048f8 <simpleTimer_IRQHandler+0x40>
  {
    ++u32elapsedTicks;
 80048ca:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <simpleTimer_IRQHandler+0x50>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3301      	adds	r3, #1
 80048d0:	4a0d      	ldr	r2, [pc, #52]	; (8004908 <simpleTimer_IRQHandler+0x50>)
 80048d2:	6013      	str	r3, [r2, #0]

    if((u32elapsedTicks % 1000) == 0)
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <simpleTimer_IRQHandler+0x50>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <simpleTimer_IRQHandler+0x54>)
 80048da:	fba3 1302 	umull	r1, r3, r3, r2
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <simpleTimer_IRQHandler+0x40>
    {
      ++u32elapsedSeconds;
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <simpleTimer_IRQHandler+0x58>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3301      	adds	r3, #1
 80048f4:	4a06      	ldr	r2, [pc, #24]	; (8004910 <simpleTimer_IRQHandler+0x58>)
 80048f6:	6013      	str	r3, [r2, #0]
    }
  }
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40014800 	.word	0x40014800
 8004908:	20000164 	.word	0x20000164
 800490c:	10624dd3 	.word	0x10624dd3
 8004910:	20000168 	.word	0x20000168

08004914 <simpleTimer_getMilliseconds>:
{
  return u32elapsedSeconds;
}

uint32_t simpleTimer_getMilliseconds(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return u32elapsedTicks;
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <simpleTimer_getMilliseconds+0x14>)
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000164 	.word	0x20000164

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4e0d      	ldr	r6, [pc, #52]	; (8004964 <__libc_init_array+0x38>)
 8004930:	4c0d      	ldr	r4, [pc, #52]	; (8004968 <__libc_init_array+0x3c>)
 8004932:	1ba4      	subs	r4, r4, r6
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	2500      	movs	r5, #0
 8004938:	42a5      	cmp	r5, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	4e0b      	ldr	r6, [pc, #44]	; (800496c <__libc_init_array+0x40>)
 800493e:	4c0c      	ldr	r4, [pc, #48]	; (8004970 <__libc_init_array+0x44>)
 8004940:	f000 f820 	bl	8004984 <_init>
 8004944:	1ba4      	subs	r4, r4, r6
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	2500      	movs	r5, #0
 800494a:	42a5      	cmp	r5, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004954:	4798      	blx	r3
 8004956:	3501      	adds	r5, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800495e:	4798      	blx	r3
 8004960:	3501      	adds	r5, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	08004ac8 	.word	0x08004ac8
 8004968:	08004ac8 	.word	0x08004ac8
 800496c:	08004ac8 	.word	0x08004ac8
 8004970:	08004acc 	.word	0x08004acc

08004974 <memset>:
 8004974:	4402      	add	r2, r0
 8004976:	4603      	mov	r3, r0
 8004978:	4293      	cmp	r3, r2
 800497a:	d100      	bne.n	800497e <memset+0xa>
 800497c:	4770      	bx	lr
 800497e:	f803 1b01 	strb.w	r1, [r3], #1
 8004982:	e7f9      	b.n	8004978 <memset+0x4>

08004984 <_init>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr

08004990 <_fini>:
 8004990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004992:	bf00      	nop
 8004994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004996:	bc08      	pop	{r3}
 8004998:	469e      	mov	lr, r3
 800499a:	4770      	bx	lr
