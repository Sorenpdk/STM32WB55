
STM32WB55.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000490c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000004  08004b80  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000404  20000014  08004b90  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000418  08004b90  00020418  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001df09  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003d0e  00000000  00000000  0003df4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ae8  00000000  00000000  00041c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001920  00000000  00000000  00043748  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002515d  00000000  00000000  00045068  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013d32  00000000  00000000  0006a1c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e4737  00000000  00000000  0007def7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0016262e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006eb8  00000000  00000000  001626ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08004a30 	.word	0x08004a30

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08004a30 	.word	0x08004a30

0800017c <acc_init>:
The content of the registers that are loaded at boot should not be changed. They contain the factory calibration
values. Their content is automatically restored when the device is powered up. */
static void configure(void);

void acc_init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  configure();
 8000180:	f000 f81c 	bl	80001bc <configure>
}
 8000184:	bf00      	nop
 8000186:	bd80      	pop	{r7, pc}

08000188 <acc_getWhoAmI>:

static uint8_t u8whoami;
void acc_getWhoAmI(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
  uint8_t u8cmd[1] = {(READ_CMD_BIT_MASK | WHO_AM_I_RO)};
 800018e:	238f      	movs	r3, #143	; 0x8f
 8000190:	713b      	strb	r3, [r7, #4]
  drv_SPI_assertCS(false);
 8000192:	2000      	movs	r0, #0
 8000194:	f004 f94a 	bl	800442c <drv_SPI_assertCS>

  drv_SPI_transmit_nBytes(u8cmd, sizeof(u8cmd));
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	2101      	movs	r1, #1
 800019c:	4618      	mov	r0, r3
 800019e:	f004 f8cf 	bl	8004340 <drv_SPI_transmit_nBytes>
  drv_SPI_receive_nBytes(&u8whoami, 1);
 80001a2:	2101      	movs	r1, #1
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <acc_getWhoAmI+0x30>)
 80001a6:	f004 f90d 	bl	80043c4 <drv_SPI_receive_nBytes>


  drv_SPI_assertCS(true);
 80001aa:	2001      	movs	r0, #1
 80001ac:	f004 f93e 	bl	800442c <drv_SPI_assertCS>
}
 80001b0:	bf00      	nop
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	20000030 	.word	0x20000030

080001bc <configure>:


static void configure(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
  uint8_t u8cmd[2] = {CTRL1_RW, 0x9A};
 80001c2:	4b1f      	ldr	r3, [pc, #124]	; (8000240 <configure+0x84>)
 80001c4:	881b      	ldrh	r3, [r3, #0]
 80001c6:	80bb      	strh	r3, [r7, #4]

  drv_SPI_assertCS(0);
 80001c8:	2000      	movs	r0, #0
 80001ca:	f004 f92f 	bl	800442c <drv_SPI_assertCS>

  drv_SPI_transmit_nBytes(u8cmd, sizeof(u8cmd));
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2102      	movs	r1, #2
 80001d2:	4618      	mov	r0, r3
 80001d4:	f004 f8b4 	bl	8004340 <drv_SPI_transmit_nBytes>

  drv_SPI_assertCS(1);
 80001d8:	2001      	movs	r0, #1
 80001da:	f004 f927 	bl	800442c <drv_SPI_assertCS>




   u8cmd[0] = CTRL2_RW;
 80001de:	2321      	movs	r3, #33	; 0x21
 80001e0:	713b      	strb	r3, [r7, #4]
   u8cmd[1] = 0x16;
 80001e2:	2316      	movs	r3, #22
 80001e4:	717b      	strb	r3, [r7, #5]

   drv_SPI_assertCS(0);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f004 f920 	bl	800442c <drv_SPI_assertCS>

   drv_SPI_transmit_nBytes(u8cmd, sizeof(u8cmd));
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2102      	movs	r1, #2
 80001f0:	4618      	mov	r0, r3
 80001f2:	f004 f8a5 	bl	8004340 <drv_SPI_transmit_nBytes>

   drv_SPI_assertCS(1);
 80001f6:	2001      	movs	r0, #1
 80001f8:	f004 f918 	bl	800442c <drv_SPI_assertCS>



   u8cmd[0] = 0x2E;
 80001fc:	232e      	movs	r3, #46	; 0x2e
 80001fe:	713b      	strb	r3, [r7, #4]
   u8cmd[1] = 0;
 8000200:	2300      	movs	r3, #0
 8000202:	717b      	strb	r3, [r7, #5]

   drv_SPI_assertCS(0);
 8000204:	2000      	movs	r0, #0
 8000206:	f004 f911 	bl	800442c <drv_SPI_assertCS>

   drv_SPI_transmit_nBytes(u8cmd, sizeof(u8cmd));
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	2102      	movs	r1, #2
 800020e:	4618      	mov	r0, r3
 8000210:	f004 f896 	bl	8004340 <drv_SPI_transmit_nBytes>

   drv_SPI_assertCS(1);
 8000214:	2001      	movs	r0, #1
 8000216:	f004 f909 	bl	800442c <drv_SPI_assertCS>


   u8cmd[0] = CTRL3_RW;
 800021a:	2322      	movs	r3, #34	; 0x22
 800021c:	713b      	strb	r3, [r7, #4]
     u8cmd[1] = 0x03;
 800021e:	2303      	movs	r3, #3
 8000220:	717b      	strb	r3, [r7, #5]

     drv_SPI_assertCS(0);
 8000222:	2000      	movs	r0, #0
 8000224:	f004 f902 	bl	800442c <drv_SPI_assertCS>

     drv_SPI_transmit_nBytes(u8cmd, sizeof(u8cmd));
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2102      	movs	r1, #2
 800022c:	4618      	mov	r0, r3
 800022e:	f004 f887 	bl	8004340 <drv_SPI_transmit_nBytes>

     drv_SPI_assertCS(1);
 8000232:	2001      	movs	r0, #1
 8000234:	f004 f8fa 	bl	800442c <drv_SPI_assertCS>
}
 8000238:	bf00      	nop
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	08004a48 	.word	0x08004a48

08000244 <acc_getTemperature>:

/* Private function prototypes ----------------------------------------*/
static uint8_t u8tempHigh;
static uint8_t u8tempLow;
uint16_t acc_getTemperature(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
  uint8_t u8cmd[2] = {0};
 800024a:	2300      	movs	r3, #0
 800024c:	80bb      	strh	r3, [r7, #4]
  u8cmd[0] = CTRL3_RW;
 800024e:	2322      	movs	r3, #34	; 0x22
 8000250:	713b      	strb	r3, [r7, #4]
   u8cmd[1] = 0x03;
 8000252:	2303      	movs	r3, #3
 8000254:	717b      	strb	r3, [r7, #5]

   drv_SPI_assertCS(0);
 8000256:	2000      	movs	r0, #0
 8000258:	f004 f8e8 	bl	800442c <drv_SPI_assertCS>

   drv_SPI_transmit_nBytes(u8cmd, sizeof(u8cmd));
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2102      	movs	r1, #2
 8000260:	4618      	mov	r0, r3
 8000262:	f004 f86d 	bl	8004340 <drv_SPI_transmit_nBytes>

   drv_SPI_assertCS(1);
 8000266:	2001      	movs	r0, #1
 8000268:	f004 f8e0 	bl	800442c <drv_SPI_assertCS>



   u8cmd[0] = (READ_CMD_BIT_MASK | OUT_X_L_RO);
 800026c:	23a8      	movs	r3, #168	; 0xa8
 800026e:	713b      	strb	r3, [r7, #4]
   drv_SPI_assertCS(0);
 8000270:	2000      	movs	r0, #0
 8000272:	f004 f8db 	bl	800442c <drv_SPI_assertCS>

   drv_SPI_transmit_nBytes(u8cmd, 1);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2101      	movs	r1, #1
 800027a:	4618      	mov	r0, r3
 800027c:	f004 f860 	bl	8004340 <drv_SPI_transmit_nBytes>
   drv_SPI_receive_nBytes(&u8tempHigh, 1);
 8000280:	2101      	movs	r1, #1
 8000282:	480e      	ldr	r0, [pc, #56]	; (80002bc <acc_getTemperature+0x78>)
 8000284:	f004 f89e 	bl	80043c4 <drv_SPI_receive_nBytes>

   drv_SPI_assertCS(1);
 8000288:	2001      	movs	r0, #1
 800028a:	f004 f8cf 	bl	800442c <drv_SPI_assertCS>

      u8cmd[0] = (READ_CMD_BIT_MASK | OUT_X_H_RO);
 800028e:	23a9      	movs	r3, #169	; 0xa9
 8000290:	713b      	strb	r3, [r7, #4]

      drv_SPI_assertCS(0);
 8000292:	2000      	movs	r0, #0
 8000294:	f004 f8ca 	bl	800442c <drv_SPI_assertCS>

      drv_SPI_transmit_nBytes(u8cmd, 1);
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2101      	movs	r1, #1
 800029c:	4618      	mov	r0, r3
 800029e:	f004 f84f 	bl	8004340 <drv_SPI_transmit_nBytes>
      drv_SPI_receive_nBytes(&u8tempHigh, 1);
 80002a2:	2101      	movs	r1, #1
 80002a4:	4805      	ldr	r0, [pc, #20]	; (80002bc <acc_getTemperature+0x78>)
 80002a6:	f004 f88d 	bl	80043c4 <drv_SPI_receive_nBytes>

      drv_SPI_assertCS(1);
 80002aa:	2001      	movs	r0, #1
 80002ac:	f004 f8be 	bl	800442c <drv_SPI_assertCS>

    return 1;
 80002b0:	2301      	movs	r3, #1
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000031 	.word	0x20000031

080002c0 <DWT_Delay_Init>:
  {Third, entry_state_handler3, action_state_handler3, exit_state_handler3},
};


uint32_t DWT_Delay_Init(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80002c4:	4b14      	ldr	r3, [pc, #80]	; (8000318 <DWT_Delay_Init+0x58>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a13      	ldr	r2, [pc, #76]	; (8000318 <DWT_Delay_Init+0x58>)
 80002ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80002ce:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <DWT_Delay_Init+0x58>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4a10      	ldr	r2, [pc, #64]	; (8000318 <DWT_Delay_Init+0x58>)
 80002d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002da:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <DWT_Delay_Init+0x5c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <DWT_Delay_Init+0x5c>)
 80002e2:	f023 0301 	bic.w	r3, r3, #1
 80002e6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <DWT_Delay_Init+0x5c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a0b      	ldr	r2, [pc, #44]	; (800031c <DWT_Delay_Init+0x5c>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <DWT_Delay_Init+0x5c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80002fa:	bf00      	nop
    __ASM volatile ("NOP");
 80002fc:	bf00      	nop
    __ASM volatile ("NOP");
 80002fe:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <DWT_Delay_Init+0x5c>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000308:	2300      	movs	r3, #0
 800030a:	e000      	b.n	800030e <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 800030c:	2301      	movs	r3, #1
    }
}
 800030e:	4618      	mov	r0, r3
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	e000edf0 	.word	0xe000edf0
 800031c:	e0001000 	.word	0xe0001000

08000320 <app_main_init>:
  * @retval none
  */


void app_main_init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
  simpleTimer_reset_milliSeconds(&ledONTimer, ONTime);
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <app_main_init+0x68>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	4619      	mov	r1, r3
 800032c:	4817      	ldr	r0, [pc, #92]	; (800038c <app_main_init+0x6c>)
 800032e:	f004 fac3 	bl	80048b8 <simpleTimer_reset_milliSeconds>
  ringBuffer_init(&ringbuf, au8buffer, BUFFER_SIZE);
 8000332:	2210      	movs	r2, #16
 8000334:	4916      	ldr	r1, [pc, #88]	; (8000390 <app_main_init+0x70>)
 8000336:	4817      	ldr	r0, [pc, #92]	; (8000394 <app_main_init+0x74>)
 8000338:	f004 fa4e 	bl	80047d8 <ringBuffer_init>
  simple_fsm_init(&myfsm, sizeof(states)/sizeof(states[0]), states);
 800033c:	4a16      	ldr	r2, [pc, #88]	; (8000398 <app_main_init+0x78>)
 800033e:	2103      	movs	r1, #3
 8000340:	4816      	ldr	r0, [pc, #88]	; (800039c <app_main_init+0x7c>)
 8000342:	f004 faa3 	bl	800488c <simple_fsm_init>

  DWT_Delay_Init();
 8000346:	f7ff ffbb 	bl	80002c0 <DWT_Delay_Init>
  SystemCoreClockUpdate();
 800034a:	f000 fcc1 	bl	8000cd0 <SystemCoreClockUpdate>

  UART_init_t UART1_Init = { .uartBaud = UART_BAUD_115200,
 800034e:	2302      	movs	r3, #2
 8000350:	713b      	strb	r3, [r7, #4]
 8000352:	2300      	movs	r3, #0
 8000354:	717b      	strb	r3, [r7, #5]
 8000356:	2300      	movs	r3, #0
 8000358:	71bb      	strb	r3, [r7, #6]
 800035a:	2300      	movs	r3, #0
 800035c:	71fb      	strb	r3, [r7, #7]
			    .uartWordLength = UART_WORD_LEGTH_8_BITS };




  drv_uart_init(&UART1_Init);
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	4618      	mov	r0, r3
 8000362:	f004 f8c3 	bl	80044ec <drv_uart_init>
  drv_SPI_init();
 8000366:	f003 ff33 	bl	80041d0 <drv_SPI_init>

  simpleTimer_reset_milliSeconds(&testTimer, ONTime);
 800036a:	4b07      	ldr	r3, [pc, #28]	; (8000388 <app_main_init+0x68>)
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	4619      	mov	r1, r3
 8000370:	480b      	ldr	r0, [pc, #44]	; (80003a0 <app_main_init+0x80>)
 8000372:	f004 faa1 	bl	80048b8 <simpleTimer_reset_milliSeconds>
  uwTickPrio = TICK_INT_PRIORITY;
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <app_main_init+0x84>)
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]


  acc_init();
 800037c:	f7ff fefe 	bl	800017c <acc_init>

}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000004 	.word	0x20000004
 800038c:	20000034 	.word	0x20000034
 8000390:	20000068 	.word	0x20000068
 8000394:	20000058 	.word	0x20000058
 8000398:	08004aa8 	.word	0x08004aa8
 800039c:	20000078 	.word	0x20000078
 80003a0:	2000004c 	.word	0x2000004c
 80003a4:	2000000c 	.word	0x2000000c

080003a8 <app_main_idle>:
static uint32_t u32nowUsTime;

static unsigned char acmsg[] = "Hello from STM";

void app_main_idle(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0


  acc_getWhoAmI();
 80003ac:	f7ff feec 	bl	8000188 <acc_getWhoAmI>
  acc_init();
 80003b0:	f7ff fee4 	bl	800017c <acc_init>
  acc_getTemperature();
 80003b4:	f7ff ff46 	bl	8000244 <acc_getTemperature>
  HAL_Delay(400);
 80003b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80003bc:	f000 fdae 	bl	8000f1c <HAL_Delay>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <entry_state_handler>:




void entry_state_handler()
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0

}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
	...

080003d4 <action_state_handler>:

void action_state_handler(int* newState)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2101      	movs	r1, #1
 80003e0:	480d      	ldr	r0, [pc, #52]	; (8000418 <action_state_handler+0x44>)
 80003e2:	f001 f8f7 	bl	80015d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2120      	movs	r1, #32
 80003ea:	480b      	ldr	r0, [pc, #44]	; (8000418 <action_state_handler+0x44>)
 80003ec:	f001 f8f2 	bl	80015d4 <HAL_GPIO_WritePin>

  if(simpleTimer_timeout(&ledONTimer))
 80003f0:	480a      	ldr	r0, [pc, #40]	; (800041c <action_state_handler+0x48>)
 80003f2:	f004 fa7d 	bl	80048f0 <simpleTimer_timeout>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d008      	beq.n	800040e <action_state_handler+0x3a>
  {
    simpleTimer_reset_milliSeconds(&ledOFFTimer, OFFTime);
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <action_state_handler+0x4c>)
 80003fe:	881b      	ldrh	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
 8000402:	4808      	ldr	r0, [pc, #32]	; (8000424 <action_state_handler+0x50>)
 8000404:	f004 fa58 	bl	80048b8 <simpleTimer_reset_milliSeconds>
    *newState = Second;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2201      	movs	r2, #1
 800040c:	601a      	str	r2, [r3, #0]
  }
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	48000400 	.word	0x48000400
 800041c:	20000034 	.word	0x20000034
 8000420:	20000006 	.word	0x20000006
 8000424:	20000040 	.word	0x20000040

08000428 <exit_state_handler>:

void exit_state_handler()
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <entry_state_handler2>:

void entry_state_handler2()
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <action_state_handler2>:

void action_state_handler2(int* newState)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2101      	movs	r1, #1
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <action_state_handler2+0x44>)
 8000452:	f001 f8bf 	bl	80015d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2120      	movs	r1, #32
 800045a:	480b      	ldr	r0, [pc, #44]	; (8000488 <action_state_handler2+0x44>)
 800045c:	f001 f8ba 	bl	80015d4 <HAL_GPIO_WritePin>

  if(simpleTimer_timeout(&ledOFFTimer))
 8000460:	480a      	ldr	r0, [pc, #40]	; (800048c <action_state_handler2+0x48>)
 8000462:	f004 fa45 	bl	80048f0 <simpleTimer_timeout>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d008      	beq.n	800047e <action_state_handler2+0x3a>
   {
     simpleTimer_reset_milliSeconds(&ledONTimer, ONTime);
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <action_state_handler2+0x4c>)
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	4619      	mov	r1, r3
 8000472:	4808      	ldr	r0, [pc, #32]	; (8000494 <action_state_handler2+0x50>)
 8000474:	f004 fa20 	bl	80048b8 <simpleTimer_reset_milliSeconds>
     *newState = Third;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2202      	movs	r2, #2
 800047c:	601a      	str	r2, [r3, #0]
   }

}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	48000400 	.word	0x48000400
 800048c:	20000040 	.word	0x20000040
 8000490:	20000004 	.word	0x20000004
 8000494:	20000034 	.word	0x20000034

08000498 <exit_state_handler2>:

void exit_state_handler2()
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <entry_state_handler3>:

void entry_state_handler3()
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <action_state_handler3>:

void action_state_handler3(int* newState)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]

    *newState = First;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <exit_state_handler3>:

void exit_state_handler3()
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <LL_RCC_HSE_EnableDiv2>:
  * @brief  Enable HSE sysclk and pll prescaler division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_EnableDiv2
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableDiv2(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEPRE);
 80004e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b085      	sub	sp, #20
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4313      	orrs	r3, r2
 8000510:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4013      	ands	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fca8 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f810 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f96a 	bl	8000810 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 800053c:	f000 f940 	bl	80007c0 <MX_USB_PCD_Init>
  MX_CRC_Init();
 8000540:	f000 f8a8 	bl	8000694 <MX_CRC_Init>
  MX_RTC_Init();
 8000544:	f000 f8c8 	bl	80006d8 <MX_RTC_Init>
  MX_TIM2_Init();
 8000548:	f000 f8ee 	bl	8000728 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  app_main_init();
 800054c:	f7ff fee8 	bl	8000320 <app_main_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    app_main_idle();
 8000550:	f7ff ff2a 	bl	80003a8 <app_main_idle>
 8000554:	e7fc      	b.n	8000550 <main+0x24>
	...

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b0ae      	sub	sp, #184	; 0xb8
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000562:	2248      	movs	r2, #72	; 0x48
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fa5a 	bl	8004a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]
 800057e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2250      	movs	r2, #80	; 0x50
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f004 fa4a 	bl	8004a20 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	4b40      	ldr	r3, [pc, #256]	; (8000690 <SystemClock_Config+0x138>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000594:	4a3e      	ldr	r2, [pc, #248]	; (8000690 <SystemClock_Config+0x138>)
 8000596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b3c      	ldr	r3, [pc, #240]	; (8000690 <SystemClock_Config+0x138>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80005a8:	230b      	movs	r3, #11
 80005aa:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2340      	movs	r3, #64	; 0x40
 80005ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005be:	2305      	movs	r3, #5
 80005c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	2303      	movs	r3, #3
 80005cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005d0:	2310      	movs	r3, #16
 80005d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 32;
 80005d6:	2320      	movs	r3, #32
 80005d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80005e4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80005e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fca7 	bl	8001f4c <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000604:	f000 f98a 	bl	800091c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000608:	236f      	movs	r3, #111	; 0x6f
 800060a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2303      	movs	r3, #3
 800060e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000624:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000628:	2103      	movs	r1, #3
 800062a:	4618      	mov	r0, r3
 800062c:	f002 f822 	bl	8002674 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000636:	f000 f971 	bl	800091c <Error_Handler>
  }
  /** Enable the HSE Prescaler 
  */
  __HAL_RCC_HSE_DIV2_ENABLE();
 800063a:	f7ff ff4f 	bl	80004dc <LL_RCC_HSE_EnableDiv2>
  /** Initializes the peripherals clocks 
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RTC
 800063e:	f44f 5324 	mov.w	r3, #10496	; 0x2900
 8000642:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000644:	2318      	movs	r3, #24
 8000646:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800064c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV4;
 800064e:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000652:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000654:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000658:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800065a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800065e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000660:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000670:	2300      	movs	r3, #0
 8000672:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fc53 	bl	8002f22 <HAL_RCCEx_PeriphCLKConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000682:	f000 f94b 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000686:	bf00      	nop
 8000688:	37b8      	adds	r7, #184	; 0xb8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	58000400 	.word	0x58000400

08000694 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_CRC_Init+0x3c>)
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <MX_CRC_Init+0x40>)
 800069c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_CRC_Init+0x3c>)
 80006be:	f000 fd2f 	bl	8001120 <HAL_CRC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006c8:	f000 f928 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000d8 	.word	0x200000d8
 80006d4:	40023000 	.word	0x40023000

080006d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_RTC_Init+0x48>)
 80006de:	4a11      	ldr	r2, [pc, #68]	; (8000724 <MX_RTC_Init+0x4c>)
 80006e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_RTC_Init+0x48>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_RTC_Init+0x48>)
 80006ea:	227f      	movs	r2, #127	; 0x7f
 80006ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_RTC_Init+0x48>)
 80006f0:	22ff      	movs	r2, #255	; 0xff
 80006f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_RTC_Init+0x48>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_RTC_Init+0x48>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_RTC_Init+0x48>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_RTC_Init+0x48>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_RTC_Init+0x48>)
 800070e:	f002 fe8e 	bl	800342e <HAL_RTC_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000718:	f000 f900 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000fc 	.word	0x200000fc
 8000724:	40002800 	.word	0x40002800

08000728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_TIM2_Init+0x94>)
 8000748:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_TIM2_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_TIM2_Init+0x94>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_TIM2_Init+0x94>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_TIM2_Init+0x94>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_TIM2_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_TIM2_Init+0x94>)
 800076e:	f002 ff4c 	bl	800360a <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000778:	f000 f8d0 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_TIM2_Init+0x94>)
 800078a:	f003 f8b2 	bl	80038f2 <HAL_TIM_ConfigClockSource>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000794:	f000 f8c2 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_TIM2_Init+0x94>)
 80007a6:	f003 fa85 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007b0:	f000 f8b4 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000120 	.word	0x20000120

080007c0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USB_PCD_Init+0x48>)
 80007c6:	4a11      	ldr	r2, [pc, #68]	; (800080c <MX_USB_PCD_Init+0x4c>)
 80007c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USB_PCD_Init+0x48>)
 80007cc:	2208      	movs	r2, #8
 80007ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_USB_PCD_Init+0x48>)
 80007d2:	2202      	movs	r2, #2
 80007d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USB_PCD_Init+0x48>)
 80007d8:	2202      	movs	r2, #2
 80007da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_USB_PCD_Init+0x48>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USB_PCD_Init+0x48>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_USB_PCD_Init+0x48>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USB_PCD_Init+0x48>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_USB_PCD_Init+0x48>)
 80007f6:	f000 ff05 	bl	8001604 <HAL_PCD_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000800:	f000 f88c 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000160 	.word	0x20000160
 800080c:	40006800 	.word	0x40006800

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000824:	2004      	movs	r0, #4
 8000826:	f7ff fe68 	bl	80004fa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2002      	movs	r0, #2
 800082c:	f7ff fe65 	bl	80004fa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	2001      	movs	r0, #1
 8000832:	f7ff fe62 	bl	80004fa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2008      	movs	r0, #8
 8000838:	f7ff fe5f 	bl	80004fa <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2123      	movs	r1, #35	; 0x23
 8000840:	482a      	ldr	r0, [pc, #168]	; (80008ec <MX_GPIO_Init+0xdc>)
 8000842:	f000 fec7 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000846:	2310      	movs	r3, #16
 8000848:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODER_INPUT;
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4826      	ldr	r0, [pc, #152]	; (80008f0 <MX_GPIO_Init+0xe0>)
 8000858:	f000 fd4c 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800085c:	2301      	movs	r3, #1
 800085e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	481e      	ldr	r0, [pc, #120]	; (80008ec <MX_GPIO_Init+0xdc>)
 8000872:	f000 fd3f 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD1_Pin;
 8000876:	2322      	movs	r3, #34	; 0x22
 8000878:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4619      	mov	r1, r3
 800088a:	4818      	ldr	r0, [pc, #96]	; (80008ec <MX_GPIO_Init+0xdc>)
 800088c:	f000 fd32 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000890:	2303      	movs	r3, #3
 8000892:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODER_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4814      	ldr	r0, [pc, #80]	; (80008f4 <MX_GPIO_Init+0xe4>)
 80008a2:	f000 fd27 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin;
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULL_UP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008b6:	2307      	movs	r3, #7
 80008b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	480b      	ldr	r0, [pc, #44]	; (80008ec <MX_GPIO_Init+0xdc>)
 80008c0:	f000 fd18 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008d4:	2307      	movs	r3, #7
 80008d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <MX_GPIO_Init+0xdc>)
 80008de:	f000 fd09 	bl	80012f4 <HAL_GPIO_Init>

}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	48000400 	.word	0x48000400
 80008f0:	48000800 	.word	0x48000800
 80008f4:	48000c00 	.word	0x48000c00

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d101      	bne.n	800090e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090a:	f000 fadb 	bl	8000ec4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40014800 	.word	0x40014800

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800092e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800093a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800093e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <LL_AHB1_GRP1_EnableClock>:
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800095a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4313      	orrs	r3, r2
 8000962:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4013      	ands	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000970:	68fb      	ldr	r3, [r7, #12]
}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <LL_AHB2_GRP1_EnableClock>:
{
 800097e:	b480      	push	{r7}
 8000980:	b085      	sub	sp, #20
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800098a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800098c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4313      	orrs	r3, r2
 8000994:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800099a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4013      	ands	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009d4:	68fb      	ldr	r3, [r7, #12]
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <HAL_CRC_MspInit+0x24>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d103      	bne.n	8000a0a <HAL_CRC_MspInit+0x1a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a02:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a06:	f7ff ffa1 	bl	800094c <LL_AHB1_GRP1_EnableClock>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023000 	.word	0x40023000

08000a18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <HAL_RTC_MspInit+0x28>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d105      	bne.n	8000a36 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a2a:	f7ff ff7e 	bl	800092a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a2e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a32:	f7ff ffbd 	bl	80009b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40002800 	.word	0x40002800

08000a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a54:	d102      	bne.n	8000a5c <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a56:	2001      	movs	r0, #1
 8000a58:	f7ff ffaa 	bl	80009b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <HAL_PCD_MspInit+0x5c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d118      	bne.n	8000ab8 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff ff79 	bl	800097e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f000 fc22 	bl	80012f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ab0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ab4:	f7ff ff7c 	bl	80009b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ab8:	bf00      	nop
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40006800 	.word	0x40006800

08000ac4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0); 
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	201a      	movs	r0, #26
 8000b0e:	f000 fadf 	bl	80010d0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn); 
 8000b12:	201a      	movs	r0, #26
 8000b14:	f000 faf6 	bl	8001104 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000b18:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b1c:	f7ff ffd2 	bl	8000ac4 <LL_APB2_GRP1_EnableClock>
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b20:	f107 0208 	add.w	r2, r7, #8
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 ff72 	bl	8002a14 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b30:	f001 ff5a 	bl	80029e8 <HAL_RCC_GetPCLK2Freq>
 8000b34:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b38:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <HAL_InitTick+0x8c>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	0c9b      	lsrs	r3, r3, #18
 8000b40:	3b01      	subs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_InitTick+0x90>)
 8000b46:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <HAL_InitTick+0x94>)
 8000b48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_InitTick+0x90>)
 8000b4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b50:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000b52:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_InitTick+0x90>)
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_InitTick+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_InitTick+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000b64:	4808      	ldr	r0, [pc, #32]	; (8000b88 <HAL_InitTick+0x90>)
 8000b66:	f002 fd50 	bl	800360a <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d104      	bne.n	8000b7a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <HAL_InitTick+0x90>)
 8000b72:	f002 fd75 	bl	8003660 <HAL_TIM_Base_Start_IT>
 8000b76:	4603      	mov	r3, r0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x84>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3730      	adds	r7, #48	; 0x30
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	431bde83 	.word	0x431bde83
 8000b88:	200003d4 	.word	0x200003d4
 8000b8c:	40014800 	.word	0x40014800

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000bf6:	f002 fd5d 	bl	80036b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  simpleTimer_IRQHandler(&htim17);
 8000bfa:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000bfc:	f003 feb2 	bl	8004964 <simpleTimer_IRQHandler>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200003d4 	.word	0x200003d4

08000c08 <USART1_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  drv_uart_IRQHandler();
 8000c0c:	f003 fdbe 	bl	800478c <drv_uart_IRQHandler>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  //drv_SPI_IRQHandler();
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000c28:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <SystemInit+0xa0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <SystemInit+0xa0>)
 8000c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c34:	4a23      	ldr	r2, [pc, #140]	; (8000cc4 <SystemInit+0xa0>)
 8000c36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c52:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000c56:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <SystemInit+0xa4>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c74:	f023 0305 	bic.w	r3, r3, #5
 8000c78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c88:	f023 0301 	bic.w	r3, r3, #1
 8000c8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <SystemInit+0xa8>)
 8000c96:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <SystemInit+0xa8>)
 8000c9e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	faf6fefb 	.word	0xfaf6fefb
 8000ccc:	22041000 	.word	0x22041000

08000cd0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	091b      	lsrs	r3, r3, #4
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	4a47      	ldr	r2, [pc, #284]	; (8000e00 <SystemCoreClockUpdate+0x130>)
 8000ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b0c      	cmp	r3, #12
 8000cf6:	d867      	bhi.n	8000dc8 <SystemCoreClockUpdate+0xf8>
 8000cf8:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <SystemCoreClockUpdate+0x30>)
 8000cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfe:	bf00      	nop
 8000d00:	08000d35 	.word	0x08000d35
 8000d04:	08000dc9 	.word	0x08000dc9
 8000d08:	08000dc9 	.word	0x08000dc9
 8000d0c:	08000dc9 	.word	0x08000dc9
 8000d10:	08000d3d 	.word	0x08000d3d
 8000d14:	08000dc9 	.word	0x08000dc9
 8000d18:	08000dc9 	.word	0x08000dc9
 8000d1c:	08000dc9 	.word	0x08000dc9
 8000d20:	08000d45 	.word	0x08000d45
 8000d24:	08000dc9 	.word	0x08000dc9
 8000d28:	08000dc9 	.word	0x08000dc9
 8000d2c:	08000dc9 	.word	0x08000dc9
 8000d30:	08000d4d 	.word	0x08000d4d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000d34:	4a33      	ldr	r2, [pc, #204]	; (8000e04 <SystemCoreClockUpdate+0x134>)
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	6013      	str	r3, [r2, #0]
      break;
 8000d3a:	e049      	b.n	8000dd0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000d3c:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <SystemCoreClockUpdate+0x134>)
 8000d3e:	4a32      	ldr	r2, [pc, #200]	; (8000e08 <SystemCoreClockUpdate+0x138>)
 8000d40:	601a      	str	r2, [r3, #0]
      break;
 8000d42:	e045      	b.n	8000dd0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d44:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <SystemCoreClockUpdate+0x134>)
 8000d46:	4a31      	ldr	r2, [pc, #196]	; (8000e0c <SystemCoreClockUpdate+0x13c>)
 8000d48:	601a      	str	r2, [r3, #0]
      break;
 8000d4a:	e041      	b.n	8000dd0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	3301      	adds	r3, #1
 8000d66:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d105      	bne.n	8000d7a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000d6e:	4a26      	ldr	r2, [pc, #152]	; (8000e08 <SystemCoreClockUpdate+0x138>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e00d      	b.n	8000d96 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d105      	bne.n	8000d8c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000d80:	4a22      	ldr	r2, [pc, #136]	; (8000e0c <SystemCoreClockUpdate+0x13c>)
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e004      	b.n	8000d96 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d94:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fb02 f303 	mul.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0f5b      	lsrs	r3, r3, #29
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	3301      	adds	r3, #1
 8000db8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <SystemCoreClockUpdate+0x134>)
 8000dc4:	6013      	str	r3, [r2, #0]
      break;
 8000dc6:	e003      	b.n	8000dd0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <SystemCoreClockUpdate+0x134>)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	6013      	str	r3, [r2, #0]
      break;
 8000dce:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	f003 030f 	and.w	r3, r3, #15
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <SystemCoreClockUpdate+0x140>)
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <SystemCoreClockUpdate+0x134>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <SystemCoreClockUpdate+0x134>)
 8000df0:	6013      	str	r3, [r2, #0]

}
 8000df2:	bf00      	nop
 8000df4:	371c      	adds	r7, #28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	08004b38 	.word	0x08004b38
 8000e04:	20000008 	.word	0x20000008
 8000e08:	00f42400 	.word	0x00f42400
 8000e0c:	01e84800 	.word	0x01e84800
 8000e10:	08004ad8 	.word	0x08004ad8

08000e14 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000e14:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e16:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e18:	3304      	adds	r3, #4

08000e1a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000e1e:	d3f9      	bcc.n	8000e14 <CopyDataInit>
  bx lr
 8000e20:	4770      	bx	lr

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000e22:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000e24:	3004      	adds	r0, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000e26:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>
  bx lr
 8000e2a:	4770      	bx	lr

08000e2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000e2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x8>)
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xc>)
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0x10>)
 8000e36:	2300      	movs	r3, #0
 8000e38:	f7ff ffef 	bl	8000e1a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <LoopForever+0x14>)
 8000e3e:	490d      	ldr	r1, [pc, #52]	; (8000e74 <LoopForever+0x18>)
 8000e40:	2300      	movs	r3, #0
 8000e42:	f7ff fff0 	bl	8000e26 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e46:	480c      	ldr	r0, [pc, #48]	; (8000e78 <LoopForever+0x1c>)
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <LoopForever+0x20>)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f7ff ffeb 	bl	8000e26 <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e50:	f7ff fee8 	bl	8000c24 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e54:	f003 fdc0 	bl	80049d8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000e58:	f7ff fb68 	bl	800052c <main>

08000e5c <LoopForever>:

LoopForever:
  b LoopForever
 8000e5c:	e7fe      	b.n	8000e5c <LoopForever>
 8000e5e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000e60:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000e64:	20000004 	.word	0x20000004
 8000e68:	20000014 	.word	0x20000014
 8000e6c:	08004b80 	.word	0x08004b80
  INIT_BSS _sbss, _ebss
 8000e70:	20000014 	.word	0x20000014
 8000e74:	20000418 	.word	0x20000418
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e78:	20030000 	.word	0x20030000
 8000e7c:	20030000 	.word	0x20030000

08000e80 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_Init+0x3c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_Init+0x3c>)
 8000e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f000 f90d 	bl	80010ba <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f7ff fe29 	bl	8000af8 <HAL_InitTick>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	e001      	b.n	8000eb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb2:	f7ff fd96 	bl	80009e2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	58004000 	.word	0x58004000

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000010 	.word	0x20000010
 8000ee8:	20000414 	.word	0x20000414

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000414 	.word	0x20000414

08000f04 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTickPrio+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2000000c 	.word	0x2000000c

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffe2 	bl	8000eec <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_Delay+0x40>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffd2 	bl	8000eec <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
    {
    }
  }
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000010 	.word	0x20000010

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff4c 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010de:	f7ff ff63 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 80010e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	6978      	ldr	r0, [r7, #20]
 80010ea:	f7ff ffb3 	bl	8001054 <NVIC_EncodePriority>
 80010ee:	4602      	mov	r2, r0
 80010f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff82 	bl	8001000 <__NVIC_SetPriority>
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff56 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e054      	b.n	80011dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7f5b      	ldrb	r3, [r3, #29]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d105      	bne.n	8001148 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fc54 	bl	80009f0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	791b      	ldrb	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <HAL_CRC_Init+0xc4>)
 800115c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0218 	bic.w	r2, r2, #24
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	e00c      	b.n	800118a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6899      	ldr	r1, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	461a      	mov	r2, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f834 	bl	80011e8 <HAL_CRCEx_Polynomial_Set>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e028      	b.n	80011dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	795b      	ldrb	r3, [r3, #5]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d105      	bne.n	800119e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f04f 32ff 	mov.w	r2, #4294967295
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	e004      	b.n	80011a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6912      	ldr	r2, [r2, #16]
 80011a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695a      	ldr	r2, [r3, #20]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	699a      	ldr	r2, [r3, #24]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	04c11db7 	.word	0x04c11db7

080011e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80011f8:	231f      	movs	r3, #31
 80011fa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80011fc:	bf00      	nop
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1e5a      	subs	r2, r3, #1
 8001202:	613a      	str	r2, [r7, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <HAL_CRCEx_Polynomial_Set+0x34>
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	fa22 f303 	lsr.w	r3, r2, r3
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b18      	cmp	r3, #24
 8001220:	d846      	bhi.n	80012b0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	080012b7 	.word	0x080012b7
 800122c:	080012b1 	.word	0x080012b1
 8001230:	080012b1 	.word	0x080012b1
 8001234:	080012b1 	.word	0x080012b1
 8001238:	080012b1 	.word	0x080012b1
 800123c:	080012b1 	.word	0x080012b1
 8001240:	080012b1 	.word	0x080012b1
 8001244:	080012b1 	.word	0x080012b1
 8001248:	080012a5 	.word	0x080012a5
 800124c:	080012b1 	.word	0x080012b1
 8001250:	080012b1 	.word	0x080012b1
 8001254:	080012b1 	.word	0x080012b1
 8001258:	080012b1 	.word	0x080012b1
 800125c:	080012b1 	.word	0x080012b1
 8001260:	080012b1 	.word	0x080012b1
 8001264:	080012b1 	.word	0x080012b1
 8001268:	08001299 	.word	0x08001299
 800126c:	080012b1 	.word	0x080012b1
 8001270:	080012b1 	.word	0x080012b1
 8001274:	080012b1 	.word	0x080012b1
 8001278:	080012b1 	.word	0x080012b1
 800127c:	080012b1 	.word	0x080012b1
 8001280:	080012b1 	.word	0x080012b1
 8001284:	080012b1 	.word	0x080012b1
 8001288:	0800128d 	.word	0x0800128d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	2b06      	cmp	r3, #6
 8001290:	d913      	bls.n	80012ba <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001296:	e010      	b.n	80012ba <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	2b07      	cmp	r3, #7
 800129c:	d90f      	bls.n	80012be <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80012a2:	e00c      	b.n	80012be <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	d90b      	bls.n	80012c2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80012ae:	e008      	b.n	80012c2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	75fb      	strb	r3, [r7, #23]
      break;
 80012b4:	e006      	b.n	80012c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80012b6:	bf00      	nop
 80012b8:	e004      	b.n	80012c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80012ba:	bf00      	nop
 80012bc:	e002      	b.n	80012c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80012be:	bf00      	nop
 80012c0:	e000      	b.n	80012c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80012c2:	bf00      	nop
  }
  if (status == HAL_OK)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10d      	bne.n	80012e6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 0118 	bic.w	r1, r3, #24
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	e14c      	b.n	800159e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 813e 	beq.w	8001598 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d00b      	beq.n	800133c <HAL_GPIO_Init+0x48>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d007      	beq.n	800133c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001330:	2b11      	cmp	r3, #17
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b12      	cmp	r3, #18
 800133a:	d130      	bne.n	800139e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001372:	2201      	movs	r2, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f003 0201 	and.w	r2, r3, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0xea>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b12      	cmp	r3, #18
 80013dc:	d123      	bne.n	8001426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3208      	adds	r2, #8
 80013e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	08da      	lsrs	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3208      	adds	r2, #8
 8001420:	6939      	ldr	r1, [r7, #16]
 8001422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0203 	and.w	r2, r3, #3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8098 	beq.w	8001598 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001468:	4a54      	ldr	r2, [pc, #336]	; (80015bc <HAL_GPIO_Init+0x2c8>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001492:	d019      	beq.n	80014c8 <HAL_GPIO_Init+0x1d4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a4a      	ldr	r2, [pc, #296]	; (80015c0 <HAL_GPIO_Init+0x2cc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d013      	beq.n	80014c4 <HAL_GPIO_Init+0x1d0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a49      	ldr	r2, [pc, #292]	; (80015c4 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d00d      	beq.n	80014c0 <HAL_GPIO_Init+0x1cc>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a48      	ldr	r2, [pc, #288]	; (80015c8 <HAL_GPIO_Init+0x2d4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x1c8>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a47      	ldr	r2, [pc, #284]	; (80015cc <HAL_GPIO_Init+0x2d8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_GPIO_Init+0x1c4>
 80014b4:	2304      	movs	r3, #4
 80014b6:	e008      	b.n	80014ca <HAL_GPIO_Init+0x1d6>
 80014b8:	2307      	movs	r3, #7
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x1d6>
 80014bc:	2303      	movs	r3, #3
 80014be:	e004      	b.n	80014ca <HAL_GPIO_Init+0x1d6>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e002      	b.n	80014ca <HAL_GPIO_Init+0x1d6>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_GPIO_Init+0x1d6>
 80014c8:	2300      	movs	r3, #0
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	f002 0203 	and.w	r2, r2, #3
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	4093      	lsls	r3, r2
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014da:	4938      	ldr	r1, [pc, #224]	; (80015bc <HAL_GPIO_Init+0x2c8>)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014e8:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 80014ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800150e:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 8001518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800153c:	4a24      	ldr	r2, [pc, #144]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <HAL_GPIO_Init+0x2dc>)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	fa22 f303 	lsr.w	r3, r2, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f47f aeab 	bne.w	8001304 <HAL_GPIO_Init+0x10>
  }
}
 80015ae:	bf00      	nop
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40010000 	.word	0x40010000
 80015c0:	48000400 	.word	0x48000400
 80015c4:	48000800 	.word	0x48000800
 80015c8:	48000c00 	.word	0x48000c00
 80015cc:	48001000 	.word	0x48001000
 80015d0:	58000800 	.word	0x58000800

080015d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
 80015e0:	4613      	mov	r3, r2
 80015e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e4:	787b      	ldrb	r3, [r7, #1]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	b08b      	sub	sp, #44	; 0x2c
 8001608:	af06      	add	r7, sp, #24
 800160a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0ad      	b.n	8001772 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d106      	bne.n	8001630 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff fa1a 	bl	8000a64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2203      	movs	r2, #3
 8001634:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f002 fbcf 	bl	8003de0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e035      	b.n	80016b4 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	015b      	lsls	r3, r3, #5
 800164e:	4413      	add	r3, r2
 8001650:	3329      	adds	r3, #41	; 0x29
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	015b      	lsls	r3, r3, #5
 800165c:	4413      	add	r3, r2
 800165e:	3328      	adds	r3, #40	; 0x28
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	7bfa      	ldrb	r2, [r7, #15]
 8001668:	b291      	uxth	r1, r2
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	015b      	lsls	r3, r3, #5
 800166e:	4413      	add	r3, r2
 8001670:	3336      	adds	r3, #54	; 0x36
 8001672:	460a      	mov	r2, r1
 8001674:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	015b      	lsls	r3, r3, #5
 800167c:	4413      	add	r3, r2
 800167e:	332b      	adds	r3, #43	; 0x2b
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	015b      	lsls	r3, r3, #5
 800168a:	4413      	add	r3, r2
 800168c:	3338      	adds	r3, #56	; 0x38
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	015b      	lsls	r3, r3, #5
 8001698:	4413      	add	r3, r2
 800169a:	333c      	adds	r3, #60	; 0x3c
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	3302      	adds	r3, #2
 80016a6:	015b      	lsls	r3, r3, #5
 80016a8:	4413      	add	r3, r2
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	3301      	adds	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d3c4      	bcc.n	8001648 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	e031      	b.n	8001728 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	015b      	lsls	r3, r3, #5
 80016ca:	4413      	add	r3, r2
 80016cc:	f203 1329 	addw	r3, r3, #297	; 0x129
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	015b      	lsls	r3, r3, #5
 80016da:	4413      	add	r3, r2
 80016dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016e0:	7bfa      	ldrb	r2, [r7, #15]
 80016e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	015b      	lsls	r3, r3, #5
 80016ea:	4413      	add	r3, r2
 80016ec:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	015b      	lsls	r3, r3, #5
 80016fa:	4413      	add	r3, r2
 80016fc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	015b      	lsls	r3, r3, #5
 800170a:	4413      	add	r3, r2
 800170c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	330a      	adds	r3, #10
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	4413      	add	r3, r2
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3301      	adds	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d3c8      	bcc.n	80016c4 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	687e      	ldr	r6, [r7, #4]
 800173a:	466d      	mov	r5, sp
 800173c:	f106 0410 	add.w	r4, r6, #16
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	602b      	str	r3, [r5, #0]
 8001748:	1d33      	adds	r3, r6, #4
 800174a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800174c:	6838      	ldr	r0, [r7, #0]
 800174e:	f002 fb64 	bl	8003e1a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d102      	bne.n	8001770 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f805 	bl	800177a <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3714      	adds	r7, #20
 8001776:	46bd      	mov	sp, r7
 8001778:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800177a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800177a:	b480      	push	{r7}
 800177c:	b085      	sub	sp, #20
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800179e:	b29b      	uxth	r3, r3
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	58000400 	.word	0x58000400

080017f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <HAL_PWREx_GetVoltageRange+0x18>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	58000400 	.word	0x58000400

0800180c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800181e:	d101      	bne.n	8001824 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_RCC_HSE_EnableBypass>:
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800183e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <LL_RCC_HSE_DisableBypass>:
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800185c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001860:	6013      	str	r3, [r2, #0]
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_RCC_HSE_Enable>:
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_RCC_HSE_Disable>:
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189c:	6013      	str	r3, [r2, #0]
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <LL_RCC_HSE_IsReady>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018ba:	d101      	bne.n	80018c0 <LL_RCC_HSE_IsReady+0x18>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <LL_RCC_HSE_IsReady+0x1a>
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_RCC_HSI_Enable>:
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_RCC_HSI_Disable>:
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_RCC_HSI_IsReady>:
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800190c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800191a:	d101      	bne.n	8001920 <LL_RCC_HSI_IsReady+0x18>
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <LL_RCC_HSI_IsReady+0x1a>
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_RCC_HSI_SetCalibTrimming>:
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_RCC_HSI48_Enable>:
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_RCC_HSI48_Disable>:
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_RCC_HSI48_IsReady>:
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d101      	bne.n	80019b2 <LL_RCC_HSI48_IsReady+0x18>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <LL_RCC_HSI48_IsReady+0x1a>
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <LL_RCC_LSE_Enable>:
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_RCC_LSE_Disable>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_RCC_LSE_EnableBypass>:
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_RCC_LSE_DisableBypass>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_RCC_LSE_IsReady>:
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d101      	bne.n	8001a5e <LL_RCC_LSE_IsReady+0x18>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <LL_RCC_LSE_IsReady+0x1a>
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_RCC_LSI1_Enable>:
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_RCC_LSI1_Disable>:
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_RCC_LSI1_IsReady>:
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d101      	bne.n	8001ac6 <LL_RCC_LSI1_IsReady+0x18>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <LL_RCC_LSI1_IsReady+0x1a>
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <LL_RCC_LSI2_Enable>:
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_RCC_LSI2_Disable>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b04:	f023 0304 	bic.w	r3, r3, #4
 8001b08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_RCC_LSI2_IsReady>:
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d101      	bne.n	8001b2e <LL_RCC_LSI2_IsReady+0x18>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <LL_RCC_LSI2_IsReady+0x1a>
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_RCC_LSI2_SetTrimming>:
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_RCC_MSI_Enable>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_RCC_MSI_Disable>:
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6013      	str	r3, [r2, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_RCC_MSI_IsReady>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d101      	bne.n	8001bba <LL_RCC_MSI_IsReady+0x16>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_RCC_MSI_IsReady+0x18>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_RCC_MSI_SetRange>:
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_RCC_MSI_GetRange>:
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2bb0      	cmp	r3, #176	; 0xb0
 8001c04:	d901      	bls.n	8001c0a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001c06:	23b0      	movs	r3, #176	; 0xb0
 8001c08:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001c0a:	687b      	ldr	r3, [r7, #4]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_RCC_SetSysClkSource>:
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 0203 	bic.w	r2, r3, #3
 8001c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_RCC_GetSysClkSource>:
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <LL_RCC_SetAHBPrescaler>:
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_C2_RCC_SetAHBPrescaler>:
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_RCC_SetAHB4Prescaler>:
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ce6:	f023 020f 	bic.w	r2, r3, #15
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_RCC_SetAPB1Prescaler>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_RCC_SetAPB2Prescaler>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_RCC_GetAHBPrescaler>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_C2_RCC_GetAHBPrescaler>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_RCC_GetAHB4Prescaler>:
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_RCC_GetAPB1Prescaler>:
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_RCC_GetAPB2Prescaler>:
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de4:	6013      	str	r3, [r2, #0]
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e20:	d101      	bne.n	8001e26 <LL_RCC_PLL_IsReady+0x18>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <LL_RCC_PLL_IsReady+0x1a>
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 0303 	and.w	r3, r3, #3
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea6:	d101      	bne.n	8001eac <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ecc:	d101      	bne.n	8001ed2 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef2:	d101      	bne.n	8001ef8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f16:	d101      	bne.n	8001f1c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f3a:	d101      	bne.n	8001f40 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b08d      	sub	sp, #52	; 0x34
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e386      	b.n	800266c <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 808f 	beq.w	800208a <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f6c:	f7ff fe7d 	bl	8001c6a <LL_RCC_GetSysClkSource>
 8001f70:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f72:	f7ff ff83 	bl	8001e7c <LL_RCC_PLL_GetMainSource>
 8001f76:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3e>
 8001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f80:	2b0c      	cmp	r3, #12
 8001f82:	d149      	bne.n	8002018 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d146      	bne.n	8002018 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f8a:	f7ff fe0b 	bl	8001ba4 <LL_RCC_MSI_IsReady>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x54>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e365      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001fa4:	f7ff fe23 	bl	8001bee <LL_RCC_MSI_GetRange>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	429c      	cmp	r4, r3
 8001fac:	d914      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fd60 	bl	8002a78 <RCC_SetFlashLatencyFromMSIRange>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e354      	b.n	800266c <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fdfd 	bl	8001bc6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fe21 	bl	8001c18 <LL_RCC_MSI_SetCalibTrimming>
 8001fd6:	e013      	b.n	8002000 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fdf2 	bl	8001bc6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fe16 	bl	8001c18 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fd41 	bl	8002a78 <RCC_SetFlashLatencyFromMSIRange>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e335      	b.n	800266c <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002000:	f7fe fe66 	bl	8000cd0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002004:	4bb4      	ldr	r3, [pc, #720]	; (80022d8 <HAL_RCC_OscConfig+0x38c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fd75 	bl	8000af8 <HAL_InitTick>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d039      	beq.n	8002088 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e329      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01e      	beq.n	800205e <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002020:	f7ff fda2 	bl	8001b68 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002024:	f7fe ff62 	bl	8000eec <HAL_GetTick>
 8002028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800202c:	f7fe ff5e 	bl	8000eec <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e316      	b.n	800266c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 800203e:	f7ff fdb1 	bl	8001ba4 <LL_RCC_MSI_IsReady>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f1      	beq.n	800202c <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fdba 	bl	8001bc6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fdde 	bl	8001c18 <LL_RCC_MSI_SetCalibTrimming>
 800205c:	e015      	b.n	800208a <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800205e:	f7ff fd92 	bl	8001b86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002062:	f7fe ff43 	bl	8000eec <HAL_GetTick>
 8002066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800206a:	f7fe ff3f 	bl	8000eec <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e2f7      	b.n	800266c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 800207c:	f7ff fd92 	bl	8001ba4 <LL_RCC_MSI_IsReady>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f1      	bne.n	800206a <HAL_RCC_OscConfig+0x11e>
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d05a      	beq.n	800214c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002096:	f7ff fde8 	bl	8001c6a <LL_RCC_GetSysClkSource>
 800209a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209c:	f7ff feee 	bl	8001e7c <LL_RCC_PLL_GetMainSource>
 80020a0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_OscConfig+0x168>
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	2b0c      	cmp	r3, #12
 80020ac:	d10d      	bne.n	80020ca <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d10a      	bne.n	80020ca <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	f7ff fbf8 	bl	80018a8 <LL_RCC_HSE_IsReady>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d045      	beq.n	800214a <HAL_RCC_OscConfig+0x1fe>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d141      	bne.n	800214a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e2d0      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d2:	d102      	bne.n	80020da <HAL_RCC_OscConfig+0x18e>
 80020d4:	f7ff fbca 	bl	800186c <LL_RCC_HSE_Enable>
 80020d8:	e00d      	b.n	80020f6 <HAL_RCC_OscConfig+0x1aa>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e2:	d104      	bne.n	80020ee <HAL_RCC_OscConfig+0x1a2>
 80020e4:	f7ff fba4 	bl	8001830 <LL_RCC_HSE_EnableBypass>
 80020e8:	f7ff fbc0 	bl	800186c <LL_RCC_HSE_Enable>
 80020ec:	e003      	b.n	80020f6 <HAL_RCC_OscConfig+0x1aa>
 80020ee:	f7ff fbcc 	bl	800188a <LL_RCC_HSE_Disable>
 80020f2:	f7ff fbac 	bl	800184e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d012      	beq.n	8002124 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7fe fef5 	bl	8000eec <HAL_GetTick>
 8002102:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002106:	f7fe fef1 	bl	8000eec <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	; 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e2a9      	b.n	800266c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002118:	f7ff fbc6 	bl	80018a8 <LL_RCC_HSE_IsReady>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f1      	beq.n	8002106 <HAL_RCC_OscConfig+0x1ba>
 8002122:	e013      	b.n	800214c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7fe fee2 	bl	8000eec <HAL_GetTick>
 8002128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800212c:	f7fe fede 	bl	8000eec <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e296      	b.n	800266c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 800213e:	f7ff fbb3 	bl	80018a8 <LL_RCC_HSE_IsReady>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f1      	bne.n	800212c <HAL_RCC_OscConfig+0x1e0>
 8002148:	e000      	b.n	800214c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d051      	beq.n	80021fc <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002158:	f7ff fd87 	bl	8001c6a <LL_RCC_GetSysClkSource>
 800215c:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800215e:	f7ff fe8d 	bl	8001e7c <LL_RCC_PLL_GetMainSource>
 8002162:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2b04      	cmp	r3, #4
 8002168:	d005      	beq.n	8002176 <HAL_RCC_OscConfig+0x22a>
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b0c      	cmp	r3, #12
 800216e:	d113      	bne.n	8002198 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d110      	bne.n	8002198 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002176:	f7ff fbc7 	bl	8001908 <LL_RCC_HSI_IsReady>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_RCC_OscConfig+0x240>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e26f      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fbcb 	bl	800192c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002196:	e031      	b.n	80021fc <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d019      	beq.n	80021d4 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	f7ff fb94 	bl	80018cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe fea2 	bl	8000eec <HAL_GetTick>
 80021a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ac:	f7fe fe9e 	bl	8000eec <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e256      	b.n	800266c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 80021be:	f7ff fba3 	bl	8001908 <LL_RCC_HSI_IsReady>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f1      	beq.n	80021ac <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fbad 	bl	800192c <LL_RCC_HSI_SetCalibTrimming>
 80021d2:	e013      	b.n	80021fc <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d4:	f7ff fb89 	bl	80018ea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fe88 	bl	8000eec <HAL_GetTick>
 80021dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e0:	f7fe fe84 	bl	8000eec <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e23c      	b.n	800266c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 80021f2:	f7ff fb89 	bl	8001908 <LL_RCC_HSI_IsReady>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f1      	bne.n	80021e0 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a2 	beq.w	800235a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d075      	beq.n	800230a <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d046      	beq.n	80022b8 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800222a:	f7ff fc40 	bl	8001aae <LL_RCC_LSI1_IsReady>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d113      	bne.n	800225c <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002234:	f7ff fc19 	bl	8001a6a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002238:	f7fe fe58 	bl	8000eec <HAL_GetTick>
 800223c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002240:	f7fe fe54 	bl	8000eec <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e20c      	b.n	800266c <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002252:	f7ff fc2c 	bl	8001aae <LL_RCC_LSI1_IsReady>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f1      	beq.n	8002240 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800225c:	f7ff fc39 	bl	8001ad2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe fe44 	bl	8000eec <HAL_GetTick>
 8002264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002268:	f7fe fe40 	bl	8000eec <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b03      	cmp	r3, #3
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1f8      	b.n	800266c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800227a:	f7ff fc4c 	bl	8001b16 <LL_RCC_LSI2_IsReady>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f1      	beq.n	8002268 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fc56 	bl	8001b3a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800228e:	f7ff fbfd 	bl	8001a8c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7fe fe2b 	bl	8000eec <HAL_GetTick>
 8002296:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800229a:	f7fe fe27 	bl	8000eec <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e1df      	b.n	800266c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022ac:	f7ff fbff 	bl	8001aae <LL_RCC_LSI1_IsReady>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f1      	bne.n	800229a <HAL_RCC_OscConfig+0x34e>
 80022b6:	e050      	b.n	800235a <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80022b8:	f7ff fbd7 	bl	8001a6a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fe16 	bl	8000eec <HAL_GetTick>
 80022c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022c4:	f7fe fe12 	bl	8000eec <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d904      	bls.n	80022dc <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e1ca      	b.n	800266c <HAL_RCC_OscConfig+0x720>
 80022d6:	bf00      	nop
 80022d8:	2000000c 	.word	0x2000000c
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022dc:	f7ff fbe7 	bl	8001aae <LL_RCC_LSI1_IsReady>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0ee      	beq.n	80022c4 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80022e6:	f7ff fc05 	bl	8001af4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022ec:	f7fe fdfe 	bl	8000eec <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1b6      	b.n	800266c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022fe:	f7ff fc0a 	bl	8001b16 <LL_RCC_LSI2_IsReady>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f1      	bne.n	80022ec <HAL_RCC_OscConfig+0x3a0>
 8002308:	e027      	b.n	800235a <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800230a:	f7ff fbf3 	bl	8001af4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230e:	f7fe fded 	bl	8000eec <HAL_GetTick>
 8002312:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002316:	f7fe fde9 	bl	8000eec <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b03      	cmp	r3, #3
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e1a1      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002328:	f7ff fbf5 	bl	8001b16 <LL_RCC_LSI2_IsReady>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f1      	bne.n	8002316 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002332:	f7ff fbab 	bl	8001a8c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002336:	f7fe fdd9 	bl	8000eec <HAL_GetTick>
 800233a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800233e:	f7fe fdd5 	bl	8000eec <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e18d      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002350:	f7ff fbad 	bl	8001aae <LL_RCC_LSI1_IsReady>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f1      	bne.n	800233e <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d05b      	beq.n	800241e <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002366:	4bb5      	ldr	r3, [pc, #724]	; (800263c <HAL_RCC_OscConfig+0x6f0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d114      	bne.n	800239c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002372:	f7ff fa2d 	bl	80017d0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002376:	f7fe fdb9 	bl	8000eec <HAL_GetTick>
 800237a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237e:	f7fe fdb5 	bl	8000eec <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e16d      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002390:	4baa      	ldr	r3, [pc, #680]	; (800263c <HAL_RCC_OscConfig+0x6f0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d102      	bne.n	80023aa <HAL_RCC_OscConfig+0x45e>
 80023a4:	f7ff fb0b 	bl	80019be <LL_RCC_LSE_Enable>
 80023a8:	e00c      	b.n	80023c4 <HAL_RCC_OscConfig+0x478>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d104      	bne.n	80023bc <HAL_RCC_OscConfig+0x470>
 80023b2:	f7ff fb26 	bl	8001a02 <LL_RCC_LSE_EnableBypass>
 80023b6:	f7ff fb02 	bl	80019be <LL_RCC_LSE_Enable>
 80023ba:	e003      	b.n	80023c4 <HAL_RCC_OscConfig+0x478>
 80023bc:	f7ff fb10 	bl	80019e0 <LL_RCC_LSE_Disable>
 80023c0:	f7ff fb30 	bl	8001a24 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d014      	beq.n	80023f6 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023cc:	f7fe fd8e 	bl	8000eec <HAL_GetTick>
 80023d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d4:	f7fe fd8a 	bl	8000eec <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e140      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 80023ea:	f7ff fb2c 	bl	8001a46 <LL_RCC_LSE_IsReady>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ef      	beq.n	80023d4 <HAL_RCC_OscConfig+0x488>
 80023f4:	e013      	b.n	800241e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7fe fd79 	bl	8000eec <HAL_GetTick>
 80023fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fe:	f7fe fd75 	bl	8000eec <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f241 3288 	movw	r2, #5000	; 0x1388
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e12b      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002414:	f7ff fb17 	bl	8001a46 <LL_RCC_LSE_IsReady>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1ef      	bne.n	80023fe <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d02c      	beq.n	8002484 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	2b00      	cmp	r3, #0
 8002430:	d014      	beq.n	800245c <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002432:	f7ff fa90 	bl	8001956 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7fe fd59 	bl	8000eec <HAL_GetTick>
 800243a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800243e:	f7fe fd55 	bl	8000eec <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e10d      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002450:	f7ff faa3 	bl	800199a <LL_RCC_HSI48_IsReady>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f1      	beq.n	800243e <HAL_RCC_OscConfig+0x4f2>
 800245a:	e013      	b.n	8002484 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800245c:	f7ff fa8c 	bl	8001978 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7fe fd44 	bl	8000eec <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002468:	f7fe fd40 	bl	8000eec <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e0f8      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800247a:	f7ff fa8e 	bl	800199a <LL_RCC_HSI48_IsReady>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f1      	bne.n	8002468 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80ee 	beq.w	800266a <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800248e:	f7ff fbec 	bl	8001c6a <LL_RCC_GetSysClkSource>
 8002492:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	f040 80af 	bne.w	8002604 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d123      	bne.n	80024fc <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d11c      	bne.n	80024fc <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d114      	bne.n	80024fc <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d10d      	bne.n	80024fc <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d106      	bne.n	80024fc <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d05d      	beq.n	80025b8 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	2b0c      	cmp	r3, #12
 8002500:	d058      	beq.n	80025b4 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0ab      	b.n	800266c <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002514:	f7ff fc6c 	bl	8001df0 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002518:	f7fe fce8 	bl	8000eec <HAL_GetTick>
 800251c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fce4 	bl	8000eec <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e09c      	b.n	800266c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1ef      	bne.n	8002520 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <HAL_RCC_OscConfig+0x6f4>)
 8002548:	4013      	ands	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002552:	4311      	orrs	r1, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002558:	0212      	lsls	r2, r2, #8
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002560:	4311      	orrs	r1, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002566:	4311      	orrs	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800256c:	430a      	orrs	r2, r1
 800256e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002572:	4313      	orrs	r3, r2
 8002574:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002576:	f7ff fc2c 	bl	8001dd2 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800258a:	f7fe fcaf 	bl	8000eec <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7fe fcab 	bl	8000eec <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e063      	b.n	800266c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ef      	beq.n	8002592 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b2:	e05a      	b.n	800266a <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e059      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d151      	bne.n	800266a <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025c6:	f7ff fc04 	bl	8001dd2 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025da:	f7fe fc87 	bl	8000eec <HAL_GetTick>
 80025de:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe fc83 	bl	8000eec <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e03b      	b.n	800266c <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ef      	beq.n	80025e2 <HAL_RCC_OscConfig+0x696>
 8002602:	e032      	b.n	800266a <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d02d      	beq.n	8002666 <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	f7ff fbf1 	bl	8001df0 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800260e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002618:	f023 0303 	bic.w	r3, r3, #3
 800261c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002628:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800262c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002630:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7fe fc5b 	bl	8000eec <HAL_GetTick>
 8002636:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002638:	e00d      	b.n	8002656 <HAL_RCC_OscConfig+0x70a>
 800263a:	bf00      	nop
 800263c:	58000400 	.word	0x58000400
 8002640:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fc52 	bl	8000eec <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ef      	bne.n	8002644 <HAL_RCC_OscConfig+0x6f8>
 8002664:	e001      	b.n	800266a <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3734      	adds	r7, #52	; 0x34
 8002670:	46bd      	mov	sp, r7
 8002672:	bd90      	pop	{r4, r7, pc}

08002674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e12a      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b97      	ldr	r3, [pc, #604]	; (80028e8 <HAL_RCC_ClockConfig+0x274>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d91b      	bls.n	80026ce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <HAL_RCC_ClockConfig+0x274>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 0207 	bic.w	r2, r3, #7
 800269e:	4992      	ldr	r1, [pc, #584]	; (80028e8 <HAL_RCC_ClockConfig+0x274>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a6:	f7fe fc21 	bl	8000eec <HAL_GetTick>
 80026aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026ae:	f7fe fc1d 	bl	8000eec <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e10e      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c0:	4b89      	ldr	r3, [pc, #548]	; (80028e8 <HAL_RCC_ClockConfig+0x274>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d1ef      	bne.n	80026ae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff facf 	bl	8001c82 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026e4:	f7fe fc02 	bl	8000eec <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026ec:	f7fe fbfe 	bl	8000eec <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e0ef      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026fe:	f7ff fbc9 	bl	8001e94 <LL_RCC_IsActiveFlag_HPRE>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f1      	beq.n	80026ec <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d016      	beq.n	8002742 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fac6 	bl	8001caa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800271e:	f7fe fbe5 	bl	8000eec <HAL_GetTick>
 8002722:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002726:	f7fe fbe1 	bl	8000eec <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0d2      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002738:	f7ff fbbe 	bl	8001eb8 <LL_RCC_IsActiveFlag_C2HPRE>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f1      	beq.n	8002726 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fabf 	bl	8001cd6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002758:	f7fe fbc8 	bl	8000eec <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002760:	f7fe fbc4 	bl	8000eec <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0b5      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002772:	f7ff fbb4 	bl	8001ede <LL_RCC_IsActiveFlag_SHDHPRE>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f1      	beq.n	8002760 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d016      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fab9 	bl	8001d04 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002792:	f7fe fbab 	bl	8000eec <HAL_GetTick>
 8002796:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800279a:	f7fe fba7 	bl	8000eec <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e098      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027ac:	f7ff fbaa 	bl	8001f04 <LL_RCC_IsActiveFlag_PPRE1>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f1      	beq.n	800279a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d017      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff faaf 	bl	8001d2c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027ce:	f7fe fb8d 	bl	8000eec <HAL_GetTick>
 80027d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027d6:	f7fe fb89 	bl	8000eec <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e07a      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027e8:	f7ff fb9e 	bl	8001f28 <LL_RCC_IsActiveFlag_PPRE2>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f1      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d043      	beq.n	8002886 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d106      	bne.n	8002814 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002806:	f7ff f84f 	bl	80018a8 <LL_RCC_HSE_IsReady>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d11e      	bne.n	800284e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e064      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d106      	bne.n	800282a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800281c:	f7ff faf7 	bl	8001e0e <LL_RCC_PLL_IsReady>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d113      	bne.n	800284e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e059      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002832:	f7ff f9b7 	bl	8001ba4 <LL_RCC_MSI_IsReady>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d108      	bne.n	800284e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e04e      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002840:	f7ff f862 	bl	8001908 <LL_RCC_HSI_IsReady>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e047      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff f9f5 	bl	8001c42 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7fe fb48 	bl	8000eec <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe fb44 	bl	8000eec <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e033      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	f7ff f9f8 	bl	8001c6a <LL_RCC_GetSysClkSource>
 800287a:	4602      	mov	r2, r0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	429a      	cmp	r2, r3
 8002884:	d1ec      	bne.n	8002860 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002886:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_RCC_ClockConfig+0x274>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d21b      	bcs.n	80028cc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_RCC_ClockConfig+0x274>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 0207 	bic.w	r2, r3, #7
 800289c:	4912      	ldr	r1, [pc, #72]	; (80028e8 <HAL_RCC_ClockConfig+0x274>)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a4:	f7fe fb22 	bl	8000eec <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	e008      	b.n	80028be <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028ac:	f7fe fb1e 	bl	8000eec <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e00f      	b.n	80028de <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1ef      	bne.n	80028ac <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80028cc:	f7fe fa00 	bl	8000cd0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80028d0:	f7fe fb18 	bl	8000f04 <HAL_GetTickPrio>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe f90e 	bl	8000af8 <HAL_InitTick>
 80028dc:	4603      	mov	r3, r0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	58004000 	.word	0x58004000

080028ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f2:	f7ff f9ba 	bl	8001c6a <LL_RCC_GetSysClkSource>
 80028f6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028fe:	f7ff f976 	bl	8001bee <LL_RCC_MSI_GetRange>
 8002902:	4603      	mov	r3, r0
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	4a2a      	ldr	r2, [pc, #168]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	e04a      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b04      	cmp	r3, #4
 8002918:	d102      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800291a:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e044      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b08      	cmp	r3, #8
 8002924:	d10a      	bne.n	800293c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002926:	f7fe ff71 	bl	800180c <LL_RCC_HSE_IsEnabledDiv2>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d102      	bne.n	8002936 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	e039      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002936:	4b21      	ldr	r3, [pc, #132]	; (80029bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e036      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800293c:	f7ff fa9e 	bl	8001e7c <LL_RCC_PLL_GetMainSource>
 8002940:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d002      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x62>
 8002948:	2b03      	cmp	r3, #3
 800294a:	d003      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x68>
 800294c:	e00d      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002950:	60bb      	str	r3, [r7, #8]
        break;
 8002952:	e015      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002954:	f7fe ff5a 	bl	800180c <LL_RCC_HSE_IsEnabledDiv2>
 8002958:	4603      	mov	r3, r0
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800295e:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002960:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002962:	e00d      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002966:	60bb      	str	r3, [r7, #8]
        break;
 8002968:	e00a      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800296a:	f7ff f940 	bl	8001bee <LL_RCC_MSI_GetRange>
 800296e:	4603      	mov	r3, r0
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	60bb      	str	r3, [r7, #8]
        break;
 800297e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002980:	f7ff fa57 	bl	8001e32 <LL_RCC_PLL_GetN>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	fb03 f402 	mul.w	r4, r3, r2
 800298c:	f7ff fa6a 	bl	8001e64 <LL_RCC_PLL_GetDivider>
 8002990:	4603      	mov	r3, r0
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	3301      	adds	r3, #1
 8002996:	fbb4 f4f3 	udiv	r4, r4, r3
 800299a:	f7ff fa57 	bl	8001e4c <LL_RCC_PLL_GetR>
 800299e:	4603      	mov	r3, r0
 80029a0:	0f5b      	lsrs	r3, r3, #29
 80029a2:	3301      	adds	r3, #1
 80029a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80029aa:	68fb      	ldr	r3, [r7, #12]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd90      	pop	{r4, r7, pc}
 80029b4:	08004b38 	.word	0x08004b38
 80029b8:	00f42400 	.word	0x00f42400
 80029bc:	01e84800 	.word	0x01e84800

080029c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c0:	b598      	push	{r3, r4, r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80029c4:	f7ff ff92 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80029c8:	4604      	mov	r4, r0
 80029ca:	f7ff f9c3 	bl	8001d54 <LL_RCC_GetAHBPrescaler>
 80029ce:	4603      	mov	r3, r0
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	4a03      	ldr	r2, [pc, #12]	; (80029e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80029d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd98      	pop	{r3, r4, r7, pc}
 80029e4:	08004ad8 	.word	0x08004ad8

080029e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e8:	b598      	push	{r3, r4, r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80029ec:	f7ff ffe8 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80029f0:	4604      	mov	r4, r0
 80029f2:	f7ff f9e2 	bl	8001dba <LL_RCC_GetAPB2Prescaler>
 80029f6:	4603      	mov	r3, r0
 80029f8:	0adb      	lsrs	r3, r3, #11
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd98      	pop	{r3, r4, r7, pc}
 8002a10:	08004b18 	.word	0x08004b18

08002a14 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	226f      	movs	r2, #111	; 0x6f
 8002a22:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8002a24:	f7ff f921 	bl	8001c6a <LL_RCC_GetSysClkSource>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8002a2e:	f7ff f991 	bl	8001d54 <LL_RCC_GetAHBPrescaler>
 8002a32:	4602      	mov	r2, r0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8002a38:	f7ff f9b3 	bl	8001da2 <LL_RCC_GetAPB1Prescaler>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8002a42:	f7ff f9ba 	bl	8001dba <LL_RCC_GetAPB2Prescaler>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8002a4c:	f7ff f98e 	bl	8001d6c <LL_C2_RCC_GetAHBPrescaler>
 8002a50:	4602      	mov	r2, r0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8002a56:	f7ff f996 	bl	8001d86 <LL_RCC_GetAHB4Prescaler>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <HAL_RCC_GetClockConfig+0x60>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0207 	and.w	r2, r3, #7
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	58004000 	.word	0x58004000

08002a78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2bb0      	cmp	r3, #176	; 0xb0
 8002a84:	d903      	bls.n	8002a8e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e007      	b.n	8002a9e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	4a11      	ldr	r2, [pc, #68]	; (8002adc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002a9e:	f7ff f972 	bl	8001d86 <LL_RCC_GetAHB4Prescaler>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	0c9c      	lsrs	r4, r3, #18
 8002ac2:	f7fe fe95 	bl	80017f0 <HAL_PWREx_GetVoltageRange>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4620      	mov	r0, r4
 8002acc:	f000 f80c 	bl	8002ae8 <RCC_SetFlashLatency>
 8002ad0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd90      	pop	{r4, r7, pc}
 8002ada:	bf00      	nop
 8002adc:	08004b38 	.word	0x08004b38
 8002ae0:	08004ad8 	.word	0x08004ad8
 8002ae4:	431bde83 	.word	0x431bde83

08002ae8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b093      	sub	sp, #76	; 0x4c
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002af2:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <RCC_SetFlashLatency+0xf0>)
 8002af4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002af8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002afa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002afe:	4a37      	ldr	r2, [pc, #220]	; (8002bdc <RCC_SetFlashLatency+0xf4>)
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b0a:	4b35      	ldr	r3, [pc, #212]	; (8002be0 <RCC_SetFlashLatency+0xf8>)
 8002b0c:	f107 040c 	add.w	r4, r7, #12
 8002b10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b16:	2300      	movs	r3, #0
 8002b18:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b20:	d11c      	bne.n	8002b5c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	643b      	str	r3, [r7, #64]	; 0x40
 8002b26:	e015      	b.n	8002b54 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b30:	4413      	add	r3, r2
 8002b32:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d808      	bhi.n	8002b4e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b44:	4413      	add	r3, r2
 8002b46:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b4a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b4c:	e022      	b.n	8002b94 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b50:	3301      	adds	r3, #1
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
 8002b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d9e6      	bls.n	8002b28 <RCC_SetFlashLatency+0x40>
 8002b5a:	e01b      	b.n	8002b94 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	e015      	b.n	8002b8e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d808      	bhi.n	8002b88 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002b7e:	4413      	add	r3, r2
 8002b80:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b84:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b86:	e005      	b.n	8002b94 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d9e6      	bls.n	8002b62 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <RCC_SetFlashLatency+0xfc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 0207 	bic.w	r2, r3, #7
 8002b9c:	4911      	ldr	r1, [pc, #68]	; (8002be4 <RCC_SetFlashLatency+0xfc>)
 8002b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ba4:	f7fe f9a2 	bl	8000eec <HAL_GetTick>
 8002ba8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002baa:	e008      	b.n	8002bbe <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bac:	f7fe f99e 	bl	8000eec <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e007      	b.n	8002bce <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <RCC_SetFlashLatency+0xfc>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d1ef      	bne.n	8002bac <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	374c      	adds	r7, #76	; 0x4c
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd90      	pop	{r4, r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	08004a4c 	.word	0x08004a4c
 8002bdc:	08004a5c 	.word	0x08004a5c
 8002be0:	08004a68 	.word	0x08004a68
 8002be4:	58004000 	.word	0x58004000

08002be8 <LL_RCC_LSE_IsEnabled>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <LL_RCC_LSE_IsEnabled+0x18>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <LL_RCC_LSE_IsEnabled+0x1a>
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_LSE_IsReady>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d101      	bne.n	8002c24 <LL_RCC_LSE_IsReady+0x18>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <LL_RCC_LSE_IsReady+0x1a>
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_RCC_SetRFWKPClockSource>:
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <LL_RCC_SetSMPSClockSource>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	f023 0203 	bic.w	r2, r3, #3
 8002c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_RCC_SetSMPSPrescaler>:
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_RCC_SetUSARTClockSource>:
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f023 0203 	bic.w	r2, r3, #3
 8002cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_RCC_SetLPUARTClockSource>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_RCC_SetI2CClockSource>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_RCC_SetLPTIMClockSource>:
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	43db      	mvns	r3, r3
 8002d56:	401a      	ands	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_SetSAIClockSource>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_RCC_SetRNGClockSource>:
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_RCC_SetCLK48ClockSource>:
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_RCC_SetUSBClockSource>:
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ffe3 	bl	8002dca <LL_RCC_SetCLK48ClockSource>
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <LL_RCC_SetADCClockSource>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_RCC_SetRTCClockSource>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_RCC_GetRTCClockSource>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_ForceBackupDomainReset>:
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_RCC_PLLSAI1_Enable>:
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ed4:	6013      	str	r3, [r2, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_RCC_PLLSAI1_Disable>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ef2:	6013      	str	r3, [r2, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_RCC_PLLSAI1_IsReady>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f10:	d101      	bne.n	8002f16 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b088      	sub	sp, #32
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f2e:	2300      	movs	r3, #0
 8002f30:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d033      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f46:	d00c      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f4c:	d802      	bhi.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d010      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f52:	e017      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f58:	d017      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002f5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f5e:	d016      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002f60:	e010      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f72:	e00d      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f947 	bl	800320c <RCCEx_PLLSAI1_ConfigNP>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f82:	e005      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	77fb      	strb	r3, [r7, #31]
        break;
 8002f88:	e002      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002f8a:	bf00      	nop
 8002f8c:	e000      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f90:	7ffb      	ldrb	r3, [r7, #31]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fee9 	bl	8002d72 <LL_RCC_SetSAIClockSource>
 8002fa0:	e001      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa2:	7ffb      	ldrb	r3, [r7, #31]
 8002fa4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d046      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002fb2:	f7ff ff57 	bl	8002e64 <LL_RCC_GetRTCClockSource>
 8002fb6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d03c      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002fc2:	f7fe fc05 	bl	80017d0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff31 	bl	8002e38 <LL_RCC_SetRTCClockSource>
 8002fd6:	e02e      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002fe2:	f7ff ff4c 	bl	8002e7e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002fe6:	f7ff ff5b 	bl	8002ea0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003002:	f7ff fdf1 	bl	8002be8 <LL_RCC_LSE_IsEnabled>
 8003006:	4603      	mov	r3, r0
 8003008:	2b01      	cmp	r3, #1
 800300a:	d114      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800300c:	f7fd ff6e 	bl	8000eec <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003012:	e00b      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7fd ff6a 	bl	8000eec <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d902      	bls.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	77fb      	strb	r3, [r7, #31]
              break;
 800302a:	e004      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800302c:	f7ff fdee 	bl	8002c0c <LL_RCC_LSE_IsReady>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d1ee      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	77bb      	strb	r3, [r7, #30]
 800303a:	e001      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303c:	7ffb      	ldrb	r3, [r7, #31]
 800303e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fe2b 	bl	8002cac <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fe36 	bl	8002cd8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fe5e 	bl	8002d3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0320 	and.w	r3, r3, #32
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fe53 	bl	8002d3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fe2b 	bl	8002d04 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fe20 	bl	8002d04 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d022      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fe8e 	bl	8002df6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030e2:	d107      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80030e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030fc:	d10b      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3304      	adds	r3, #4
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f8dd 	bl	80032c2 <RCCEx_PLLSAI1_ConfigNQ>
 8003108:	4603      	mov	r3, r0
 800310a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800310c:	7ffb      	ldrb	r3, [r7, #31]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8003112:	7ffb      	ldrb	r3, [r7, #31]
 8003114:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800311e:	2b00      	cmp	r3, #0
 8003120:	d02b      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312a:	d008      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003134:	d003      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313a:	2b00      	cmp	r3, #0
 800313c:	d105      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x228>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fe2b 	bl	8002d9e <LL_RCC_SetRNGClockSource>
 8003148:	e00a      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	2000      	movs	r0, #0
 8003156:	f7ff fe22 	bl	8002d9e <LL_RCC_SetRNGClockSource>
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff fe35 	bl	8002dca <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003168:	d107      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800316a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003178:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003182:	2b00      	cmp	r3, #0
 8003184:	d022      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fe3e 	bl	8002e0c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003198:	d107      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800319a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031b2:	d10b      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 f8dd 	bl	8003378 <RCCEx_PLLSAI1_ConfigNR>
 80031be:	4603      	mov	r3, r0
 80031c0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80031c2:	7ffb      	ldrb	r3, [r7, #31]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80031c8:	7ffb      	ldrb	r3, [r7, #31]
 80031ca:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fd27 	bl	8002c30 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fd46 	bl	8002c84 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fd2d 	bl	8002c5c <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8003202:	7fbb      	ldrb	r3, [r7, #30]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003218:	f7ff fe62 	bl	8002ee0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800321c:	f7fd fe66 	bl	8000eec <HAL_GetTick>
 8003220:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003222:	e009      	b.n	8003238 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003224:	f7fd fe62 	bl	8000eec <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d902      	bls.n	8003238 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	73fb      	strb	r3, [r7, #15]
      break;
 8003236:	e004      	b.n	8003242 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003238:	f7ff fe61 	bl	8002efe <LL_RCC_PLLSAI1_IsReady>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d137      	bne.n	80032b8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800325c:	4313      	orrs	r3, r2
 800325e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003272:	4313      	orrs	r3, r2
 8003274:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003276:	f7ff fe24 	bl	8002ec2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800327a:	f7fd fe37 	bl	8000eec <HAL_GetTick>
 800327e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003280:	e009      	b.n	8003296 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003282:	f7fd fe33 	bl	8000eec <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d902      	bls.n	8003296 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	73fb      	strb	r3, [r7, #15]
        break;
 8003294:	e004      	b.n	80032a0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003296:	f7ff fe32 	bl	8002efe <LL_RCC_PLLSAI1_IsReady>
 800329a:	4603      	mov	r3, r0
 800329c:	2b01      	cmp	r3, #1
 800329e:	d1f0      	bne.n	8003282 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d108      	bne.n	80032b8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b4:	4313      	orrs	r3, r2
 80032b6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80032ce:	f7ff fe07 	bl	8002ee0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032d2:	f7fd fe0b 	bl	8000eec <HAL_GetTick>
 80032d6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032d8:	e009      	b.n	80032ee <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032da:	f7fd fe07 	bl	8000eec <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d902      	bls.n	80032ee <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	73fb      	strb	r3, [r7, #15]
      break;
 80032ec:	e004      	b.n	80032f8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032ee:	f7ff fe06 	bl	8002efe <LL_RCC_PLLSAI1_IsReady>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f0      	bne.n	80032da <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d137      	bne.n	800336e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003312:	4313      	orrs	r3, r2
 8003314:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003328:	4313      	orrs	r3, r2
 800332a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800332c:	f7ff fdc9 	bl	8002ec2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003330:	f7fd fddc 	bl	8000eec <HAL_GetTick>
 8003334:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003336:	e009      	b.n	800334c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003338:	f7fd fdd8 	bl	8000eec <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d902      	bls.n	800334c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	73fb      	strb	r3, [r7, #15]
        break;
 800334a:	e004      	b.n	8003356 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800334c:	f7ff fdd7 	bl	8002efe <LL_RCC_PLLSAI1_IsReady>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d1f0      	bne.n	8003338 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d108      	bne.n	800336e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800336a:	4313      	orrs	r3, r2
 800336c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003384:	f7ff fdac 	bl	8002ee0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003388:	f7fd fdb0 	bl	8000eec <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800338e:	e009      	b.n	80033a4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003390:	f7fd fdac 	bl	8000eec <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d902      	bls.n	80033a4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	73fb      	strb	r3, [r7, #15]
      break;
 80033a2:	e004      	b.n	80033ae <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033a4:	f7ff fdab 	bl	8002efe <LL_RCC_PLLSAI1_IsReady>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d137      	bne.n	8003424 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c8:	4313      	orrs	r3, r2
 80033ca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80033cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033de:	4313      	orrs	r3, r2
 80033e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033e2:	f7ff fd6e 	bl	8002ec2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e6:	f7fd fd81 	bl	8000eec <HAL_GetTick>
 80033ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033ec:	e009      	b.n	8003402 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033ee:	f7fd fd7d 	bl	8000eec <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d902      	bls.n	8003402 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003400:	e004      	b.n	800340c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003402:	f7ff fd7c 	bl	8002efe <LL_RCC_PLLSAI1_IsReady>
 8003406:	4603      	mov	r3, r0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d1f0      	bne.n	80033ee <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d108      	bne.n	8003424 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003420:	4313      	orrs	r3, r2
 8003422:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e090      	b.n	8003562 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7fd fadf 	bl	8000a18 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	22ca      	movs	r2, #202	; 0xca
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2253      	movs	r2, #83	; 0x53
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f89f 	bl	80035b6 <RTC_EnterInitMode>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	22ff      	movs	r2, #255	; 0xff
 8003484:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2204      	movs	r2, #4
 800348a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e067      	b.n	8003562 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6899      	ldr	r1, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68d2      	ldr	r2, [r2, #12]
 80034cc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6919      	ldr	r1, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	041a      	lsls	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0203 	bic.w	r2, r2, #3
 8003500:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d113      	bne.n	8003550 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f81e 	bl	800356a <HAL_RTC_WaitForSynchro>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00d      	beq.n	8003550 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	22ff      	movs	r2, #255	; 0xff
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2204      	movs	r2, #4
 8003540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e008      	b.n	8003562 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	22ff      	movs	r2, #255	; 0xff
 8003556:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003580:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003582:	f7fd fcb3 	bl	8000eec <HAL_GetTick>
 8003586:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003588:	e009      	b.n	800359e <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800358a:	f7fd fcaf 	bl	8000eec <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003598:	d901      	bls.n	800359e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e007      	b.n	80035ae <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ee      	beq.n	800358a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d119      	bne.n	8003600 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80035d6:	f7fd fc89 	bl	8000eec <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80035dc:	e009      	b.n	80035f2 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80035de:	f7fd fc85 	bl	8000eec <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ec:	d901      	bls.n	80035f2 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e007      	b.n	8003602 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ee      	beq.n	80035de <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e01d      	b.n	8003658 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fd fa07 	bl	8000a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3304      	adds	r3, #4
 8003646:	4619      	mov	r1, r3
 8003648:	4610      	mov	r0, r2
 800364a:	f000 fa33 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <HAL_TIM_Base_Start_IT+0x50>)
 8003680:	4013      	ands	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b06      	cmp	r3, #6
 8003688:	d00b      	beq.n	80036a2 <HAL_TIM_Base_Start_IT+0x42>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d007      	beq.n	80036a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	00010007 	.word	0x00010007

080036b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d122      	bne.n	8003710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d11b      	bne.n	8003710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0202 	mvn.w	r2, #2
 80036e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9be 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9b0 	bl	8003a64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f9c1 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d122      	bne.n	8003764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d11b      	bne.n	8003764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0204 	mvn.w	r2, #4
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f994 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f986 	bl	8003a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f997 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	d122      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d11b      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0208 	mvn.w	r2, #8
 8003788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2204      	movs	r2, #4
 800378e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f96a 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 80037a4:	e005      	b.n	80037b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f95c 	bl	8003a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f96d 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d122      	bne.n	800380c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d11b      	bne.n	800380c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0210 	mvn.w	r2, #16
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2208      	movs	r2, #8
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f940 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f932 	bl	8003a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f943 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0201 	mvn.w	r2, #1
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd f860 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d10e      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d107      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa92 	bl	8003d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003872:	d10e      	bne.n	8003892 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b80      	cmp	r3, #128	; 0x80
 8003880:	d107      	bne.n	8003892 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800388a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fa85 	bl	8003d9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d10e      	bne.n	80038be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b40      	cmp	r3, #64	; 0x40
 80038ac:	d107      	bne.n	80038be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f8f1 	bl	8003aa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d10e      	bne.n	80038ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d107      	bne.n	80038ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f06f 0220 	mvn.w	r2, #32
 80038e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fa45 	bl	8003d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_TIM_ConfigClockSource+0x18>
 8003906:	2302      	movs	r3, #2
 8003908:	e0a8      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x16a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003928:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800392c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003934:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d067      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0x124>
 8003946:	2b40      	cmp	r3, #64	; 0x40
 8003948:	d80b      	bhi.n	8003962 <HAL_TIM_ConfigClockSource+0x70>
 800394a:	2b10      	cmp	r3, #16
 800394c:	d073      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x144>
 800394e:	2b10      	cmp	r3, #16
 8003950:	d802      	bhi.n	8003958 <HAL_TIM_ConfigClockSource+0x66>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d06f      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003956:	e078      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003958:	2b20      	cmp	r3, #32
 800395a:	d06c      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x144>
 800395c:	2b30      	cmp	r3, #48	; 0x30
 800395e:	d06a      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003960:	e073      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003962:	2b70      	cmp	r3, #112	; 0x70
 8003964:	d00d      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x90>
 8003966:	2b70      	cmp	r3, #112	; 0x70
 8003968:	d804      	bhi.n	8003974 <HAL_TIM_ConfigClockSource+0x82>
 800396a:	2b50      	cmp	r3, #80	; 0x50
 800396c:	d033      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0xe4>
 800396e:	2b60      	cmp	r3, #96	; 0x60
 8003970:	d041      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003972:	e06a      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003978:	d066      	beq.n	8003a48 <HAL_TIM_ConfigClockSource+0x156>
 800397a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800397e:	d017      	beq.n	80039b0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003980:	e063      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f000 f96f 	bl	8003c74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	609a      	str	r2, [r3, #8]
      break;
 80039ae:	e04c      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6899      	ldr	r1, [r3, #8]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f000 f958 	bl	8003c74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d2:	609a      	str	r2, [r3, #8]
      break;
 80039d4:	e039      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6859      	ldr	r1, [r3, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f000 f8ca 	bl	8003b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2150      	movs	r1, #80	; 0x50
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f923 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 80039f4:	e029      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6859      	ldr	r1, [r3, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f000 f8e9 	bl	8003bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2160      	movs	r1, #96	; 0x60
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f913 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 8003a14:	e019      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6859      	ldr	r1, [r3, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f000 f8aa 	bl	8003b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2140      	movs	r1, #64	; 0x40
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f903 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 8003a34:	e009      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f000 f8fa 	bl	8003c3a <TIM_ITRx_SetConfig>
      break;
 8003a46:	e000      	b.n	8003a4a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003a48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <TIM_Base_SetConfig+0xbc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_Base_SetConfig+0x20>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad2:	d108      	bne.n	8003ae6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a21      	ldr	r2, [pc, #132]	; (8003b70 <TIM_Base_SetConfig+0xbc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <TIM_Base_SetConfig+0x52>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af4:	d007      	beq.n	8003b06 <TIM_Base_SetConfig+0x52>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <TIM_Base_SetConfig+0xc0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_Base_SetConfig+0x52>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <TIM_Base_SetConfig+0xc4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a0c      	ldr	r2, [pc, #48]	; (8003b70 <TIM_Base_SetConfig+0xbc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d007      	beq.n	8003b54 <TIM_Base_SetConfig+0xa0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a0b      	ldr	r2, [pc, #44]	; (8003b74 <TIM_Base_SetConfig+0xc0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_Base_SetConfig+0xa0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <TIM_Base_SetConfig+0xc4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d103      	bne.n	8003b5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	615a      	str	r2, [r3, #20]
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40014400 	.word	0x40014400
 8003b78:	40014800 	.word	0x40014800

08003b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f023 0201 	bic.w	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f023 030a 	bic.w	r3, r3, #10
 8003bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b087      	sub	sp, #28
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f023 0210 	bic.w	r2, r3, #16
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	031b      	lsls	r3, r3, #12
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f043 0307 	orr.w	r3, r3, #7
 8003c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	021a      	lsls	r2, r3, #8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	609a      	str	r2, [r3, #8]
}
 8003ca8:	bf00      	nop
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e04a      	b.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d108      	bne.n	8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d34:	d10c      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40012c00 	.word	0x40012c00

08003d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003db8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003dbc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	89fb      	ldrh	r3, [r7, #14]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003de8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003dec:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	b21a      	sxth	r2, r3
 8003df8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	b21b      	sxth	r3, r3
 8003e00:	4013      	ands	r3, r2
 8003e02:	b21b      	sxth	r3, r3
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	f107 0014 	add.w	r0, r7, #20
 8003e28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ffaf 	bl	8003db0 <USB_EnableGlobalInt>

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e5e:	b004      	add	sp, #16
 8003e60:	4770      	bx	lr

08003e62 <drv_GPIO_init>:
/* Global variables ---------------------------------------------------*/

/* Public functions ----------------------------------------------------*/

void drv_GPIO_init(GPIO_init_t* pGPIOInit)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  GPIO_TypeDef* GPIOx;

  GPIOx = get_GPIO_port(pGPIOInit);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f934 	bl	80040d8 <get_GPIO_port>
 8003e70:	60f8      	str	r0, [r7, #12]
  set_GPIO_mode(pGPIOInit, GPIOx);
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f953 	bl	8004120 <set_GPIO_mode>
  set_GPIO_type(pGPIOInit, GPIOx);
 8003e7a:	68f9      	ldr	r1, [r7, #12]
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f901 	bl	8004084 <set_GPIO_type>
  set_GPIO_speed(pGPIOInit, GPIOx);
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f8b1 	bl	8003fec <set_GPIO_speed>
  set_GPIO_pull(pGPIOInit, GPIOx);
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f873 	bl	8003f78 <set_GPIO_pull>

}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <drv_GPIO_set_pin>:

void drv_GPIO_set_pin(eGPIO_Ports_t ePort, bool_t bState, uint8_t u8pinNumber)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	71bb      	strb	r3, [r7, #6]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	717b      	strb	r3, [r7, #5]
  switch(ePort)
 8003eae:	79fb      	ldrb	r3, [r7, #7]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d022      	beq.n	8003efa <drv_GPIO_set_pin+0x5e>
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d03a      	beq.n	8003f2e <drv_GPIO_set_pin+0x92>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d000      	beq.n	8003ebe <drv_GPIO_set_pin+0x22>
  {
    case GPIO_PORTA: { bState ? (GPIOA->ODR |= (0x01 << u8pinNumber) ) : (GPIOA->ODR &= ~(0x01 << u8pinNumber) ); } break;
    case GPIO_PORTB: { bState ? (GPIOB->ODR |= (0x01 << u8pinNumber) ) : (GPIOB->ODR &= ~(0x01 << u8pinNumber) ); } break;
    case GPIO_PORTC: { bState ? (GPIOC->ODR |= (0x01 << u8pinNumber) ) : (GPIOC->ODR &= ~(0x01 << u8pinNumber) ); } break;
    default : break;
 8003ebc:	e051      	b.n	8003f62 <drv_GPIO_set_pin+0xc6>
    case GPIO_PORTA: { bState ? (GPIOA->ODR |= (0x01 << u8pinNumber) ) : (GPIOA->ODR &= ~(0x01 << u8pinNumber) ); } break;
 8003ebe:	79bb      	ldrb	r3, [r7, #6]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00c      	beq.n	8003ede <drv_GPIO_set_pin+0x42>
 8003ec4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	797a      	ldrb	r2, [r7, #5]
 8003ecc:	2101      	movs	r1, #1
 8003ece:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6153      	str	r3, [r2, #20]
 8003edc:	e041      	b.n	8003f62 <drv_GPIO_set_pin+0xc6>
 8003ede:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	797a      	ldrb	r2, [r7, #5]
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eec:	43d2      	mvns	r2, r2
 8003eee:	4611      	mov	r1, r2
 8003ef0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	6153      	str	r3, [r2, #20]
 8003ef8:	e033      	b.n	8003f62 <drv_GPIO_set_pin+0xc6>
    case GPIO_PORTB: { bState ? (GPIOB->ODR |= (0x01 << u8pinNumber) ) : (GPIOB->ODR &= ~(0x01 << u8pinNumber) ); } break;
 8003efa:	79bb      	ldrb	r3, [r7, #6]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <drv_GPIO_set_pin+0x7a>
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <drv_GPIO_set_pin+0xd4>)
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	797a      	ldrb	r2, [r7, #5]
 8003f06:	2101      	movs	r1, #1
 8003f08:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <drv_GPIO_set_pin+0xd4>)
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6153      	str	r3, [r2, #20]
 8003f14:	e025      	b.n	8003f62 <drv_GPIO_set_pin+0xc6>
 8003f16:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <drv_GPIO_set_pin+0xd4>)
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	797a      	ldrb	r2, [r7, #5]
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f22:	43d2      	mvns	r2, r2
 8003f24:	4611      	mov	r1, r2
 8003f26:	4a12      	ldr	r2, [pc, #72]	; (8003f70 <drv_GPIO_set_pin+0xd4>)
 8003f28:	400b      	ands	r3, r1
 8003f2a:	6153      	str	r3, [r2, #20]
 8003f2c:	e019      	b.n	8003f62 <drv_GPIO_set_pin+0xc6>
    case GPIO_PORTC: { bState ? (GPIOC->ODR |= (0x01 << u8pinNumber) ) : (GPIOC->ODR &= ~(0x01 << u8pinNumber) ); } break;
 8003f2e:	79bb      	ldrb	r3, [r7, #6]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <drv_GPIO_set_pin+0xae>
 8003f34:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <drv_GPIO_set_pin+0xd8>)
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	797a      	ldrb	r2, [r7, #5]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f40:	4611      	mov	r1, r2
 8003f42:	4a0c      	ldr	r2, [pc, #48]	; (8003f74 <drv_GPIO_set_pin+0xd8>)
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6153      	str	r3, [r2, #20]
 8003f48:	e00a      	b.n	8003f60 <drv_GPIO_set_pin+0xc4>
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <drv_GPIO_set_pin+0xd8>)
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	797a      	ldrb	r2, [r7, #5]
 8003f50:	2101      	movs	r1, #1
 8003f52:	fa01 f202 	lsl.w	r2, r1, r2
 8003f56:	43d2      	mvns	r2, r2
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4a06      	ldr	r2, [pc, #24]	; (8003f74 <drv_GPIO_set_pin+0xd8>)
 8003f5c:	400b      	ands	r3, r1
 8003f5e:	6153      	str	r3, [r2, #20]
 8003f60:	bf00      	nop
  }
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	48000400 	.word	0x48000400
 8003f74:	48000800 	.word	0x48000800

08003f78 <set_GPIO_pull>:


/* Private functions ---------------------------------------------------*/
static void set_GPIO_pull(GPIO_init_t* pGPIOPull, GPIO_TypeDef* GPIOx)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  switch(pGPIOPull->gpioPuPd)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	791b      	ldrb	r3, [r3, #4]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d011      	beq.n	8003fae <set_GPIO_pull+0x36>
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d01b      	beq.n	8003fc6 <set_GPIO_pull+0x4e>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d000      	beq.n	8003f94 <set_GPIO_pull+0x1c>
   {
     case GPIO_NO_PULL:   { GPIOx->PUPDR &= ~(0x01 << (pGPIOPull->u8pinNumber * 2)  ); } break;
     case GPIO_PULLUP:    { GPIOx->PUPDR |=  (0x01 << (pGPIOPull->u8pinNumber * 2) ); } break;
     case GPIO_PULL_DOWN: { GPIOx->PUPDR |=  (0x02 << (pGPIOPull->u8pinNumber * 2) ); } break;
     default: break;
 8003f92:	e024      	b.n	8003fde <set_GPIO_pull+0x66>
     case GPIO_NO_PULL:   { GPIOx->PUPDR &= ~(0x01 << (pGPIOPull->u8pinNumber * 2)  ); } break;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	7952      	ldrb	r2, [r2, #5]
 8003f9c:	0052      	lsls	r2, r2, #1
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa4:	43d2      	mvns	r2, r2
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	60da      	str	r2, [r3, #12]
 8003fac:	e017      	b.n	8003fde <set_GPIO_pull+0x66>
     case GPIO_PULLUP:    { GPIOx->PUPDR |=  (0x01 << (pGPIOPull->u8pinNumber * 2) ); } break;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	7952      	ldrb	r2, [r2, #5]
 8003fb6:	0052      	lsls	r2, r2, #1
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	60da      	str	r2, [r3, #12]
 8003fc4:	e00b      	b.n	8003fde <set_GPIO_pull+0x66>
     case GPIO_PULL_DOWN: { GPIOx->PUPDR |=  (0x02 << (pGPIOPull->u8pinNumber * 2) ); } break;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	7952      	ldrb	r2, [r2, #5]
 8003fce:	0052      	lsls	r2, r2, #1
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	bf00      	nop
   }
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <set_GPIO_speed>:


static void set_GPIO_speed(GPIO_init_t* pGPIOSpeed, GPIO_TypeDef* GPIOx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  switch(pGPIOSpeed->gpioSpeed)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	78db      	ldrb	r3, [r3, #3]
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d83b      	bhi.n	8004076 <set_GPIO_speed+0x8a>
 8003ffe:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <set_GPIO_speed+0x18>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	08004015 	.word	0x08004015
 8004008:	0800402f 	.word	0x0800402f
 800400c:	08004047 	.word	0x08004047
 8004010:	0800405f 	.word	0x0800405f
   {
     case GPIO_SPEED_LOW:    { GPIOx->OSPEEDR &= ~(0x01 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	7952      	ldrb	r2, [r2, #5]
 800401c:	0052      	lsls	r2, r2, #1
 800401e:	2101      	movs	r1, #1
 8004020:	fa01 f202 	lsl.w	r2, r1, r2
 8004024:	43d2      	mvns	r2, r2
 8004026:	401a      	ands	r2, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	e024      	b.n	8004078 <set_GPIO_speed+0x8c>
     case GPIO_SPEED_MEDIUM: { GPIOx->OSPEEDR |=  (0x01 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	7952      	ldrb	r2, [r2, #5]
 8004036:	0052      	lsls	r2, r2, #1
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f202 	lsl.w	r2, r1, r2
 800403e:	431a      	orrs	r2, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	e018      	b.n	8004078 <set_GPIO_speed+0x8c>
     case GPIO_SPEED_FAST:   { GPIOx->OSPEEDR |=  (0x02 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	7952      	ldrb	r2, [r2, #5]
 800404e:	0052      	lsls	r2, r2, #1
 8004050:	2102      	movs	r1, #2
 8004052:	fa01 f202 	lsl.w	r2, r1, r2
 8004056:	431a      	orrs	r2, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	e00c      	b.n	8004078 <set_GPIO_speed+0x8c>
     case GPIO_SPEED_HIGH:   { GPIOx->OSPEEDR |=  (0x03 << (pGPIOSpeed->u8pinNumber * 2) ); } break;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	7952      	ldrb	r2, [r2, #5]
 8004066:	0052      	lsls	r2, r2, #1
 8004068:	2103      	movs	r1, #3
 800406a:	fa01 f202 	lsl.w	r2, r1, r2
 800406e:	431a      	orrs	r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	e000      	b.n	8004078 <set_GPIO_speed+0x8c>
     default: break;
 8004076:	bf00      	nop
   }
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <set_GPIO_type>:


static void set_GPIO_type(GPIO_init_t* pGPIOType, GPIO_TypeDef* GPIOx)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  switch(pGPIOType->gpioType)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	789b      	ldrb	r3, [r3, #2]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <set_GPIO_type+0x18>
 8004096:	2b01      	cmp	r3, #1
 8004098:	d00c      	beq.n	80040b4 <set_GPIO_type+0x30>
   {
     case GPIO_TYPE_PUSH_PULL:  { GPIOx->OTYPER &=  ~(0x01 << pGPIOType->u8pinNumber ); } break;
     case GPIO_TYPE_OPEN_DRAIN: { GPIOx->OTYPER |=   (0x01 << pGPIOType->u8pinNumber ); } break;

     default: break;
 800409a:	e016      	b.n	80040ca <set_GPIO_type+0x46>
     case GPIO_TYPE_PUSH_PULL:  { GPIOx->OTYPER &=  ~(0x01 << pGPIOType->u8pinNumber ); } break;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	7952      	ldrb	r2, [r2, #5]
 80040a4:	4611      	mov	r1, r2
 80040a6:	2201      	movs	r2, #1
 80040a8:	408a      	lsls	r2, r1
 80040aa:	43d2      	mvns	r2, r2
 80040ac:	401a      	ands	r2, r3
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	e00a      	b.n	80040ca <set_GPIO_type+0x46>
     case GPIO_TYPE_OPEN_DRAIN: { GPIOx->OTYPER |=   (0x01 << pGPIOType->u8pinNumber ); } break;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	7952      	ldrb	r2, [r2, #5]
 80040bc:	4611      	mov	r1, r2
 80040be:	2201      	movs	r2, #1
 80040c0:	408a      	lsls	r2, r1
 80040c2:	431a      	orrs	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	bf00      	nop
   }
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <get_GPIO_port>:


static GPIO_TypeDef* get_GPIO_port(GPIO_init_t* pGPIOInit)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  GPIO_TypeDef* pretVal = NULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]

  switch(pGPIOInit->gpioPort)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d008      	beq.n	80040fe <get_GPIO_port+0x26>
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d009      	beq.n	8004104 <get_GPIO_port+0x2c>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d000      	beq.n	80040f6 <get_GPIO_port+0x1e>
  {
    case GPIO_PORTA : { pretVal = GPIOA; } break;
    case GPIO_PORTB : { pretVal = GPIOB; } break;
    case GPIO_PORTC : { pretVal = GPIOC; } break;

    default: break;
 80040f4:	e009      	b.n	800410a <get_GPIO_port+0x32>
    case GPIO_PORTA : { pretVal = GPIOA; } break;
 80040f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	e005      	b.n	800410a <get_GPIO_port+0x32>
    case GPIO_PORTB : { pretVal = GPIOB; } break;
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <get_GPIO_port+0x40>)
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e002      	b.n	800410a <get_GPIO_port+0x32>
    case GPIO_PORTC : { pretVal = GPIOC; } break;
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <get_GPIO_port+0x44>)
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	bf00      	nop
  }

  return pretVal;
 800410a:	68fb      	ldr	r3, [r7, #12]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	48000400 	.word	0x48000400
 800411c:	48000800 	.word	0x48000800

08004120 <set_GPIO_mode>:

static void set_GPIO_mode(GPIO_init_t* pGPIOMode, GPIO_TypeDef* GPIOx)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  switch(pGPIOMode->gpioMode)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d847      	bhi.n	80041c2 <set_GPIO_mode+0xa2>
 8004132:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <set_GPIO_mode+0x18>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	08004149 	.word	0x08004149
 800413c:	08004163 	.word	0x08004163
 8004140:	08004193 	.word	0x08004193
 8004144:	080041c3 	.word	0x080041c3
  {
     case GPIO_MODE_INPUT  : {  GPIOx->MODER &= ~(0x01 << ((pGPIOMode->u8pinNumber * 2))); } break;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	7952      	ldrb	r2, [r2, #5]
 8004150:	0052      	lsls	r2, r2, #1
 8004152:	2101      	movs	r1, #1
 8004154:	fa01 f202 	lsl.w	r2, r1, r2
 8004158:	43d2      	mvns	r2, r2
 800415a:	401a      	ands	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e030      	b.n	80041c4 <set_GPIO_mode+0xa4>
     case GPIO_MODER_OUTPUT :
     {
       GPIOx->MODER &= ~(0x03 << ((pGPIOMode->u8pinNumber * 2))); /* Clear the reset value */
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	7952      	ldrb	r2, [r2, #5]
 800416a:	0052      	lsls	r2, r2, #1
 800416c:	2103      	movs	r1, #3
 800416e:	fa01 f202 	lsl.w	r2, r1, r2
 8004172:	43d2      	mvns	r2, r2
 8004174:	401a      	ands	r2, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	601a      	str	r2, [r3, #0]
       GPIOx->MODER |=  (0x01 << ((pGPIOMode->u8pinNumber * 2)));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	7952      	ldrb	r2, [r2, #5]
 8004182:	0052      	lsls	r2, r2, #1
 8004184:	2101      	movs	r1, #1
 8004186:	fa01 f202 	lsl.w	r2, r1, r2
 800418a:	431a      	orrs	r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	601a      	str	r2, [r3, #0]
     } break;
 8004190:	e018      	b.n	80041c4 <set_GPIO_mode+0xa4>
     case GPIO_MODER_ALTERNATE 	:
       {
	 GPIOx->MODER &= ~(0x03 << ((pGPIOMode->u8pinNumber * 2))); /* Clear the reset value */
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	7952      	ldrb	r2, [r2, #5]
 800419a:	0052      	lsls	r2, r2, #1
 800419c:	2103      	movs	r1, #3
 800419e:	fa01 f202 	lsl.w	r2, r1, r2
 80041a2:	43d2      	mvns	r2, r2
 80041a4:	401a      	ands	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	601a      	str	r2, [r3, #0]
	 GPIOx->MODER |=  (0x02 << ((pGPIOMode->u8pinNumber * 2)));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	7952      	ldrb	r2, [r2, #5]
 80041b2:	0052      	lsls	r2, r2, #1
 80041b4:	2102      	movs	r1, #2
 80041b6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ba:	431a      	orrs	r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	601a      	str	r2, [r3, #0]
       } break;
 80041c0:	e000      	b.n	80041c4 <set_GPIO_mode+0xa4>
     case GPIO_MODER_ANALOG 	: { } break;

     default: break;
 80041c2:	bf00      	nop
   }
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <drv_SPI_init>:
/* Global variables ---------------------------------------------------*/

/* Public functions ----------------------------------------------------*/

void drv_SPI_init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
  PA6 SS

  PA11 SPI1_ MISO
  PA12 SPI1_ MOSI
  PA5 SPI1_ SCK*/
  GPIO_init_t SPI_GPIO_CS_PA4 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 80041d6:	4a55      	ldr	r2, [pc, #340]	; (800432c <drv_SPI_init+0x15c>)
 80041d8:	f107 0318 	add.w	r3, r7, #24
 80041dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041e0:	6018      	str	r0, [r3, #0]
 80041e2:	3304      	adds	r3, #4
 80041e4:	8019      	strh	r1, [r3, #0]
				   .gpioSpeed = GPIO_SPEED_HIGH,
				   .gpioPort = GPIO_PORTA,
				   .gpioPuPd = GPIO_PULLUP,
				   .u8pinNumber = SPI_CS_PIN                 };

  GPIO_init_t SPI_GPIO_MISO_PA6 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 80041e6:	4a52      	ldr	r2, [pc, #328]	; (8004330 <drv_SPI_init+0x160>)
 80041e8:	f107 0310 	add.w	r3, r7, #16
 80041ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041f0:	6018      	str	r0, [r3, #0]
 80041f2:	3304      	adds	r3, #4
 80041f4:	8019      	strh	r1, [r3, #0]
				     .gpioSpeed = GPIO_SPEED_HIGH,
				     .gpioPort = GPIO_PORTA,
				     .gpioPuPd = GPIO_PULLUP,
				     .u8pinNumber = 6                 };

  GPIO_init_t SPI_GPIO_MOSI_PA7 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 80041f6:	4a4f      	ldr	r2, [pc, #316]	; (8004334 <drv_SPI_init+0x164>)
 80041f8:	f107 0308 	add.w	r3, r7, #8
 80041fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004200:	6018      	str	r0, [r3, #0]
 8004202:	3304      	adds	r3, #4
 8004204:	8019      	strh	r1, [r3, #0]
  				     .gpioSpeed = GPIO_SPEED_HIGH,
  				     .gpioPort = GPIO_PORTA,
  				     .gpioPuPd = GPIO_PULLUP,
  				     .u8pinNumber = 7                 };

  GPIO_init_t SPI_GPIO_SCK_PA5 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 8004206:	4a4c      	ldr	r2, [pc, #304]	; (8004338 <drv_SPI_init+0x168>)
 8004208:	463b      	mov	r3, r7
 800420a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800420e:	6018      	str	r0, [r3, #0]
 8004210:	3304      	adds	r3, #4
 8004212:	8019      	strh	r1, [r3, #0]
				   .gpioSpeed = GPIO_SPEED_HIGH,
				   .gpioPort = GPIO_PORTA,
				   .gpioPuPd = GPIO_PULLUP,
				   .u8pinNumber = 5                 };

  drv_GPIO_init(&SPI_GPIO_CS_PA4);
 8004214:	f107 0318 	add.w	r3, r7, #24
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff fe22 	bl	8003e62 <drv_GPIO_init>
  drv_GPIO_init(&SPI_GPIO_MISO_PA6);
 800421e:	f107 0310 	add.w	r3, r7, #16
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fe1d 	bl	8003e62 <drv_GPIO_init>
  drv_GPIO_init(&SPI_GPIO_MOSI_PA7);
 8004228:	f107 0308 	add.w	r3, r7, #8
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fe18 	bl	8003e62 <drv_GPIO_init>
  drv_GPIO_init(&SPI_GPIO_SCK_PA5);
 8004232:	463b      	mov	r3, r7
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fe14 	bl	8003e62 <drv_GPIO_init>

  GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL5_Pos);
 800423a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004244:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8004248:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL6_Pos);
 800424a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004254:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8004258:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (0x05 << GPIO_AFRL_AFSEL7_Pos);
 800425a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8004264:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8004268:	6213      	str	r3, [r2, #32]
  PA6 SPI1_ MISO
  PA7 SPI1_ MOSI
  PA5 SPI1_ SCK
*/

  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004274:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004278:	6613      	str	r3, [r2, #96]	; 0x60

  SPI1->CR1 |= SPI_CR1_SSM; /* Software slave select */
 800427a:	4b30      	ldr	r3, [pc, #192]	; (800433c <drv_SPI_init+0x16c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a2f      	ldr	r2, [pc, #188]	; (800433c <drv_SPI_init+0x16c>)
 8004280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004284:	6013      	str	r3, [r2, #0]

  SPI1->CR1 |= SPI_CR1_BR_0; /* 001: fPCLK DIV 4 */
 8004286:	4b2d      	ldr	r3, [pc, #180]	; (800433c <drv_SPI_init+0x16c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2c      	ldr	r2, [pc, #176]	; (800433c <drv_SPI_init+0x16c>)
 800428c:	f043 0308 	orr.w	r3, r3, #8
 8004290:	6013      	str	r3, [r2, #0]

  SPI1->CR1 |= SPI_CR1_MSTR; /* Master */
 8004292:	4b2a      	ldr	r3, [pc, #168]	; (800433c <drv_SPI_init+0x16c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a29      	ldr	r2, [pc, #164]	; (800433c <drv_SPI_init+0x16c>)
 8004298:	f043 0304 	orr.w	r3, r3, #4
 800429c:	6013      	str	r3, [r2, #0]


  SPI1->CR1 |= SPI_CR1_CPOL; /* CK to 1 when idle */
 800429e:	4b27      	ldr	r3, [pc, #156]	; (800433c <drv_SPI_init+0x16c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a26      	ldr	r2, [pc, #152]	; (800433c <drv_SPI_init+0x16c>)
 80042a4:	f043 0302 	orr.w	r3, r3, #2
 80042a8:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CPHA; /* Clock phase 1: The second clock transition is the first data capture edge */
 80042aa:	4b24      	ldr	r3, [pc, #144]	; (800433c <drv_SPI_init+0x16c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a23      	ldr	r2, [pc, #140]	; (800433c <drv_SPI_init+0x16c>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	6013      	str	r3, [r2, #0]

  SPI1->CR1 |= SPI_CR1_BR_2;
 80042b6:	4b21      	ldr	r3, [pc, #132]	; (800433c <drv_SPI_init+0x16c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a20      	ldr	r2, [pc, #128]	; (800433c <drv_SPI_init+0x16c>)
 80042bc:	f043 0320 	orr.w	r3, r3, #32
 80042c0:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_BR_1;
 80042c2:	4b1e      	ldr	r3, [pc, #120]	; (800433c <drv_SPI_init+0x16c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1d      	ldr	r2, [pc, #116]	; (800433c <drv_SPI_init+0x16c>)
 80042c8:	f043 0310 	orr.w	r3, r3, #16
 80042cc:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_BR_0;
 80042ce:	4b1b      	ldr	r3, [pc, #108]	; (800433c <drv_SPI_init+0x16c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a1a      	ldr	r2, [pc, #104]	; (800433c <drv_SPI_init+0x16c>)
 80042d4:	f043 0308 	orr.w	r3, r3, #8
 80042d8:	6013      	str	r3, [r2, #0]
  // this fucks up SPI1->CR1 |= SPI_CR1_LSBFIRST;
 /* 000: fPCLK/2 */
  /* 100: fPCLK/32 */
 // SPI1->CR2 |= SPI_CR2_FRXTH;   /* 1/4 (8 bit) */

  SPI1->CR2 |= (SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2 ); // | SPI_CR2_DS_3);
 80042da:	4b18      	ldr	r3, [pc, #96]	; (800433c <drv_SPI_init+0x16c>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4a17      	ldr	r2, [pc, #92]	; (800433c <drv_SPI_init+0x16c>)
 80042e0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042e4:	6053      	str	r3, [r2, #4]
  SPI1->CR2 &= ~(SPI_CR2_DS_3); /* 0111: 8-bit */
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <drv_SPI_init+0x16c>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4a14      	ldr	r2, [pc, #80]	; (800433c <drv_SPI_init+0x16c>)
 80042ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f0:	6053      	str	r3, [r2, #4]
 /* If software attempts to write one of the “Not used” values, they are forced to the value “0111”
(8-bit) */

  ///* Tx buffer empty interrupt enable */

  SPI1->CR2 |= SPI_CR2_SSOE; /* 1: SS output is enabled in master mode and when the SPI interface is enabled. The SPI
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <drv_SPI_init+0x16c>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4a11      	ldr	r2, [pc, #68]	; (800433c <drv_SPI_init+0x16c>)
 80042f8:	f043 0304 	orr.w	r3, r3, #4
 80042fc:	6053      	str	r3, [r2, #4]
interface cannot work in a multimaster environment. */

  SPI1->CR1 |= SPI_CR1_SPE; /* SPI enable */
 80042fe:	4b0f      	ldr	r3, [pc, #60]	; (800433c <drv_SPI_init+0x16c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a0e      	ldr	r2, [pc, #56]	; (800433c <drv_SPI_init+0x16c>)
 8004304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004308:	6013      	str	r3, [r2, #0]
 SPI1->CR2 |= SPI_CR2_RXNEIE;
 800430a:	4b0c      	ldr	r3, [pc, #48]	; (800433c <drv_SPI_init+0x16c>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a0b      	ldr	r2, [pc, #44]	; (800433c <drv_SPI_init+0x16c>)
 8004310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004314:	6053      	str	r3, [r2, #4]
 SPI1->CR2 |= SPI_CR2_TXEIE;
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <drv_SPI_init+0x16c>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	4a08      	ldr	r2, [pc, #32]	; (800433c <drv_SPI_init+0x16c>)
 800431c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004320:	6053      	str	r3, [r2, #4]

}
 8004322:	bf00      	nop
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	08004a78 	.word	0x08004a78
 8004330:	08004a80 	.word	0x08004a80
 8004334:	08004a88 	.word	0x08004a88
 8004338:	08004a90 	.word	0x08004a90
 800433c:	40013000 	.word	0x40013000

08004340 <drv_SPI_transmit_nBytes>:
{

}

void drv_SPI_transmit_nBytes(uint8_t* pu8Data, uint16_t u16dataLength)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	807b      	strh	r3, [r7, #2]
  for(uint16_t u16idx = 0; u16idx < u16dataLength; ++u16idx)
 800434c:	2300      	movs	r3, #0
 800434e:	81fb      	strh	r3, [r7, #14]
 8004350:	e00f      	b.n	8004372 <drv_SPI_transmit_nBytes+0x32>
  {
    while (!(SPI1->SR & SPI_SR_TXE)) {} // Wait for the transmit buffer to be empty
 8004352:	bf00      	nop
 8004354:	4b19      	ldr	r3, [pc, #100]	; (80043bc <drv_SPI_transmit_nBytes+0x7c>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f9      	beq.n	8004354 <drv_SPI_transmit_nBytes+0x14>
    *((__IO uint8_t *)&SPI1->DR) = pu8Data[u16idx];
 8004360:	89fb      	ldrh	r3, [r7, #14]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <drv_SPI_transmit_nBytes+0x80>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	7013      	strb	r3, [r2, #0]
  for(uint16_t u16idx = 0; u16idx < u16dataLength; ++u16idx)
 800436c:	89fb      	ldrh	r3, [r7, #14]
 800436e:	3301      	adds	r3, #1
 8004370:	81fb      	strh	r3, [r7, #14]
 8004372:	89fa      	ldrh	r2, [r7, #14]
 8004374:	887b      	ldrh	r3, [r7, #2]
 8004376:	429a      	cmp	r2, r3
 8004378:	d3eb      	bcc.n	8004352 <drv_SPI_transmit_nBytes+0x12>
  }

  while (!(SPI1->SR & SPI_SR_TXE)) {} // Wait for the transmit buffer to be empty
 800437a:	bf00      	nop
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <drv_SPI_transmit_nBytes+0x7c>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f9      	beq.n	800437c <drv_SPI_transmit_nBytes+0x3c>
  while (SPI1->SR & SPI_SR_BSY){} // Wait for the SPI peripheral to finish the transmission
 8004388:	bf00      	nop
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <drv_SPI_transmit_nBytes+0x7c>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f9      	bne.n	800438a <drv_SPI_transmit_nBytes+0x4a>

  /* Clear overrun flag if set */
  if(SPI1->SR & SPI_SR_OVR)
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <drv_SPI_transmit_nBytes+0x7c>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <drv_SPI_transmit_nBytes+0x6e>
  {
    uint8_t u8void = SPI1->DR;
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <drv_SPI_transmit_nBytes+0x7c>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	737b      	strb	r3, [r7, #13]
    (void)u8void;
    u8void = SPI1->SR;
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <drv_SPI_transmit_nBytes+0x7c>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	737b      	strb	r3, [r7, #13]
  }


}
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40013000 	.word	0x40013000
 80043c0:	4001300c 	.word	0x4001300c

080043c4 <drv_SPI_receive_nBytes>:

void drv_SPI_receive_nBytes(uint8_t* pu8Data, uint16_t u16dataLength)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	807b      	strh	r3, [r7, #2]
   for(uint16_t u16idx = 0; u16idx < u16dataLength; ++u16idx)
 80043d0:	2300      	movs	r3, #0
 80043d2:	81fb      	strh	r3, [r7, #14]
 80043d4:	e01b      	b.n	800440e <drv_SPI_receive_nBytes+0x4a>
   {
      while (SPI1->SR & SPI_SR_BSY){} // Wait for the SPI peripheral to finish the transmission
 80043d6:	bf00      	nop
 80043d8:	4b12      	ldr	r3, [pc, #72]	; (8004424 <drv_SPI_receive_nBytes+0x60>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f9      	bne.n	80043d8 <drv_SPI_receive_nBytes+0x14>
      *((__IO uint8_t *)&SPI1->DR) = 0; /* Transmit a dummy byte */
 80043e4:	4b10      	ldr	r3, [pc, #64]	; (8004428 <drv_SPI_receive_nBytes+0x64>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
      while (!(SPI1->SR & SPI_SR_RXNE)) {}
 80043ea:	bf00      	nop
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <drv_SPI_receive_nBytes+0x60>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f9      	beq.n	80043ec <drv_SPI_receive_nBytes+0x28>
      pu8Data[u16idx] = (SPI1->DR & 0xff00) >> 8;
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <drv_SPI_receive_nBytes+0x60>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	0a19      	lsrs	r1, r3, #8
 80043fe:	89fb      	ldrh	r3, [r7, #14]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	b2ca      	uxtb	r2, r1
 8004406:	701a      	strb	r2, [r3, #0]
   for(uint16_t u16idx = 0; u16idx < u16dataLength; ++u16idx)
 8004408:	89fb      	ldrh	r3, [r7, #14]
 800440a:	3301      	adds	r3, #1
 800440c:	81fb      	strh	r3, [r7, #14]
 800440e:	89fa      	ldrh	r2, [r7, #14]
 8004410:	887b      	ldrh	r3, [r7, #2]
 8004412:	429a      	cmp	r2, r3
 8004414:	d3df      	bcc.n	80043d6 <drv_SPI_receive_nBytes+0x12>
   }
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40013000 	.word	0x40013000
 8004428:	4001300c 	.word	0x4001300c

0800442c <drv_SPI_assertCS>:


void drv_SPI_assertCS(bool_t bValue)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
  while (SPI1->SR & SPI_SR_BSY){} // Wait for the SPI peripheral to finish the transmission
 8004436:	bf00      	nop
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <drv_SPI_assertCS+0x2c>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1f9      	bne.n	8004438 <drv_SPI_assertCS+0xc>
  drv_GPIO_set_pin(GPIO_PORTA, bValue, SPI_CS_PIN);
 8004444:	79fb      	ldrb	r3, [r7, #7]
 8004446:	2204      	movs	r2, #4
 8004448:	4619      	mov	r1, r3
 800444a:	2000      	movs	r0, #0
 800444c:	f7ff fd26 	bl	8003e9c <drv_GPIO_set_pin>
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40013000 	.word	0x40013000

0800445c <__NVIC_EnableIRQ>:
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446a:	2b00      	cmp	r3, #0
 800446c:	db0b      	blt.n	8004486 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	f003 021f 	and.w	r2, r3, #31
 8004474:	4907      	ldr	r1, [pc, #28]	; (8004494 <__NVIC_EnableIRQ+0x38>)
 8004476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	2001      	movs	r0, #1
 800447e:	fa00 f202 	lsl.w	r2, r0, r2
 8004482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	e000e100 	.word	0xe000e100

08004498 <__NVIC_SetPriority>:
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	6039      	str	r1, [r7, #0]
 80044a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	db0a      	blt.n	80044c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	490c      	ldr	r1, [pc, #48]	; (80044e4 <__NVIC_SetPriority+0x4c>)
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	0112      	lsls	r2, r2, #4
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	440b      	add	r3, r1
 80044bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80044c0:	e00a      	b.n	80044d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	4908      	ldr	r1, [pc, #32]	; (80044e8 <__NVIC_SetPriority+0x50>)
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	3b04      	subs	r3, #4
 80044d0:	0112      	lsls	r2, r2, #4
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	440b      	add	r3, r1
 80044d6:	761a      	strb	r2, [r3, #24]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000e100 	.word	0xe000e100
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <drv_uart_init>:
static uint8_t au8TxBuf[TX_BUFFER_SIZE];
static uint8_t au8RxBuf[RX_BUFFER_SIZE];

/* Public functions ----------------------------------------------------*/
void drv_uart_init(UART_init_t* pUARTInit)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  ringBuffer_init(&uartTxBuffer, au8TxBuf, TX_BUFFER_SIZE);
 80044f4:	2210      	movs	r2, #16
 80044f6:	493e      	ldr	r1, [pc, #248]	; (80045f0 <drv_uart_init+0x104>)
 80044f8:	483e      	ldr	r0, [pc, #248]	; (80045f4 <drv_uart_init+0x108>)
 80044fa:	f000 f96d 	bl	80047d8 <ringBuffer_init>
  ringBuffer_init(&uartRxBuffer, au8RxBuf, RX_BUFFER_SIZE);
 80044fe:	2210      	movs	r2, #16
 8004500:	493d      	ldr	r1, [pc, #244]	; (80045f8 <drv_uart_init+0x10c>)
 8004502:	483e      	ldr	r0, [pc, #248]	; (80045fc <drv_uart_init+0x110>)
 8004504:	f000 f968 	bl	80047d8 <ringBuffer_init>

  RCC->APB2ENR |= RCC_APB2ENR_USART1EN; /* CPU1 USART1 clocks enable */
 8004508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004516:	6613      	str	r3, [r2, #96]	; 0x60
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8004518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004522:	f043 0302 	orr.w	r3, r3, #2
 8004526:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* https://www.st.com/resource/en/datasheet/stm32wb55cc.pdf  AF7  USART1 PB6 -> USART1_ TX PB7 -> USART1_ RX
  GPIOx_AFRL 0111: AF7*/
  GPIOB->AFR[0] |= (0x07 << GPIO_AFRL_AFSEL7_Pos);
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <drv_uart_init+0x114>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4a34      	ldr	r2, [pc, #208]	; (8004600 <drv_uart_init+0x114>)
 800452e:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8004532:	6213      	str	r3, [r2, #32]
  GPIOB->AFR[0] |= (0x07 << GPIO_AFRL_AFSEL6_Pos);
 8004534:	4b32      	ldr	r3, [pc, #200]	; (8004600 <drv_uart_init+0x114>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4a31      	ldr	r2, [pc, #196]	; (8004600 <drv_uart_init+0x114>)
 800453a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800453e:	6213      	str	r3, [r2, #32]

  GPIO_init_t USART_GPIO_PB5 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 8004540:	4a30      	ldr	r2, [pc, #192]	; (8004604 <drv_uart_init+0x118>)
 8004542:	f107 0310 	add.w	r3, r7, #16
 8004546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800454a:	6018      	str	r0, [r3, #0]
 800454c:	3304      	adds	r3, #4
 800454e:	8019      	strh	r1, [r3, #0]
			         .gpioSpeed = GPIO_SPEED_HIGH,
			         .gpioPort = GPIO_PORTB,
				 .gpioPuPd = GPIO_NO_PULL,
				 .u8pinNumber = 7                 };

  GPIO_init_t USART_GPIO_PB6 = { .gpioType = GPIO_TYPE_PUSH_PULL,
 8004550:	4a2d      	ldr	r2, [pc, #180]	; (8004608 <drv_uart_init+0x11c>)
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	e892 0003 	ldmia.w	r2, {r0, r1}
 800455a:	6018      	str	r0, [r3, #0]
 800455c:	3304      	adds	r3, #4
 800455e:	8019      	strh	r1, [r3, #0]
  			         .gpioSpeed = GPIO_SPEED_HIGH,
  			         .gpioPort = GPIO_PORTB,
  				 .gpioPuPd = GPIO_NO_PULL,
  			         .u8pinNumber = 6	          };

  drv_GPIO_init(&USART_GPIO_PB5);
 8004560:	f107 0310 	add.w	r3, r7, #16
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fc7c 	bl	8003e62 <drv_GPIO_init>
  drv_GPIO_init(&USART_GPIO_PB6);
 800456a:	f107 0308 	add.w	r3, r7, #8
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fc77 	bl	8003e62 <drv_GPIO_init>

  // Disable USART
   USART1->CR1 &= ~USART_CR1_UE;
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <drv_uart_init+0x120>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a24      	ldr	r2, [pc, #144]	; (800460c <drv_uart_init+0x120>)
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	6013      	str	r3, [r2, #0]
   // Clear interrupt flags
    USART1->ICR = USART_ICR_TCCF;
 8004580:	4b22      	ldr	r3, [pc, #136]	; (800460c <drv_uart_init+0x120>)
 8004582:	2240      	movs	r2, #64	; 0x40
 8004584:	621a      	str	r2, [r3, #32]

   /* In asynchronous mode, the following bits must be kept cleared: LINEN and CLKEN bits in the USART_CR2 register */
  USART1->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8004586:	4b21      	ldr	r3, [pc, #132]	; (800460c <drv_uart_init+0x120>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4a20      	ldr	r2, [pc, #128]	; (800460c <drv_uart_init+0x120>)
 800458c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004590:	6053      	str	r3, [r2, #4]
  USART1->CR3 &= ~((USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004592:	4b1e      	ldr	r3, [pc, #120]	; (800460c <drv_uart_init+0x120>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	4a1d      	ldr	r2, [pc, #116]	; (800460c <drv_uart_init+0x120>)
 8004598:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800459c:	6093      	str	r3, [r2, #8]

  set_UART_stopBits(pUARTInit);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f836 	bl	8004610 <set_UART_stopBits>
  set_UART_wordLength(pUARTInit);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f85b 	bl	8004660 <set_UART_wordLength>
  set_UART_baudRate(pUARTInit);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f87e 	bl	80046ac <set_UART_baudRate>
  set_UART_parity(pUARTInit);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f8a5 	bl	8004700 <set_UART_parity>

  /* Oversampling */
  USART1->CR1 &= ~USART_CR1_OVER8; /* 16 */
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <drv_uart_init+0x120>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a14      	ldr	r2, [pc, #80]	; (800460c <drv_uart_init+0x120>)
 80045bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045c0:	6013      	str	r3, [r2, #0]

  /* CR2 Bit 19 MSBFIRST: Most significant bit first */
  // Enable USART1, transmitter, and receiver
  USART1->CR1 |= USART_CR1_TE | USART_CR1_UE | USART_CR1_RE  | USART_CR1_TCIE;
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <drv_uart_init+0x120>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a11      	ldr	r2, [pc, #68]	; (800460c <drv_uart_init+0x120>)
 80045c8:	f043 034d 	orr.w	r3, r3, #77	; 0x4d
 80045cc:	6013      	str	r3, [r2, #0]

  // Clear the TXE interrupt enable bit
  USART1->CR1 &= ~(USART_CR1_TXEIE | USART_CR1_TCIE); /* Clear TXEIE and TC interrupts */
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <drv_uart_init+0x120>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a0e      	ldr	r2, [pc, #56]	; (800460c <drv_uart_init+0x120>)
 80045d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045d8:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(USART1_IRQn, 0);			// Set Priority to 1
 80045da:	2100      	movs	r1, #0
 80045dc:	2024      	movs	r0, #36	; 0x24
 80045de:	f7ff ff5b 	bl	8004498 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);				// Enable interrupt of USART1 peripheral
 80045e2:	2024      	movs	r0, #36	; 0x24
 80045e4:	f7ff ff3a 	bl	800445c <__NVIC_EnableIRQ>
}
 80045e8:	bf00      	nop
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	200000a4 	.word	0x200000a4
 80045f4:	20000084 	.word	0x20000084
 80045f8:	200000b4 	.word	0x200000b4
 80045fc:	20000094 	.word	0x20000094
 8004600:	48000400 	.word	0x48000400
 8004604:	08004a98 	.word	0x08004a98
 8004608:	08004aa0 	.word	0x08004aa0
 800460c:	40013800 	.word	0x40013800

08004610 <set_UART_stopBits>:
}


/* Private functions ---------------------------------------------------*/
static void set_UART_stopBits(UART_init_t* pUARTInit)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartStopBits)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	785b      	ldrb	r3, [r3, #1]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <set_UART_stopBits+0x16>
 8004620:	2b01      	cmp	r3, #1
 8004622:	d00d      	beq.n	8004640 <set_UART_stopBits+0x30>

    case UART_STOP_BITS_2:
      USART1->CR2 |= (0x2UL << USART_CR2_STOP_Pos) ;
      break;

    default: break;
 8004624:	e013      	b.n	800464e <set_UART_stopBits+0x3e>
      USART1->CR2 &= ~(0x01UL << USART_CR2_STOP_Pos);
 8004626:	4b0d      	ldr	r3, [pc, #52]	; (800465c <set_UART_stopBits+0x4c>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4a0c      	ldr	r2, [pc, #48]	; (800465c <set_UART_stopBits+0x4c>)
 800462c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004630:	6053      	str	r3, [r2, #4]
      USART1->CR2 &= ~(0x01UL << (USART_CR2_STOP_Pos + 1U));
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <set_UART_stopBits+0x4c>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <set_UART_stopBits+0x4c>)
 8004638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800463c:	6053      	str	r3, [r2, #4]
      break;
 800463e:	e006      	b.n	800464e <set_UART_stopBits+0x3e>
      USART1->CR2 |= (0x2UL << USART_CR2_STOP_Pos) ;
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <set_UART_stopBits+0x4c>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	4a05      	ldr	r2, [pc, #20]	; (800465c <set_UART_stopBits+0x4c>)
 8004646:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800464a:	6053      	str	r3, [r2, #4]
      break;
 800464c:	bf00      	nop
  }
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40013800 	.word	0x40013800

08004660 <set_UART_wordLength>:

static void set_UART_wordLength(UART_init_t* pUARTInit)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartWordLength)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	78db      	ldrb	r3, [r3, #3]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d011      	beq.n	8004694 <set_UART_wordLength+0x34>
 8004670:	2b02      	cmp	r3, #2
 8004672:	d011      	beq.n	8004698 <set_UART_wordLength+0x38>
 8004674:	2b00      	cmp	r3, #0
 8004676:	d000      	beq.n	800467a <set_UART_wordLength+0x1a>
       USART1->CR1 &= ~USART_CR1_M0;
     } break;

     case UART_WORD_LEGTH_7_BITS: break;
     case UART_WORD_LEGTH_9_BITS: break;
     default: break;
 8004678:	e00f      	b.n	800469a <set_UART_wordLength+0x3a>
       USART1->CR1 &= ~USART_CR1_M1;
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <set_UART_wordLength+0x48>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <set_UART_wordLength+0x48>)
 8004680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004684:	6013      	str	r3, [r2, #0]
       USART1->CR1 &= ~USART_CR1_M0;
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <set_UART_wordLength+0x48>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a07      	ldr	r2, [pc, #28]	; (80046a8 <set_UART_wordLength+0x48>)
 800468c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004690:	6013      	str	r3, [r2, #0]
     } break;
 8004692:	e002      	b.n	800469a <set_UART_wordLength+0x3a>
     case UART_WORD_LEGTH_7_BITS: break;
 8004694:	bf00      	nop
 8004696:	e000      	b.n	800469a <set_UART_wordLength+0x3a>
     case UART_WORD_LEGTH_9_BITS: break;
 8004698:	bf00      	nop
   }
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40013800 	.word	0x40013800

080046ac <set_UART_baudRate>:

static void set_UART_baudRate(UART_init_t* pUARTInit)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t baudValue = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
  switch (pUARTInit->uartBaud)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d00a      	beq.n	80046d6 <set_UART_baudRate+0x2a>
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d00e      	beq.n	80046e2 <set_UART_baudRate+0x36>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d000      	beq.n	80046ca <set_UART_baudRate+0x1e>
  {
    case UART_BAUD_9600:  { baudValue = calculateBaudRateValue(9600);  } break;
    case UART_BAUD_38400: { baudValue = calculateBaudRateValue(38400); } break;
    case UART_BAUD_115200: { baudValue = calculateBaudRateValue(115200);} break;
    default: break;
 80046c8:	e011      	b.n	80046ee <set_UART_baudRate+0x42>
    case UART_BAUD_9600:  { baudValue = calculateBaudRateValue(9600);  } break;
 80046ca:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80046ce:	f000 f847 	bl	8004760 <calculateBaudRateValue>
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	e00b      	b.n	80046ee <set_UART_baudRate+0x42>
    case UART_BAUD_38400: { baudValue = calculateBaudRateValue(38400); } break;
 80046d6:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 80046da:	f000 f841 	bl	8004760 <calculateBaudRateValue>
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	e005      	b.n	80046ee <set_UART_baudRate+0x42>
    case UART_BAUD_115200: { baudValue = calculateBaudRateValue(115200);} break;
 80046e2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80046e6:	f000 f83b 	bl	8004760 <calculateBaudRateValue>
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	bf00      	nop
  }
   USART1->BRR = baudValue;
 80046ee:	4a03      	ldr	r2, [pc, #12]	; (80046fc <set_UART_baudRate+0x50>)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	60d3      	str	r3, [r2, #12]
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40013800 	.word	0x40013800

08004700 <set_UART_parity>:

static void set_UART_parity(UART_init_t* pUARTInit)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  switch (pUARTInit->uartParity)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	789b      	ldrb	r3, [r3, #2]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d00b      	beq.n	8004728 <set_UART_parity+0x28>
 8004710:	2b02      	cmp	r3, #2
 8004712:	d016      	beq.n	8004742 <set_UART_parity+0x42>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d000      	beq.n	800471a <set_UART_parity+0x1a>
      USART1->CR1 |= USART_CR1_PCE;
      USART1->CR1 &= ~USART_CR1_PS;
    } break;

    case UART_PARITY_ODD: { USART1->CR1 |= USART_CR1_PCE | USART_CR1_PS; } break;
    default: break;
 8004718:	e01a      	b.n	8004750 <set_UART_parity+0x50>
    case UART_PARITY_NONE: { USART1->CR1 &= ~USART_CR1_PCE; } break;
 800471a:	4b10      	ldr	r3, [pc, #64]	; (800475c <set_UART_parity+0x5c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a0f      	ldr	r2, [pc, #60]	; (800475c <set_UART_parity+0x5c>)
 8004720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e013      	b.n	8004750 <set_UART_parity+0x50>
      USART1->CR1 |= USART_CR1_PCE;
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <set_UART_parity+0x5c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a0b      	ldr	r2, [pc, #44]	; (800475c <set_UART_parity+0x5c>)
 800472e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004732:	6013      	str	r3, [r2, #0]
      USART1->CR1 &= ~USART_CR1_PS;
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <set_UART_parity+0x5c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a08      	ldr	r2, [pc, #32]	; (800475c <set_UART_parity+0x5c>)
 800473a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800473e:	6013      	str	r3, [r2, #0]
    } break;
 8004740:	e006      	b.n	8004750 <set_UART_parity+0x50>
    case UART_PARITY_ODD: { USART1->CR1 |= USART_CR1_PCE | USART_CR1_PS; } break;
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <set_UART_parity+0x5c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a05      	ldr	r2, [pc, #20]	; (800475c <set_UART_parity+0x5c>)
 8004748:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	bf00      	nop
  }
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	40013800 	.word	0x40013800

08004760 <calculateBaudRateValue>:

int((104.1875 * 16) + 0.5) = 1667 = 0x683

Personally I've been using BRR = APBCLK / BAUD for 13+ years, it is simpler to explain/compute. */
static uint32_t calculateBaudRateValue(uint32_t u32baudrate)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t APBCLK = 64000000;
 8004768:	4b07      	ldr	r3, [pc, #28]	; (8004788 <calculateBaudRateValue+0x28>)
 800476a:	60fb      	str	r3, [r7, #12]
  uint32_t u32res = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	60bb      	str	r3, [r7, #8]

  u32res = (APBCLK / u32baudrate );
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	60bb      	str	r3, [r7, #8]

  return u32res;
 800477a:	68bb      	ldr	r3, [r7, #8]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	03d09000 	.word	0x03d09000

0800478c <drv_uart_IRQHandler>:
transmission corrupts the data on the TX pin as the baud rate counters get frozen. The
current data being transmitted are then lost.
An idle frame is sent when the TE bit is enabled. */

void drv_uart_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  if (USART1->ISR & USART_ISR_TC) /* If a transfer is complete, byte by byte */
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <drv_uart_IRQHandler+0x44>)
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d017      	beq.n	80047cc <drv_uart_IRQHandler+0x40>
  {
    if (uartTxBuffer.u16elementsInBuffer > 0) /* Do we have anything to send */
 800479c:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <drv_uart_IRQHandler+0x48>)
 800479e:	891b      	ldrh	r3, [r3, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00d      	beq.n	80047c0 <drv_uart_IRQHandler+0x34>
    {
      USART1->TDR = ringBuffer_get(&uartTxBuffer);
 80047a4:	480b      	ldr	r0, [pc, #44]	; (80047d4 <drv_uart_IRQHandler+0x48>)
 80047a6:	f000 f836 	bl	8004816 <ringBuffer_get>
 80047aa:	4603      	mov	r3, r0
 80047ac:	461a      	mov	r2, r3
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <drv_uart_IRQHandler+0x44>)
 80047b0:	629a      	str	r2, [r3, #40]	; 0x28
      while(!(USART1->ISR & USART_ISR_TC));  /* Wait here until the transfer is complete */
 80047b2:	bf00      	nop
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <drv_uart_IRQHandler+0x44>)
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f9      	beq.n	80047b4 <drv_uart_IRQHandler+0x28>
    }

    USART1->CR1 &= ~(USART_CR1_TXEIE); /* Disable the transmission buffer empty interrupt, we will enable this once we have something to send */
 80047c0:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <drv_uart_IRQHandler+0x44>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a02      	ldr	r2, [pc, #8]	; (80047d0 <drv_uart_IRQHandler+0x44>)
 80047c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ca:	6013      	str	r3, [r2, #0]
  }
}
 80047cc:	bf00      	nop
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40013800 	.word	0x40013800
 80047d4:	20000084 	.word	0x20000084

080047d8 <ringBuffer_init>:

/* Global variables ---------------------------------------------------*/

/* Public functions ----------------------------------------------------*/
void ringBuffer_init(sRingbuf_t* pRingBuffer, uint8_t* pu8buffer, uint16_t u16bufferSizeBytes)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  pRingBuffer->au8buffer 	    = &pu8buffer[0];
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	601a      	str	r2, [r3, #0]
  pRingBuffer->u16bufferMaxCapacity = u16bufferSizeBytes;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	815a      	strh	r2, [r3, #10]
  pRingBuffer->u16elementsInBuffer  = 0;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	811a      	strh	r2, [r3, #8]
  pRingBuffer->u16getIndex  	    = 0;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	80da      	strh	r2, [r3, #6]
  pRingBuffer->u16putIndex          = 0;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	809a      	strh	r2, [r3, #4]
  pRingBuffer->eRingBufStatus       = RINGBUF_EMPTY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	731a      	strb	r2, [r3, #12]
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <ringBuffer_get>:
  return bStatus;
}


uint8_t ringBuffer_get(sRingbuf_t* pRingBuffer)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800481e:	b672      	cpsid	i
  __disable_irq();

  uint8_t u8returnValue = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	73fb      	strb	r3, [r7, #15]

  if(    (pRingBuffer->eRingBufStatus != RINGBUF_EMPTY        )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	7b1b      	ldrb	r3, [r3, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d026      	beq.n	800487a <ringBuffer_get+0x64>
      && (pRingBuffer->u16getIndex != pRingBuffer->u16putIndex)  )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	88da      	ldrh	r2, [r3, #6]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	889b      	ldrh	r3, [r3, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d020      	beq.n	800487a <ringBuffer_get+0x64>
  {
    u8returnValue = pRingBuffer->au8buffer[pRingBuffer->u16getIndex];
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	88d2      	ldrh	r2, [r2, #6]
 8004840:	4413      	add	r3, r2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	73fb      	strb	r3, [r7, #15]
    pRingBuffer->au8buffer[pRingBuffer->u16getIndex] = 0;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	88d2      	ldrh	r2, [r2, #6]
 800484e:	4413      	add	r3, r2
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
    pRingBuffer->u16elementsInBuffer--;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	891b      	ldrh	r3, [r3, #8]
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	811a      	strh	r2, [r3, #8]
    pRingBuffer->u16getIndex = (pRingBuffer->u16getIndex + 1) % (pRingBuffer->u16bufferMaxCapacity);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	88db      	ldrh	r3, [r3, #6]
 8004864:	3301      	adds	r3, #1
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	8952      	ldrh	r2, [r2, #10]
 800486a:	fb93 f1f2 	sdiv	r1, r3, r2
 800486e:	fb02 f201 	mul.w	r2, r2, r1
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	80da      	strh	r2, [r3, #6]
  __ASM volatile ("cpsie i" : : : "memory");
 800487a:	b662      	cpsie	i

  }
  __enable_irq();
  return u8returnValue;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <simple_fsm_init>:
/* Global variables ---------------------------------------------------*/
static const state_table_t* states;

/* Public functions ----------------------------------------------------*/
void simple_fsm_init(fsm_t* pfsm, uint8_t u8sizeBytes, const state_table_t* pstates)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	460b      	mov	r3, r1
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	72fb      	strb	r3, [r7, #11]
  pfsm->u8statesCount = u8sizeBytes;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	7afa      	ldrb	r2, [r7, #11]
 800489e:	721a      	strb	r2, [r3, #8]
  states = pstates;
 80048a0:	4a04      	ldr	r2, [pc, #16]	; (80048b4 <simple_fsm_init+0x28>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6013      	str	r3, [r2, #0]
}
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	200000c4 	.word	0x200000c4

080048b8 <simpleTimer_reset_milliSeconds>:
    timer->eTimerStatus = STS_RUNNING;
  }
}

void simpleTimer_reset_milliSeconds(sTimer_t* timer, uint16_t u16resetValue)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	807b      	strh	r3, [r7, #2]
  if(timer->eTimerStatus != STS_RUNNING )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	791b      	ldrb	r3, [r3, #4]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d00d      	beq.n	80048e8 <simpleTimer_reset_milliSeconds+0x30>
  {
    timer->u32timeOfReset = simpleTimer_getMilliseconds();
 80048cc:	f000 f878 	bl	80049c0 <simpleTimer_getMilliseconds>
 80048d0:	4602      	mov	r2, r0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	601a      	str	r2, [r3, #0]
    timer->u16resetValue = u16resetValue;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	887a      	ldrh	r2, [r7, #2]
 80048da:	80da      	strh	r2, [r3, #6]
    timer->bIsMillisecondsTimer = true;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	721a      	strb	r2, [r3, #8]
    timer->eTimerStatus = STS_RUNNING;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	711a      	strb	r2, [r3, #4]
  }
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <simpleTimer_timeout>:


bool_t simpleTimer_timeout(sTimer_t* timer)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  bool_t bTimedOut = false;
 80048f8:	2300      	movs	r3, #0
 80048fa:	73fb      	strb	r3, [r7, #15]

  if(timer->bIsMillisecondsTimer)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7a1b      	ldrb	r3, [r3, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <simpleTimer_timeout+0x3a>
  {
    if(    ( (timer->u32timeOfReset + timer->u16resetValue) < u32currentTimeMilliseconds )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	88d2      	ldrh	r2, [r2, #6]
 800490c:	441a      	add	r2, r3
 800490e:	4b13      	ldr	r3, [pc, #76]	; (800495c <simpleTimer_timeout+0x6c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d21b      	bcs.n	800494e <simpleTimer_timeout+0x5e>
        && (timer->eTimerStatus == STS_RUNNING)                                             )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	791b      	ldrb	r3, [r3, #4]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d117      	bne.n	800494e <simpleTimer_timeout+0x5e>
    {
      bTimedOut = true;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
      timer->eTimerStatus = STS_TIMED_OUT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	711a      	strb	r2, [r3, #4]
 8004928:	e011      	b.n	800494e <simpleTimer_timeout+0x5e>
    }
  }
  else
  {
    if(    ( (timer->u32timeOfReset + timer->u16resetValue) < u32currentTimeSeconds)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	88d2      	ldrh	r2, [r2, #6]
 8004932:	441a      	add	r2, r3
 8004934:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <simpleTimer_timeout+0x70>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d208      	bcs.n	800494e <simpleTimer_timeout+0x5e>
	&& (timer->eTimerStatus == STS_RUNNING)                                       )
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	791b      	ldrb	r3, [r3, #4]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d104      	bne.n	800494e <simpleTimer_timeout+0x5e>
    {
      bTimedOut = true;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      timer->eTimerStatus = STS_TIMED_OUT;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	711a      	strb	r2, [r3, #4]
    }
  }
  return bTimedOut;
 800494e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	200000d4 	.word	0x200000d4
 8004960:	200000d0 	.word	0x200000d0

08004964 <simpleTimer_IRQHandler>:

/* Public functions ----------------------------------------------------*/


void simpleTimer_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM17)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <simpleTimer_IRQHandler+0x4c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d116      	bne.n	80049a4 <simpleTimer_IRQHandler+0x40>
  {
    ++u32elapsedTicks;
 8004976:	4b0f      	ldr	r3, [pc, #60]	; (80049b4 <simpleTimer_IRQHandler+0x50>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3301      	adds	r3, #1
 800497c:	4a0d      	ldr	r2, [pc, #52]	; (80049b4 <simpleTimer_IRQHandler+0x50>)
 800497e:	6013      	str	r3, [r2, #0]

    if((u32elapsedTicks % 1000) == 0)
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <simpleTimer_IRQHandler+0x50>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <simpleTimer_IRQHandler+0x54>)
 8004986:	fba3 1302 	umull	r1, r3, r3, r2
 800498a:	099b      	lsrs	r3, r3, #6
 800498c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d104      	bne.n	80049a4 <simpleTimer_IRQHandler+0x40>
    {
      ++u32elapsedSeconds;
 800499a:	4b08      	ldr	r3, [pc, #32]	; (80049bc <simpleTimer_IRQHandler+0x58>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3301      	adds	r3, #1
 80049a0:	4a06      	ldr	r2, [pc, #24]	; (80049bc <simpleTimer_IRQHandler+0x58>)
 80049a2:	6013      	str	r3, [r2, #0]
    }
  }
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	40014800 	.word	0x40014800
 80049b4:	200000c8 	.word	0x200000c8
 80049b8:	10624dd3 	.word	0x10624dd3
 80049bc:	200000cc 	.word	0x200000cc

080049c0 <simpleTimer_getMilliseconds>:
{
  return u32elapsedSeconds;
}

uint32_t simpleTimer_getMilliseconds(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return u32elapsedTicks;
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <simpleTimer_getMilliseconds+0x14>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	200000c8 	.word	0x200000c8

080049d8 <__libc_init_array>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	4e0d      	ldr	r6, [pc, #52]	; (8004a10 <__libc_init_array+0x38>)
 80049dc:	4c0d      	ldr	r4, [pc, #52]	; (8004a14 <__libc_init_array+0x3c>)
 80049de:	1ba4      	subs	r4, r4, r6
 80049e0:	10a4      	asrs	r4, r4, #2
 80049e2:	2500      	movs	r5, #0
 80049e4:	42a5      	cmp	r5, r4
 80049e6:	d109      	bne.n	80049fc <__libc_init_array+0x24>
 80049e8:	4e0b      	ldr	r6, [pc, #44]	; (8004a18 <__libc_init_array+0x40>)
 80049ea:	4c0c      	ldr	r4, [pc, #48]	; (8004a1c <__libc_init_array+0x44>)
 80049ec:	f000 f820 	bl	8004a30 <_init>
 80049f0:	1ba4      	subs	r4, r4, r6
 80049f2:	10a4      	asrs	r4, r4, #2
 80049f4:	2500      	movs	r5, #0
 80049f6:	42a5      	cmp	r5, r4
 80049f8:	d105      	bne.n	8004a06 <__libc_init_array+0x2e>
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a00:	4798      	blx	r3
 8004a02:	3501      	adds	r5, #1
 8004a04:	e7ee      	b.n	80049e4 <__libc_init_array+0xc>
 8004a06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a0a:	4798      	blx	r3
 8004a0c:	3501      	adds	r5, #1
 8004a0e:	e7f2      	b.n	80049f6 <__libc_init_array+0x1e>
 8004a10:	08004b78 	.word	0x08004b78
 8004a14:	08004b78 	.word	0x08004b78
 8004a18:	08004b78 	.word	0x08004b78
 8004a1c:	08004b7c 	.word	0x08004b7c

08004a20 <memset>:
 8004a20:	4402      	add	r2, r0
 8004a22:	4603      	mov	r3, r0
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d100      	bne.n	8004a2a <memset+0xa>
 8004a28:	4770      	bx	lr
 8004a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2e:	e7f9      	b.n	8004a24 <memset+0x4>

08004a30 <_init>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr

08004a3c <_fini>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr
